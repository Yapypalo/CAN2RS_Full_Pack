
CAN2RS_Translator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041f0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  080042fc  080042fc  000052fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043cc  080043cc  0000605c  2**0
                  CONTENTS
  4 .ARM          00000000  080043cc  080043cc  0000605c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043cc  080043cc  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043cc  080043cc  000053cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080043d0  080043d0  000053d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080043d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  2000005c  08004430  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008e8  08004430  000068e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab00  00000000  00000000  00006085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000223c  00000000  00000000  00010b85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00012dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006a3  00000000  00000000  00013698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001808e  00000000  00000000  00013d3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d742  00000000  00000000  0002bdc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084e0d  00000000  00000000  0003950b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be318  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002734  00000000  00000000  000be35c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000c0a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	080042e4 	.word	0x080042e4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	080042e4 	.word	0x080042e4

0800014c <CAN_Init>:
static CAN_RxHeaderTypeDef RxHeader;
static uint8_t rxBuf[8];
static volatile bool newMsg = false;

void CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	@ 0x30
 8000150:	af00      	add	r7, sp, #0
  __HAL_RCC_CAN1_CLK_ENABLE();
 8000152:	4b2f      	ldr	r3, [pc, #188]	@ (8000210 <CAN_Init+0xc4>)
 8000154:	69db      	ldr	r3, [r3, #28]
 8000156:	4a2e      	ldr	r2, [pc, #184]	@ (8000210 <CAN_Init+0xc4>)
 8000158:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800015c:	61d3      	str	r3, [r2, #28]
 800015e:	4b2c      	ldr	r3, [pc, #176]	@ (8000210 <CAN_Init+0xc4>)
 8000160:	69db      	ldr	r3, [r3, #28]
 8000162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  hcan1.Instance = CAN1;
 800016a:	4b2a      	ldr	r3, [pc, #168]	@ (8000214 <CAN_Init+0xc8>)
 800016c:	4a2a      	ldr	r2, [pc, #168]	@ (8000218 <CAN_Init+0xcc>)
 800016e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;              // 36MHz / 6 = 6MHz -> 1Mbps (CAN)
 8000170:	4b28      	ldr	r3, [pc, #160]	@ (8000214 <CAN_Init+0xc8>)
 8000172:	2206      	movs	r2, #6
 8000174:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode      = CAN_MODE_NORMAL;
 8000176:	4b27      	ldr	r3, [pc, #156]	@ (8000214 <CAN_Init+0xc8>)
 8000178:	2200      	movs	r2, #0
 800017a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800017c:	4b25      	ldr	r3, [pc, #148]	@ (8000214 <CAN_Init+0xc8>)
 800017e:	2200      	movs	r2, #0
 8000180:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1     = CAN_BS1_8TQ;
 8000182:	4b24      	ldr	r3, [pc, #144]	@ (8000214 <CAN_Init+0xc8>)
 8000184:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000188:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2     = CAN_BS2_3TQ;
 800018a:	4b22      	ldr	r3, [pc, #136]	@ (8000214 <CAN_Init+0xc8>)
 800018c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000190:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000192:	4b20      	ldr	r3, [pc, #128]	@ (8000214 <CAN_Init+0xc8>)
 8000194:	2200      	movs	r2, #0
 8000196:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff      = ENABLE;
 8000198:	4b1e      	ldr	r3, [pc, #120]	@ (8000214 <CAN_Init+0xc8>)
 800019a:	2201      	movs	r2, #1
 800019c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp      = DISABLE;
 800019e:	4b1d      	ldr	r3, [pc, #116]	@ (8000214 <CAN_Init+0xc8>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80001a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000214 <CAN_Init+0xc8>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked  = DISABLE;
 80001aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000214 <CAN_Init+0xc8>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80001b0:	4b18      	ldr	r3, [pc, #96]	@ (8000214 <CAN_Init+0xc8>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	775a      	strb	r2, [r3, #29]
  HAL_CAN_Init(&hcan1);
 80001b6:	4817      	ldr	r0, [pc, #92]	@ (8000214 <CAN_Init+0xc8>)
 80001b8:	f000 fede 	bl	8000f78 <HAL_CAN_Init>

  // Фильтр: принять всё
  CAN_FilterTypeDef filt = {0};
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	2228      	movs	r2, #40	@ 0x28
 80001c2:	2100      	movs	r1, #0
 80001c4:	4618      	mov	r0, r3
 80001c6:	f003 fbfd 	bl	80039c4 <memset>
  filt.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  filt.FilterIdHigh   = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60bb      	str	r3, [r7, #8]
  filt.FilterIdLow    = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  filt.FilterMaskIdHigh= 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
  filt.FilterMaskIdLow = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]
  filt.FilterBank     = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	61fb      	str	r3, [r7, #28]
  filt.FilterMode     = CAN_FILTERMODE_IDMASK;
 80001e2:	2300      	movs	r3, #0
 80001e4:	623b      	str	r3, [r7, #32]
  filt.FilterScale    = CAN_FILTERSCALE_32BIT;
 80001e6:	2301      	movs	r3, #1
 80001e8:	627b      	str	r3, [r7, #36]	@ 0x24
  filt.FilterActivation = ENABLE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_CAN_ConfigFilter(&hcan1, &filt);
 80001ee:	f107 0308 	add.w	r3, r7, #8
 80001f2:	4619      	mov	r1, r3
 80001f4:	4807      	ldr	r0, [pc, #28]	@ (8000214 <CAN_Init+0xc8>)
 80001f6:	f000 ffba 	bl	800116e <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 80001fa:	4806      	ldr	r0, [pc, #24]	@ (8000214 <CAN_Init+0xc8>)
 80001fc:	f001 f880 	bl	8001300 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000200:	2102      	movs	r1, #2
 8000202:	4804      	ldr	r0, [pc, #16]	@ (8000214 <CAN_Init+0xc8>)
 8000204:	f001 f98f 	bl	8001526 <HAL_CAN_ActivateNotification>
}
 8000208:	bf00      	nop
 800020a:	3730      	adds	r7, #48	@ 0x30
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40021000 	.word	0x40021000
 8000214:	20000078 	.word	0x20000078
 8000218:	40006400 	.word	0x40006400

0800021c <CAN_Send>:

HAL_StatusTypeDef CAN_Send(uint16_t id, uint8_t *buf, uint8_t len)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08a      	sub	sp, #40	@ 0x28
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	80fb      	strh	r3, [r7, #6]
 8000228:	4613      	mov	r3, r2
 800022a:	717b      	strb	r3, [r7, #5]
  CAN_TxHeaderTypeDef txh = {0};
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
 800023c:	615a      	str	r2, [r3, #20]
  uint32_t mailbox;
  txh.StdId = id & 0x7FF;
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000244:	613b      	str	r3, [r7, #16]
  txh.IDE   = CAN_ID_STD;
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
  txh.RTR   = CAN_RTR_DATA;
 800024a:	2300      	movs	r3, #0
 800024c:	61fb      	str	r3, [r7, #28]
  txh.DLC   = len;
 800024e:	797b      	ldrb	r3, [r7, #5]
 8000250:	623b      	str	r3, [r7, #32]
  return HAL_CAN_AddTxMessage(&hcan1, &txh, buf, &mailbox);
 8000252:	f107 030c 	add.w	r3, r7, #12
 8000256:	f107 0110 	add.w	r1, r7, #16
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	4803      	ldr	r0, [pc, #12]	@ (800026c <CAN_Send+0x50>)
 800025e:	f001 f893 	bl	8001388 <HAL_CAN_AddTxMessage>
 8000262:	4603      	mov	r3, r0
}
 8000264:	4618      	mov	r0, r3
 8000266:	3728      	adds	r7, #40	@ 0x28
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000078 	.word	0x20000078

08000270 <CAN_MessagePending>:
    newMsg = true;
  }
}

bool CAN_MessagePending(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  return newMsg;
 8000274:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <CAN_MessagePending+0x14>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b2db      	uxtb	r3, r3
}
 800027a:	4618      	mov	r0, r3
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	200000c4 	.word	0x200000c4

08000288 <CAN_Receive>:

void CAN_Receive(uint16_t *out_id, uint8_t *buf, uint8_t *out_len)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  newMsg = false;
 8000294:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <CAN_Receive+0x3c>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
  *out_id  = RxHeader.StdId;
 800029a:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <CAN_Receive+0x40>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	b29a      	uxth	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	801a      	strh	r2, [r3, #0]
  *out_len = RxHeader.DLC;
 80002a4:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <CAN_Receive+0x40>)
 80002a6:	691b      	ldr	r3, [r3, #16]
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	701a      	strb	r2, [r3, #0]
  memcpy(buf, rxBuf, RxHeader.DLC);
 80002ae:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <CAN_Receive+0x40>)
 80002b0:	691b      	ldr	r3, [r3, #16]
 80002b2:	461a      	mov	r2, r3
 80002b4:	4905      	ldr	r1, [pc, #20]	@ (80002cc <CAN_Receive+0x44>)
 80002b6:	68b8      	ldr	r0, [r7, #8]
 80002b8:	f003 fbb8 	bl	8003a2c <memcpy>
}
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000c4 	.word	0x200000c4
 80002c8:	200000a0 	.word	0x200000a0
 80002cc:	200000bc 	.word	0x200000bc

080002d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002d4:	f3bf 8f4f 	dsb	sy
}
 80002d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80002da:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <__NVIC_SystemReset+0x24>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80002e2:	4904      	ldr	r1, [pc, #16]	@ (80002f4 <__NVIC_SystemReset+0x24>)
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <__NVIC_SystemReset+0x28>)
 80002e6:	4313      	orrs	r3, r2
 80002e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80002ea:	f3bf 8f4f 	dsb	sy
}
 80002ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <__NVIC_SystemReset+0x20>
 80002f4:	e000ed00 	.word	0xe000ed00
 80002f8:	05fa0004 	.word	0x05fa0004

080002fc <DEBUG_Log>:
#include "stm32f1xx_hal.h"
#include <stdarg.h>
#include <stdio.h>

void DEBUG_Log(const char *fmt, ...)
{
 80002fc:	b40f      	push	{r0, r1, r2, r3}
 80002fe:	b580      	push	{r7, lr}
 8000300:	b0a2      	sub	sp, #136	@ 0x88
 8000302:	af00      	add	r7, sp, #0
    char buf[128];
    va_list args;
    va_start(args, fmt);
 8000304:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000308:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buf, sizeof(buf), fmt, args);
 800030a:	1d38      	adds	r0, r7, #4
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000312:	2180      	movs	r1, #128	@ 0x80
 8000314:	f003 fb38 	bl	8003988 <vsniprintf>
 8000318:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (len > 0) {
 800031c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000320:	2b00      	cmp	r3, #0
 8000322:	dd0a      	ble.n	800033a <DEBUG_Log+0x3e>
        // Шлём по RS-485, пин DE=1/0 управляется внутри UART_Send()
        UART_Send((uint8_t*)buf, (uint16_t)len);
 8000324:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000328:	b29a      	uxth	r2, r3
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4611      	mov	r1, r2
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fd46 	bl	8000dc0 <UART_Send>
        // Даем чуть-чуть времени для передачи, можно убрать при уверенности в DMA
        HAL_Delay(2);
 8000334:	2002      	movs	r0, #2
 8000336:	f000 fdfb 	bl	8000f30 <HAL_Delay>
    }
}
 800033a:	bf00      	nop
 800033c:	3788      	adds	r7, #136	@ 0x88
 800033e:	46bd      	mov	sp, r7
 8000340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000344:	b004      	add	sp, #16
 8000346:	4770      	bx	lr

08000348 <DEBUG_SelfTest>:

void DEBUG_SelfTest(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    uint32_t now = HAL_GetTick();
 800034e:	f000 fde5 	bl	8000f1c <HAL_GetTick>
 8000352:	6078      	str	r0, [r7, #4]
    if (now - last_tick < 1000) return;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <DEBUG_SelfTest+0x4c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000360:	d314      	bcc.n	800038c <DEBUG_SelfTest+0x44>
    last_tick = now;
 8000362:	4a0c      	ldr	r2, [pc, #48]	@ (8000394 <DEBUG_SelfTest+0x4c>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6013      	str	r3, [r2, #0]

    // Простейший «heartbeat»
    DEBUG_Log("DBG: heartbeat %lu\r\n", now);
 8000368:	6879      	ldr	r1, [r7, #4]
 800036a:	480b      	ldr	r0, [pc, #44]	@ (8000398 <DEBUG_SelfTest+0x50>)
 800036c:	f7ff ffc6 	bl	80002fc <DEBUG_Log>
    // если что-то не так — сброситься:
#if 1
    // Пример проверки UART1 error-состояния
    // (HAL_UART_STATE_ERROR не всегда актуально, но можно расширить)
    extern UART_HandleTypeDef huart1;
    if (huart1.gState == HAL_UART_STATE_ERROR) {
 8000370:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <DEBUG_SelfTest+0x54>)
 8000372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2be0      	cmp	r3, #224	@ 0xe0
 800037a:	d108      	bne.n	800038e <DEBUG_SelfTest+0x46>
        DEBUG_Log("DBG: UART1 error -> reset\r\n");
 800037c:	4808      	ldr	r0, [pc, #32]	@ (80003a0 <DEBUG_SelfTest+0x58>)
 800037e:	f7ff ffbd 	bl	80002fc <DEBUG_Log>
        HAL_Delay(5);
 8000382:	2005      	movs	r0, #5
 8000384:	f000 fdd4 	bl	8000f30 <HAL_Delay>
        NVIC_SystemReset();
 8000388:	f7ff ffa2 	bl	80002d0 <__NVIC_SystemReset>
    if (now - last_tick < 1000) return;
 800038c:	bf00      	nop
    }
#endif
}
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	200000c8 	.word	0x200000c8
 8000398:	080042fc 	.word	0x080042fc
 800039c:	200006cc 	.word	0x200006cc
 80003a0:	08004314 	.word	0x08004314

080003a4 <DEBUG_Init>:

/**
 * @brief Инициализация debug-модуля.
 *        UART1 уже проинициализирован в UART_Init(), здесь ничего не делаем.
 */
static inline void DEBUG_Init(void) {}
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f000 fd5a 	bl	8000e6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f826 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f000 f906 	bl	80005cc <MX_GPIO_Init>
  MX_DMA_Init();
 80003c0:	f000 f8de 	bl	8000580 <MX_DMA_Init>
  MX_CAN_Init();
 80003c4:	f000 f866 	bl	8000494 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80003c8:	f000 f898 	bl	80004fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80003cc:	f002 f9f8 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000404 <main+0x54>)
 80003d4:	fba2 2303 	umull	r2, r3, r2, r3
 80003d8:	099b      	lsrs	r3, r3, #6
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f9c9 	bl	8001772 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80003e0:	2004      	movs	r0, #4
 80003e2:	f001 f9d3 	bl	800178c <HAL_SYSTICK_CLKSourceConfig>

  UART_Init();         // UART1 @1 000 000 baud, DMA RX/TX, RS-485 DE control
 80003e6:	f000 fc55 	bl	8000c94 <UART_Init>
  CAN_Init();          // CAN1 500 kHz (зависит от дисплея шины)
 80003ea:	f7ff feaf 	bl	800014c <CAN_Init>
  SENSOR_Init();       // Инициализация «звездного датчика» (RS-485 интерфейс)
 80003ee:	f000 f94b 	bl	8000688 <SENSOR_Init>
  DEBUG_Init();        // Инициализация отладочных модулей
 80003f2:	f7ff ffd7 	bl	80003a4 <DEBUG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    SENSOR_Process();    // трансляция CAN↔RS485, контроль зонда
 80003f6:	f000 f96d 	bl	80006d4 <SENSOR_Process>
	    DEBUG_SelfTest();    // мониторинг ошибок, перезапуск при критике
 80003fa:	f7ff ffa5 	bl	8000348 <DEBUG_SelfTest>
	    SENSOR_Process();    // трансляция CAN↔RS485, контроль зонда
 80003fe:	bf00      	nop
 8000400:	e7f9      	b.n	80003f6 <main+0x46>
 8000402:	bf00      	nop
 8000404:	10624dd3 	.word	0x10624dd3

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b090      	sub	sp, #64	@ 0x40
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	2228      	movs	r2, #40	@ 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f003 fad4 	bl	80039c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042a:	2301      	movs	r3, #1
 800042c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000432:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043c:	2302      	movs	r3, #2
 800043e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000440:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000444:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000446:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800044a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044c:	f107 0318 	add.w	r3, r7, #24
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fdf5 	bl	8002040 <HAL_RCC_OscConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800045c:	f000 f90e 	bl	800067c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000460:	230f      	movs	r3, #15
 8000462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000464:	2302      	movs	r3, #2
 8000466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2102      	movs	r1, #2
 800047a:	4618      	mov	r0, r3
 800047c:	f002 f862 	bl	8002544 <HAL_RCC_ClockConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000486:	f000 f8f9 	bl	800067c <Error_Handler>
  }
}
 800048a:	bf00      	nop
 800048c:	3740      	adds	r7, #64	@ 0x40
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000498:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <MX_CAN_Init+0x60>)
 800049a:	4a17      	ldr	r2, [pc, #92]	@ (80004f8 <MX_CAN_Init+0x64>)
 800049c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004a0:	2210      	movs	r2, #16
 80004a2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004d4:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004dc:	2200      	movs	r2, #0
 80004de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004e2:	f000 fd49 	bl	8000f78 <HAL_CAN_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80004ec:	f000 f8c6 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000cc 	.word	0x200000cc
 80004f8:	40006400 	.word	0x40006400

080004fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000500:	4b1b      	ldr	r3, [pc, #108]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 8000502:	4a1c      	ldr	r2, [pc, #112]	@ (8000574 <MX_USART1_UART_Init+0x78>)
 8000504:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8000506:	4b1a      	ldr	r3, [pc, #104]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 8000508:	4a1b      	ldr	r2, [pc, #108]	@ (8000578 <MX_USART1_UART_Init+0x7c>)
 800050a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800050c:	4b18      	ldr	r3, [pc, #96]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000512:	4b17      	ldr	r3, [pc, #92]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000518:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800051e:	4b14      	ldr	r3, [pc, #80]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 8000520:	220c      	movs	r2, #12
 8000522:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000524:	4b12      	ldr	r3, [pc, #72]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800052a:	4b11      	ldr	r3, [pc, #68]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000530:	480f      	ldr	r0, [pc, #60]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 8000532:	f002 f995 	bl	8002860 <HAL_UART_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800053c:	f000 f89e 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UART_Receive_DMA(&huart1, rx_buf, RX_BUF_SIZE);
 8000540:	2240      	movs	r2, #64	@ 0x40
 8000542:	490e      	ldr	r1, [pc, #56]	@ (800057c <MX_USART1_UART_Init+0x80>)
 8000544:	480a      	ldr	r0, [pc, #40]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 8000546:	f002 fa4b 	bl	80029e0 <HAL_UART_Receive_DMA>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800054a:	4b09      	ldr	r3, [pc, #36]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	68da      	ldr	r2, [r3, #12]
 8000550:	4b07      	ldr	r3, [pc, #28]	@ (8000570 <MX_USART1_UART_Init+0x74>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f042 0210 	orr.w	r2, r2, #16
 8000558:	60da      	str	r2, [r3, #12]

	// ↓↓↓ Разрешаем прерывание USART1_IRQn в NVIC ↓↓↓
	HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800055a:	2200      	movs	r2, #0
 800055c:	2101      	movs	r1, #1
 800055e:	2025      	movs	r0, #37	@ 0x25
 8000560:	f001 f8dd 	bl	800171e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000564:	2025      	movs	r0, #37	@ 0x25
 8000566:	f001 f8f6 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* USER CODE END USART1_Init 2 */

}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	200006cc 	.word	0x200006cc
 8000574:	40013800 	.word	0x40013800
 8000578:	000f4240 	.word	0x000f4240
 800057c:	200000f4 	.word	0x200000f4

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	4b10      	ldr	r3, [pc, #64]	@ (80005c8 <MX_DMA_Init+0x48>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a0f      	ldr	r2, [pc, #60]	@ (80005c8 <MX_DMA_Init+0x48>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <MX_DMA_Init+0x48>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	200e      	movs	r0, #14
 80005a4:	f001 f8bb 	bl	800171e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005a8:	200e      	movs	r0, #14
 80005aa:	f001 f8d4 	bl	8001756 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2100      	movs	r1, #0
 80005b2:	200f      	movs	r0, #15
 80005b4:	f001 f8b3 	bl	800171e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005b8:	200f      	movs	r0, #15
 80005ba:	f001 f8cc 	bl	8001756 <HAL_NVIC_EnableIRQ>

}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0310 	add.w	r3, r7, #16
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e0:	4b24      	ldr	r3, [pc, #144]	@ (8000674 <MX_GPIO_Init+0xa8>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a23      	ldr	r2, [pc, #140]	@ (8000674 <MX_GPIO_Init+0xa8>)
 80005e6:	f043 0310 	orr.w	r3, r3, #16
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b21      	ldr	r3, [pc, #132]	@ (8000674 <MX_GPIO_Init+0xa8>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000674 <MX_GPIO_Init+0xa8>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000674 <MX_GPIO_Init+0xa8>)
 80005fe:	f043 0320 	orr.w	r3, r3, #32
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b1b      	ldr	r3, [pc, #108]	@ (8000674 <MX_GPIO_Init+0xa8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0320 	and.w	r3, r3, #32
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000610:	4b18      	ldr	r3, [pc, #96]	@ (8000674 <MX_GPIO_Init+0xa8>)
 8000612:	699b      	ldr	r3, [r3, #24]
 8000614:	4a17      	ldr	r2, [pc, #92]	@ (8000674 <MX_GPIO_Init+0xa8>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	6193      	str	r3, [r2, #24]
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <MX_GPIO_Init+0xa8>)
 800061e:	699b      	ldr	r3, [r3, #24]
 8000620:	f003 0304 	and.w	r3, r3, #4
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_GPIO_Init+0xa8>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	4a11      	ldr	r2, [pc, #68]	@ (8000674 <MX_GPIO_Init+0xa8>)
 800062e:	f043 0308 	orr.w	r3, r3, #8
 8000632:	6193      	str	r3, [r2, #24]
 8000634:	4b0f      	ldr	r3, [pc, #60]	@ (8000674 <MX_GPIO_Init+0xa8>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000640:	2200      	movs	r2, #0
 8000642:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000646:	480c      	ldr	r0, [pc, #48]	@ (8000678 <MX_GPIO_Init+0xac>)
 8000648:	f001 fce2 	bl	8002010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800064c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000650:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000652:	2301      	movs	r3, #1
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065a:	2302      	movs	r3, #2
 800065c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 0310 	add.w	r3, r7, #16
 8000662:	4619      	mov	r1, r3
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <MX_GPIO_Init+0xac>)
 8000666:	f001 fb4f 	bl	8001d08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800066a:	bf00      	nop
 800066c:	3720      	adds	r7, #32
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000
 8000678:	40011000 	.word	0x40011000

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000680:	b672      	cpsid	i
}
 8000682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <Error_Handler+0x8>

08000688 <SENSOR_Init>:
static uint8_t  text_buf[128];
static size_t   text_len;
static bool     awaiting2;

void SENSOR_Init(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  rx_idx    = BUF_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 800068c:	4b0b      	ldr	r3, [pc, #44]	@ (80006bc <SENSOR_Init+0x34>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <SENSOR_Init+0x38>)
 8000698:	6013      	str	r3, [r2, #0]
  in_frame  = false;
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <SENSOR_Init+0x3c>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
  frame_len = 0;
 80006a0:	4b09      	ldr	r3, [pc, #36]	@ (80006c8 <SENSOR_Init+0x40>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
  text_len  = 0;
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <SENSOR_Init+0x44>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
  awaiting2 = false;
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <SENSOR_Init+0x48>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bc80      	pop	{r7}
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	20000714 	.word	0x20000714
 80006c0:	20000134 	.word	0x20000134
 80006c4:	2000023c 	.word	0x2000023c
 80006c8:	20000238 	.word	0x20000238
 80006cc:	200002c0 	.word	0x200002c0
 80006d0:	200002c4 	.word	0x200002c4

080006d4 <SENSOR_Process>:

void SENSOR_Process(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b088      	sub	sp, #32
 80006d8:	af00      	add	r7, sp, #0
  uint32_t new_idx = BUF_SZ - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80006da:	4b6c      	ldr	r3, [pc, #432]	@ (800088c <SENSOR_Process+0x1b8>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	685b      	ldr	r3, [r3, #4]
 80006e0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80006e4:	61fb      	str	r3, [r7, #28]
  while (rx_idx != new_idx)
 80006e6:	e0b0      	b.n	800084a <SENSOR_Process+0x176>
  {
    uint8_t b = uart_rx_buf[rx_idx++];
 80006e8:	4b69      	ldr	r3, [pc, #420]	@ (8000890 <SENSOR_Process+0x1bc>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	1c5a      	adds	r2, r3, #1
 80006ee:	4968      	ldr	r1, [pc, #416]	@ (8000890 <SENSOR_Process+0x1bc>)
 80006f0:	600a      	str	r2, [r1, #0]
 80006f2:	4a68      	ldr	r2, [pc, #416]	@ (8000894 <SENSOR_Process+0x1c0>)
 80006f4:	5cd3      	ldrb	r3, [r2, r3]
 80006f6:	76fb      	strb	r3, [r7, #27]
    if (rx_idx >= BUF_SZ) rx_idx = 0;
 80006f8:	4b65      	ldr	r3, [pc, #404]	@ (8000890 <SENSOR_Process+0x1bc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000700:	d302      	bcc.n	8000708 <SENSOR_Process+0x34>
 8000702:	4b63      	ldr	r3, [pc, #396]	@ (8000890 <SENSOR_Process+0x1bc>)
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]

    if (!in_frame)
 8000708:	4b63      	ldr	r3, [pc, #396]	@ (8000898 <SENSOR_Process+0x1c4>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	f083 0301 	eor.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d05f      	beq.n	80007d6 <SENSOR_Process+0x102>
    {
      if (b == PREAMBLE)
 8000716:	7efb      	ldrb	r3, [r7, #27]
 8000718:	2baa      	cmp	r3, #170	@ 0xaa
 800071a:	d10c      	bne.n	8000736 <SENSOR_Process+0x62>
      {
        in_frame     = true;
 800071c:	4b5e      	ldr	r3, [pc, #376]	@ (8000898 <SENSOR_Process+0x1c4>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
        frame_len    = 1;
 8000722:	4b5e      	ldr	r3, [pc, #376]	@ (800089c <SENSOR_Process+0x1c8>)
 8000724:	2201      	movs	r2, #1
 8000726:	601a      	str	r2, [r3, #0]
        frame_buf[0] = PREAMBLE;
 8000728:	4b5d      	ldr	r3, [pc, #372]	@ (80008a0 <SENSOR_Process+0x1cc>)
 800072a:	22aa      	movs	r2, #170	@ 0xaa
 800072c:	701a      	strb	r2, [r3, #0]
        text_len     = 0;
 800072e:	4b5d      	ldr	r3, [pc, #372]	@ (80008a4 <SENSOR_Process+0x1d0>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	e089      	b.n	800084a <SENSOR_Process+0x176>
      }
      else
      {
        if (text_len < sizeof(text_buf))
 8000736:	4b5b      	ldr	r3, [pc, #364]	@ (80008a4 <SENSOR_Process+0x1d0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b7f      	cmp	r3, #127	@ 0x7f
 800073c:	d807      	bhi.n	800074e <SENSOR_Process+0x7a>
          text_buf[text_len++] = b;
 800073e:	4b59      	ldr	r3, [pc, #356]	@ (80008a4 <SENSOR_Process+0x1d0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	4957      	ldr	r1, [pc, #348]	@ (80008a4 <SENSOR_Process+0x1d0>)
 8000746:	600a      	str	r2, [r1, #0]
 8000748:	4957      	ldr	r1, [pc, #348]	@ (80008a8 <SENSOR_Process+0x1d4>)
 800074a:	7efa      	ldrb	r2, [r7, #27]
 800074c:	54ca      	strb	r2, [r1, r3]

        // Scenario 1
        if (text_len >= cmd1_len &&
 800074e:	4b55      	ldr	r3, [pc, #340]	@ (80008a4 <SENSOR_Process+0x1d0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	220b      	movs	r2, #11
 8000754:	4293      	cmp	r3, r2
 8000756:	d317      	bcc.n	8000788 <SENSOR_Process+0xb4>
            memcmp(&text_buf[text_len - cmd1_len], cmd1, cmd1_len) == 0)
 8000758:	4b52      	ldr	r3, [pc, #328]	@ (80008a4 <SENSOR_Process+0x1d0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	220b      	movs	r2, #11
 800075e:	1a9b      	subs	r3, r3, r2
 8000760:	4a51      	ldr	r2, [pc, #324]	@ (80008a8 <SENSOR_Process+0x1d4>)
 8000762:	4413      	add	r3, r2
 8000764:	220b      	movs	r2, #11
 8000766:	4951      	ldr	r1, [pc, #324]	@ (80008ac <SENSOR_Process+0x1d8>)
 8000768:	4618      	mov	r0, r3
 800076a:	f003 f91b 	bl	80039a4 <memcmp>
 800076e:	4603      	mov	r3, r0
        if (text_len >= cmd1_len &&
 8000770:	2b00      	cmp	r3, #0
 8000772:	d109      	bne.n	8000788 <SENSOR_Process+0xb4>
        {
          UART_Send((uint8_t*)resp1, resp1_len);
 8000774:	2309      	movs	r3, #9
 8000776:	b29b      	uxth	r3, r3
 8000778:	4619      	mov	r1, r3
 800077a:	484d      	ldr	r0, [pc, #308]	@ (80008b0 <SENSOR_Process+0x1dc>)
 800077c:	f000 fb20 	bl	8000dc0 <UART_Send>
          text_len = 0;
 8000780:	4b48      	ldr	r3, [pc, #288]	@ (80008a4 <SENSOR_Process+0x1d0>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	e060      	b.n	800084a <SENSOR_Process+0x176>
        }
        // Scenario 2
        else if (text_len >= cmd2_len &&
 8000788:	4b46      	ldr	r3, [pc, #280]	@ (80008a4 <SENSOR_Process+0x1d0>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	220b      	movs	r2, #11
 800078e:	4293      	cmp	r3, r2
 8000790:	d35b      	bcc.n	800084a <SENSOR_Process+0x176>
                 memcmp(&text_buf[text_len - cmd2_len], cmd2, cmd2_len) == 0)
 8000792:	4b44      	ldr	r3, [pc, #272]	@ (80008a4 <SENSOR_Process+0x1d0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	220b      	movs	r2, #11
 8000798:	1a9b      	subs	r3, r3, r2
 800079a:	4a43      	ldr	r2, [pc, #268]	@ (80008a8 <SENSOR_Process+0x1d4>)
 800079c:	4413      	add	r3, r2
 800079e:	220b      	movs	r2, #11
 80007a0:	4944      	ldr	r1, [pc, #272]	@ (80008b4 <SENSOR_Process+0x1e0>)
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 f8fe 	bl	80039a4 <memcmp>
 80007a8:	4603      	mov	r3, r0
        else if (text_len >= cmd2_len &&
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d14d      	bne.n	800084a <SENSOR_Process+0x176>
        {
          uint8_t req04[] = { PREAMBLE, 0x01,0x00, 0,0, 0x04,0,0 };
 80007ae:	4a42      	ldr	r2, [pc, #264]	@ (80008b8 <SENSOR_Process+0x1e4>)
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007b8:	e883 0003 	stmia.w	r3, {r0, r1}
          UART_Send(req04, sizeof(req04));
 80007bc:	f107 0310 	add.w	r3, r7, #16
 80007c0:	2108      	movs	r1, #8
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 fafc 	bl	8000dc0 <UART_Send>
          awaiting2 = true;
 80007c8:	4b3c      	ldr	r3, [pc, #240]	@ (80008bc <SENSOR_Process+0x1e8>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	701a      	strb	r2, [r3, #0]
          text_len  = 0;
 80007ce:	4b35      	ldr	r3, [pc, #212]	@ (80008a4 <SENSOR_Process+0x1d0>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	e039      	b.n	800084a <SENSOR_Process+0x176>
        }
      }
    }
    else
    {
      frame_buf[frame_len++] = b;
 80007d6:	4b31      	ldr	r3, [pc, #196]	@ (800089c <SENSOR_Process+0x1c8>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	1c5a      	adds	r2, r3, #1
 80007dc:	492f      	ldr	r1, [pc, #188]	@ (800089c <SENSOR_Process+0x1c8>)
 80007de:	600a      	str	r2, [r1, #0]
 80007e0:	492f      	ldr	r1, [pc, #188]	@ (80008a0 <SENSOR_Process+0x1cc>)
 80007e2:	7efa      	ldrb	r2, [r7, #27]
 80007e4:	54ca      	strb	r2, [r1, r3]
      if (frame_len >= 8)
 80007e6:	4b2d      	ldr	r3, [pc, #180]	@ (800089c <SENSOR_Process+0x1c8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b07      	cmp	r3, #7
 80007ec:	d92d      	bls.n	800084a <SENSOR_Process+0x176>
      {
        uint16_t dlen = frame_buf[6] | (frame_buf[7] << 8);
 80007ee:	4b2c      	ldr	r3, [pc, #176]	@ (80008a0 <SENSOR_Process+0x1cc>)
 80007f0:	799b      	ldrb	r3, [r3, #6]
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <SENSOR_Process+0x1cc>)
 80007f6:	79db      	ldrb	r3, [r3, #7]
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b21b      	sxth	r3, r3
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b21b      	sxth	r3, r3
 8000800:	833b      	strh	r3, [r7, #24]
        if (frame_len >= 8 + dlen + 2)
 8000802:	8b3b      	ldrh	r3, [r7, #24]
 8000804:	330a      	adds	r3, #10
 8000806:	461a      	mov	r2, r3
 8000808:	4b24      	ldr	r3, [pc, #144]	@ (800089c <SENSOR_Process+0x1c8>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	429a      	cmp	r2, r3
 800080e:	d81c      	bhi.n	800084a <SENSOR_Process+0x176>
        {
          if (awaiting2)
 8000810:	4b2a      	ldr	r3, [pc, #168]	@ (80008bc <SENSOR_Process+0x1e8>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d009      	beq.n	800082c <SENSOR_Process+0x158>
          {
            UART_Send((uint8_t*)resp2, resp2_len);
 8000818:	230d      	movs	r3, #13
 800081a:	b29b      	uxth	r3, r3
 800081c:	4619      	mov	r1, r3
 800081e:	4828      	ldr	r0, [pc, #160]	@ (80008c0 <SENSOR_Process+0x1ec>)
 8000820:	f000 face 	bl	8000dc0 <UART_Send>
            awaiting2 = false;
 8000824:	4b25      	ldr	r3, [pc, #148]	@ (80008bc <SENSOR_Process+0x1e8>)
 8000826:	2200      	movs	r2, #0
 8000828:	701a      	strb	r2, [r3, #0]
 800082a:	e00b      	b.n	8000844 <SENSOR_Process+0x170>
          }
          else
          {
            CAN_Send(CAN_TX_ID, frame_buf, frame_len>8?8:frame_len);
 800082c:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <SENSOR_Process+0x1c8>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b08      	cmp	r3, #8
 8000832:	bf28      	it	cs
 8000834:	2308      	movcs	r3, #8
 8000836:	b2db      	uxtb	r3, r3
 8000838:	461a      	mov	r2, r3
 800083a:	4919      	ldr	r1, [pc, #100]	@ (80008a0 <SENSOR_Process+0x1cc>)
 800083c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000840:	f7ff fcec 	bl	800021c <CAN_Send>
          }
          in_frame = false;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <SENSOR_Process+0x1c4>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
  while (rx_idx != new_idx)
 800084a:	4b11      	ldr	r3, [pc, #68]	@ (8000890 <SENSOR_Process+0x1bc>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	69fa      	ldr	r2, [r7, #28]
 8000850:	429a      	cmp	r2, r3
 8000852:	f47f af49 	bne.w	80006e8 <SENSOR_Process+0x14>
      }
    }
  }

  // CAN→UART
  if (CAN_MessagePending())
 8000856:	f7ff fd0b 	bl	8000270 <CAN_MessagePending>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d011      	beq.n	8000884 <SENSOR_Process+0x1b0>
  {
    uint16_t id; uint8_t buf8[8]; uint8_t len8;
    CAN_Receive(&id, buf8, &len8);
 8000860:	1cfa      	adds	r2, r7, #3
 8000862:	1d39      	adds	r1, r7, #4
 8000864:	f107 030e 	add.w	r3, r7, #14
 8000868:	4618      	mov	r0, r3
 800086a:	f7ff fd0d 	bl	8000288 <CAN_Receive>
    if (id == CAN_RX_ID)
 800086e:	89fb      	ldrh	r3, [r7, #14]
 8000870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000874:	d106      	bne.n	8000884 <SENSOR_Process+0x1b0>
      UART_Send(buf8, len8);
 8000876:	78fb      	ldrb	r3, [r7, #3]
 8000878:	461a      	mov	r2, r3
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4611      	mov	r1, r2
 800087e:	4618      	mov	r0, r3
 8000880:	f000 fa9e 	bl	8000dc0 <UART_Send>
  }
}
 8000884:	bf00      	nop
 8000886:	3720      	adds	r7, #32
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	20000714 	.word	0x20000714
 8000890:	20000134 	.word	0x20000134
 8000894:	200002cc 	.word	0x200002cc
 8000898:	2000023c 	.word	0x2000023c
 800089c:	20000238 	.word	0x20000238
 80008a0:	20000138 	.word	0x20000138
 80008a4:	200002c0 	.word	0x200002c0
 80008a8:	20000240 	.word	0x20000240
 80008ac:	08004338 	.word	0x08004338
 80008b0:	08004344 	.word	0x08004344
 80008b4:	08004350 	.word	0x08004350
 80008b8:	08004330 	.word	0x08004330
 80008bc:	200002c4 	.word	0x200002c4
 80008c0:	0800435c 	.word	0x0800435c

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <HAL_MspInit+0x5c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <HAL_MspInit+0x5c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_MspInit+0x5c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <HAL_MspInit+0x5c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_MspInit+0x60>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <HAL_MspInit+0x60>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40021000 	.word	0x40021000
 8000924:	40010000 	.word	0x40010000

08000928 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a25      	ldr	r2, [pc, #148]	@ (80009d8 <HAL_CAN_MspInit+0xb0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d143      	bne.n	80009d0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000948:	4b24      	ldr	r3, [pc, #144]	@ (80009dc <HAL_CAN_MspInit+0xb4>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	4a23      	ldr	r2, [pc, #140]	@ (80009dc <HAL_CAN_MspInit+0xb4>)
 800094e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000952:	61d3      	str	r3, [r2, #28]
 8000954:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <HAL_CAN_MspInit+0xb4>)
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <HAL_CAN_MspInit+0xb4>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a1d      	ldr	r2, [pc, #116]	@ (80009dc <HAL_CAN_MspInit+0xb4>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b1b      	ldr	r3, [pc, #108]	@ (80009dc <HAL_CAN_MspInit+0xb4>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000978:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <HAL_CAN_MspInit+0xb8>)
 800098e:	f001 f9bb 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	480e      	ldr	r0, [pc, #56]	@ (80009e0 <HAL_CAN_MspInit+0xb8>)
 80009a8:	f001 f9ae 	bl	8001d08 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80009ac:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <HAL_CAN_MspInit+0xbc>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009bc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ca:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <HAL_CAN_MspInit+0xbc>)
 80009cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ce:	6053      	str	r3, [r2, #4]

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80009d0:	bf00      	nop
 80009d2:	3728      	adds	r7, #40	@ 0x28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40006400 	.word	0x40006400
 80009dc:	40021000 	.word	0x40021000
 80009e0:	40010c00 	.word	0x40010c00
 80009e4:	40010000 	.word	0x40010000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b088      	sub	sp, #32
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0310 	add.w	r3, r7, #16
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a42      	ldr	r2, [pc, #264]	@ (8000b0c <HAL_UART_MspInit+0x124>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d17d      	bne.n	8000b04 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a08:	4b41      	ldr	r3, [pc, #260]	@ (8000b10 <HAL_UART_MspInit+0x128>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4a40      	ldr	r2, [pc, #256]	@ (8000b10 <HAL_UART_MspInit+0x128>)
 8000a0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a12:	6193      	str	r3, [r2, #24]
 8000a14:	4b3e      	ldr	r3, [pc, #248]	@ (8000b10 <HAL_UART_MspInit+0x128>)
 8000a16:	699b      	ldr	r3, [r3, #24]
 8000a18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a20:	4b3b      	ldr	r3, [pc, #236]	@ (8000b10 <HAL_UART_MspInit+0x128>)
 8000a22:	699b      	ldr	r3, [r3, #24]
 8000a24:	4a3a      	ldr	r2, [pc, #232]	@ (8000b10 <HAL_UART_MspInit+0x128>)
 8000a26:	f043 0304 	orr.w	r3, r3, #4
 8000a2a:	6193      	str	r3, [r2, #24]
 8000a2c:	4b38      	ldr	r3, [pc, #224]	@ (8000b10 <HAL_UART_MspInit+0x128>)
 8000a2e:	699b      	ldr	r3, [r3, #24]
 8000a30:	f003 0304 	and.w	r3, r3, #4
 8000a34:	60bb      	str	r3, [r7, #8]
 8000a36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 0310 	add.w	r3, r7, #16
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4831      	ldr	r0, [pc, #196]	@ (8000b14 <HAL_UART_MspInit+0x12c>)
 8000a4e:	f001 f95b 	bl	8001d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a60:	f107 0310 	add.w	r3, r7, #16
 8000a64:	4619      	mov	r1, r3
 8000a66:	482b      	ldr	r0, [pc, #172]	@ (8000b14 <HAL_UART_MspInit+0x12c>)
 8000a68:	f001 f94e 	bl	8001d08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8000b1c <HAL_UART_MspInit+0x134>)
 8000a70:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a72:	4b29      	ldr	r3, [pc, #164]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a78:	4b27      	ldr	r3, [pc, #156]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7e:	4b26      	ldr	r3, [pc, #152]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000a80:	2280      	movs	r2, #128	@ 0x80
 8000a82:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a84:	4b24      	ldr	r3, [pc, #144]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8a:	4b23      	ldr	r3, [pc, #140]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000a90:	4b21      	ldr	r3, [pc, #132]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000a92:	2220      	movs	r2, #32
 8000a94:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a96:	4b20      	ldr	r3, [pc, #128]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a9c:	481e      	ldr	r0, [pc, #120]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000a9e:	f000 fe91 	bl	80017c4 <HAL_DMA_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000aa8:	f7ff fde8 	bl	800067c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a1a      	ldr	r2, [pc, #104]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ab2:	4a19      	ldr	r2, [pc, #100]	@ (8000b18 <HAL_UART_MspInit+0x130>)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000ab8:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000aba:	4a1a      	ldr	r2, [pc, #104]	@ (8000b24 <HAL_UART_MspInit+0x13c>)
 8000abc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000abe:	4b18      	ldr	r3, [pc, #96]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000ac0:	2210      	movs	r2, #16
 8000ac2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac4:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000acc:	2280      	movs	r2, #128	@ 0x80
 8000ace:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ad6:	4b12      	ldr	r3, [pc, #72]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000adc:	4b10      	ldr	r3, [pc, #64]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ae8:	480d      	ldr	r0, [pc, #52]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000aea:	f000 fe6b 	bl	80017c4 <HAL_DMA_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000af4:	f7ff fdc2 	bl	800067c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a09      	ldr	r2, [pc, #36]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000afc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_UART_MspInit+0x138>)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b04:	bf00      	nop
 8000b06:	3720      	adds	r7, #32
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40013800 	.word	0x40013800
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010800 	.word	0x40010800
 8000b18:	20000714 	.word	0x20000714
 8000b1c:	40020058 	.word	0x40020058
 8000b20:	20000758 	.word	0x20000758
 8000b24:	40020044 	.word	0x40020044

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <NMI_Handler+0x4>

08000b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <MemManage_Handler+0x4>

08000b40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b78:	f000 f9be 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <DMA1_Channel4_IRQHandler+0x10>)
 8000b86:	f000 ff8b 	bl	8001aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	20000758 	.word	0x20000758

08000b94 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b98:	4802      	ldr	r0, [pc, #8]	@ (8000ba4 <DMA1_Channel5_IRQHandler+0x10>)
 8000b9a:	f000 ff81 	bl	8001aa0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000714 	.word	0x20000714

08000ba8 <USART1_IRQHandler>:

/* USER CODE BEGIN 1 */
void USART1_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  // ловим IDLE
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8000bae:	4b18      	ldr	r3, [pc, #96]	@ (8000c10 <USART1_IRQHandler+0x68>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	2b10      	cmp	r3, #16
 8000bba:	d122      	bne.n	8000c02 <USART1_IRQHandler+0x5a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <USART1_IRQHandler+0x68>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	4b11      	ldr	r3, [pc, #68]	@ (8000c10 <USART1_IRQHandler+0x68>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]
    HAL_UART_DMAStop(&huart1);
 8000bd2:	480f      	ldr	r0, [pc, #60]	@ (8000c10 <USART1_IRQHandler+0x68>)
 8000bd4:	f001 ff29 	bl	8002a2a <HAL_UART_DMAStop>
    uint16_t len = RX_BUF_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8000bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <USART1_IRQHandler+0x6c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	b29b      	uxth	r3, r3
 8000be0:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000be4:	80fb      	strh	r3, [r7, #6]
    if (len)
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d005      	beq.n	8000bf8 <USART1_IRQHandler+0x50>
    {
      HAL_UART_Transmit_DMA(&huart1, rx_buf, len);
 8000bec:	88fb      	ldrh	r3, [r7, #6]
 8000bee:	461a      	mov	r2, r3
 8000bf0:	4909      	ldr	r1, [pc, #36]	@ (8000c18 <USART1_IRQHandler+0x70>)
 8000bf2:	4807      	ldr	r0, [pc, #28]	@ (8000c10 <USART1_IRQHandler+0x68>)
 8000bf4:	f001 fe84 	bl	8002900 <HAL_UART_Transmit_DMA>
    }
    HAL_UART_Receive_DMA(&huart1, rx_buf, RX_BUF_SIZE);
 8000bf8:	2240      	movs	r2, #64	@ 0x40
 8000bfa:	4907      	ldr	r1, [pc, #28]	@ (8000c18 <USART1_IRQHandler+0x70>)
 8000bfc:	4804      	ldr	r0, [pc, #16]	@ (8000c10 <USART1_IRQHandler+0x68>)
 8000bfe:	f001 feef 	bl	80029e0 <HAL_UART_Receive_DMA>
  }
  /* USER CODE END USART1_IRQn 0 */

  HAL_UART_IRQHandler(&huart1);
 8000c02:	4803      	ldr	r0, [pc, #12]	@ (8000c10 <USART1_IRQHandler+0x68>)
 8000c04:	f001 ff90 	bl	8002b28 <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
};
 8000c08:	bf00      	nop
 8000c0a:	3708      	adds	r7, #8
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	200006cc 	.word	0x200006cc
 8000c14:	20000714 	.word	0x20000714
 8000c18:	200000f4 	.word	0x200000f4

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	@ (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	@ (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	@ (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f002 fec2 	bl	80039d4 <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	@ (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	@ (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	@ (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20005000 	.word	0x20005000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	200002c8 	.word	0x200002c8
 8000c84:	200008e8 	.word	0x200008e8

08000c88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <UART_Init>:
/**
 * @brief Инициализация UART1 и DMA для RS-485.
 *        DE-контроль на PB6: при передаче DE=1, по окончании — DE=0.
 */
void UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
  // Тактирование USART1 и DMA1
  __HAL_RCC_USART1_CLK_ENABLE();
 8000c9a:	4b40      	ldr	r3, [pc, #256]	@ (8000d9c <UART_Init+0x108>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d9c <UART_Init+0x108>)
 8000ca0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ca4:	6193      	str	r3, [r2, #24]
 8000ca6:	4b3d      	ldr	r3, [pc, #244]	@ (8000d9c <UART_Init+0x108>)
 8000ca8:	699b      	ldr	r3, [r3, #24]
 8000caa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	@ (8000d9c <UART_Init+0x108>)
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	4a39      	ldr	r2, [pc, #228]	@ (8000d9c <UART_Init+0x108>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	6153      	str	r3, [r2, #20]
 8000cbe:	4b37      	ldr	r3, [pc, #220]	@ (8000d9c <UART_Init+0x108>)
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  // Настройка UART1
  huart1.Instance          = USART1;
 8000cca:	4b35      	ldr	r3, [pc, #212]	@ (8000da0 <UART_Init+0x10c>)
 8000ccc:	4a35      	ldr	r2, [pc, #212]	@ (8000da4 <UART_Init+0x110>)
 8000cce:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 1000000;
 8000cd0:	4b33      	ldr	r3, [pc, #204]	@ (8000da0 <UART_Init+0x10c>)
 8000cd2:	4a35      	ldr	r2, [pc, #212]	@ (8000da8 <UART_Init+0x114>)
 8000cd4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8000cd6:	4b32      	ldr	r3, [pc, #200]	@ (8000da0 <UART_Init+0x10c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 8000cdc:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <UART_Init+0x10c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8000da0 <UART_Init+0x10c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8000ce8:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <UART_Init+0x10c>)
 8000cea:	220c      	movs	r2, #12
 8000cec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000cee:	4b2c      	ldr	r3, [pc, #176]	@ (8000da0 <UART_Init+0x10c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8000da0 <UART_Init+0x10c>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 8000cfa:	4829      	ldr	r0, [pc, #164]	@ (8000da0 <UART_Init+0x10c>)
 8000cfc:	f001 fdb0 	bl	8002860 <HAL_UART_Init>

  // Настройка DMA RX (circular)
  hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8000d00:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <UART_Init+0x118>)
 8000d02:	4a2b      	ldr	r2, [pc, #172]	@ (8000db0 <UART_Init+0x11c>)
 8000d04:	601a      	str	r2, [r3, #0]
  hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000d06:	4b29      	ldr	r3, [pc, #164]	@ (8000dac <UART_Init+0x118>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000d0c:	4b27      	ldr	r3, [pc, #156]	@ (8000dac <UART_Init+0x118>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000d12:	4b26      	ldr	r3, [pc, #152]	@ (8000dac <UART_Init+0x118>)
 8000d14:	2280      	movs	r2, #128	@ 0x80
 8000d16:	60da      	str	r2, [r3, #12]
  hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d18:	4b24      	ldr	r3, [pc, #144]	@ (8000dac <UART_Init+0x118>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000d1e:	4b23      	ldr	r3, [pc, #140]	@ (8000dac <UART_Init+0x118>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
 8000d24:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <UART_Init+0x118>)
 8000d26:	2220      	movs	r2, #32
 8000d28:	619a      	str	r2, [r3, #24]
  hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000d2a:	4b20      	ldr	r3, [pc, #128]	@ (8000dac <UART_Init+0x118>)
 8000d2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d30:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_usart1_rx);
 8000d32:	481e      	ldr	r0, [pc, #120]	@ (8000dac <UART_Init+0x118>)
 8000d34:	f000 fd46 	bl	80017c4 <HAL_DMA_Init>
  __HAL_LINKDMA(&huart1, hdmarx, hdma_usart1_rx);
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <UART_Init+0x10c>)
 8000d3a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dac <UART_Init+0x118>)
 8000d3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8000dac <UART_Init+0x118>)
 8000d40:	4a17      	ldr	r2, [pc, #92]	@ (8000da0 <UART_Init+0x10c>)
 8000d42:	625a      	str	r2, [r3, #36]	@ 0x24

  // Настройка DMA TX (normal)
  hdma_usart1_tx.Instance                 = DMA1_Channel4;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <UART_Init+0x120>)
 8000d46:	4a1c      	ldr	r2, [pc, #112]	@ (8000db8 <UART_Init+0x124>)
 8000d48:	601a      	str	r2, [r3, #0]
  hdma_usart1_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000db4 <UART_Init+0x120>)
 8000d4c:	2210      	movs	r2, #16
 8000d4e:	605a      	str	r2, [r3, #4]
  hdma_usart1_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000d50:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <UART_Init+0x120>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  hdma_usart1_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000d56:	4b17      	ldr	r3, [pc, #92]	@ (8000db4 <UART_Init+0x120>)
 8000d58:	2280      	movs	r2, #128	@ 0x80
 8000d5a:	60da      	str	r2, [r3, #12]
  hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d5c:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <UART_Init+0x120>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	611a      	str	r2, [r3, #16]
  hdma_usart1_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <UART_Init+0x120>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	615a      	str	r2, [r3, #20]
  hdma_usart1_tx.Init.Mode                = DMA_NORMAL;
 8000d68:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <UART_Init+0x120>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hdma_usart1_tx.Init.Priority            = DMA_PRIORITY_MEDIUM;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	@ (8000db4 <UART_Init+0x120>)
 8000d70:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d74:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_usart1_tx);
 8000d76:	480f      	ldr	r0, [pc, #60]	@ (8000db4 <UART_Init+0x120>)
 8000d78:	f000 fd24 	bl	80017c4 <HAL_DMA_Init>
  __HAL_LINKDMA(&huart1, hdmatx, hdma_usart1_tx);
 8000d7c:	4b08      	ldr	r3, [pc, #32]	@ (8000da0 <UART_Init+0x10c>)
 8000d7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <UART_Init+0x120>)
 8000d80:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d82:	4b0c      	ldr	r3, [pc, #48]	@ (8000db4 <UART_Init+0x120>)
 8000d84:	4a06      	ldr	r2, [pc, #24]	@ (8000da0 <UART_Init+0x10c>)
 8000d86:	625a      	str	r2, [r3, #36]	@ 0x24

  // Запуск приёма по DMA в circular-режиме
  HAL_UART_Receive_DMA(&huart1, uart_rx_buf, UART_RX_BUFSIZE);
 8000d88:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d8c:	490b      	ldr	r1, [pc, #44]	@ (8000dbc <UART_Init+0x128>)
 8000d8e:	4804      	ldr	r0, [pc, #16]	@ (8000da0 <UART_Init+0x10c>)
 8000d90:	f001 fe26 	bl	80029e0 <HAL_UART_Receive_DMA>
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	200006cc 	.word	0x200006cc
 8000da4:	40013800 	.word	0x40013800
 8000da8:	000f4240 	.word	0x000f4240
 8000dac:	20000714 	.word	0x20000714
 8000db0:	40020058 	.word	0x40020058
 8000db4:	20000758 	.word	0x20000758
 8000db8:	40020044 	.word	0x40020044
 8000dbc:	200002cc 	.word	0x200002cc

08000dc0 <UART_Send>:
 * @brief  Передача данных по UART1/RS-485.
 * @param  buf  Указатель на буфер с данными.
 * @param  len  Длина данных в байтах.
 */
void UART_Send(uint8_t *buf, uint16_t len)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	460b      	mov	r3, r1
 8000dca:	807b      	strh	r3, [r7, #2]
  // DE = 1: включаем драйвер RS-485
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	2140      	movs	r1, #64	@ 0x40
 8000dd0:	4806      	ldr	r0, [pc, #24]	@ (8000dec <UART_Send+0x2c>)
 8000dd2:	f001 f91d 	bl	8002010 <HAL_GPIO_WritePin>

  // Передача по DMA
  HAL_UART_Transmit_DMA(&huart1, buf, len);
 8000dd6:	887b      	ldrh	r3, [r7, #2]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	4804      	ldr	r0, [pc, #16]	@ (8000df0 <UART_Send+0x30>)
 8000dde:	f001 fd8f 	bl	8002900 <HAL_UART_Transmit_DMA>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40010c00 	.word	0x40010c00
 8000df0:	200006cc 	.word	0x200006cc

08000df4 <HAL_UART_TxCpltCallback>:
 * @brief  Колбэк HAL по окончании DMA-транзакции TX.
 *         Вызывается в прерывании, когда блок данных отправлен.
 * @param  huart  Хендл UART, где завершилась передача.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a05      	ldr	r2, [pc, #20]	@ (8000e18 <HAL_UART_TxCpltCallback+0x24>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d104      	bne.n	8000e10 <HAL_UART_TxCpltCallback+0x1c>
    // DE = 0: выключаем драйвер RS-485
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e06:	2200      	movs	r2, #0
 8000e08:	2140      	movs	r1, #64	@ 0x40
 8000e0a:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <HAL_UART_TxCpltCallback+0x28>)
 8000e0c:	f001 f900 	bl	8002010 <HAL_GPIO_WritePin>
  }
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	40013800 	.word	0x40013800
 8000e1c:	40010c00 	.word	0x40010c00

08000e20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e20:	f7ff ff32 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480b      	ldr	r0, [pc, #44]	@ (8000e54 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e26:	490c      	ldr	r1, [pc, #48]	@ (8000e58 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e28:	4a0c      	ldr	r2, [pc, #48]	@ (8000e5c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a09      	ldr	r2, [pc, #36]	@ (8000e60 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e3c:	4c09      	ldr	r4, [pc, #36]	@ (8000e64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e4a:	f002 fdc9 	bl	80039e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff faaf 	bl	80003b0 <main>
  bx lr
 8000e52:	4770      	bx	lr
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e58:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e5c:	080043d4 	.word	0x080043d4
  ldr r2, =_sbss
 8000e60:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e64:	200008e8 	.word	0x200008e8

08000e68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e68:	e7fe      	b.n	8000e68 <ADC1_2_IRQHandler>
	...

08000e6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_Init+0x28>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <HAL_Init+0x28>)
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 fc43 	bl	8001708 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	200f      	movs	r0, #15
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fd1c 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 fc5b 	bl	8001772 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 fc23 	bl	800171e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	@ (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b05      	ldr	r3, [pc, #20]	@ (8000f14 <HAL_IncTick+0x1c>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <HAL_IncTick+0x20>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a03      	ldr	r2, [pc, #12]	@ (8000f18 <HAL_IncTick+0x20>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bc80      	pop	{r7}
 8000f12:	4770      	bx	lr
 8000f14:	20000008 	.word	0x20000008
 8000f18:	2000079c 	.word	0x2000079c

08000f1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b02      	ldr	r3, [pc, #8]	@ (8000f2c <HAL_GetTick+0x10>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	2000079c 	.word	0x2000079c

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff fff0 	bl	8000f1c <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_Delay+0x44>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffe0 	bl	8000f1c <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000008 	.word	0x20000008

08000f78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e0ed      	b.n	8001166 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d102      	bne.n	8000f9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff fcc6 	bl	8000928 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f042 0201 	orr.w	r2, r2, #1
 8000faa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fac:	f7ff ffb6 	bl	8000f1c <HAL_GetTick>
 8000fb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fb2:	e012      	b.n	8000fda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fb4:	f7ff ffb2 	bl	8000f1c <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b0a      	cmp	r3, #10
 8000fc0:	d90b      	bls.n	8000fda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e0c5      	b.n	8001166 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d0e5      	beq.n	8000fb4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f022 0202 	bic.w	r2, r2, #2
 8000ff6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ff8:	f7ff ff90 	bl	8000f1c <HAL_GetTick>
 8000ffc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000ffe:	e012      	b.n	8001026 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001000:	f7ff ff8c 	bl	8000f1c <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b0a      	cmp	r3, #10
 800100c:	d90b      	bls.n	8001026 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001012:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2205      	movs	r2, #5
 800101e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e09f      	b.n	8001166 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d1e5      	bne.n	8001000 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7e1b      	ldrb	r3, [r3, #24]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d108      	bne.n	800104e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	e007      	b.n	800105e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800105c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7e5b      	ldrb	r3, [r3, #25]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d108      	bne.n	8001078 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	e007      	b.n	8001088 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001086:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7e9b      	ldrb	r3, [r3, #26]
 800108c:	2b01      	cmp	r3, #1
 800108e:	d108      	bne.n	80010a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0220 	orr.w	r2, r2, #32
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	e007      	b.n	80010b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f022 0220 	bic.w	r2, r2, #32
 80010b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	7edb      	ldrb	r3, [r3, #27]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d108      	bne.n	80010cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0210 	bic.w	r2, r2, #16
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	e007      	b.n	80010dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f042 0210 	orr.w	r2, r2, #16
 80010da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7f1b      	ldrb	r3, [r3, #28]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d108      	bne.n	80010f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0208 	orr.w	r2, r2, #8
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e007      	b.n	8001106 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0208 	bic.w	r2, r2, #8
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7f5b      	ldrb	r3, [r3, #29]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d108      	bne.n	8001120 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0204 	orr.w	r2, r2, #4
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e007      	b.n	8001130 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0204 	bic.w	r2, r2, #4
 800112e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	431a      	orrs	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	691b      	ldr	r3, [r3, #16]
 800113e:	431a      	orrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	ea42 0103 	orr.w	r1, r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	1e5a      	subs	r2, r3, #1
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	430a      	orrs	r2, r1
 8001154:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800116e:	b480      	push	{r7}
 8001170:	b087      	sub	sp, #28
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001184:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001186:	7cfb      	ldrb	r3, [r7, #19]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d003      	beq.n	8001194 <HAL_CAN_ConfigFilter+0x26>
 800118c:	7cfb      	ldrb	r3, [r7, #19]
 800118e:	2b02      	cmp	r3, #2
 8001190:	f040 80aa 	bne.w	80012e8 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800119a:	f043 0201 	orr.w	r2, r3, #1
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	f003 031f 	and.w	r3, r3, #31
 80011ac:	2201      	movs	r2, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	43db      	mvns	r3, r3
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	69db      	ldr	r3, [r3, #28]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d123      	bne.n	8001216 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	401a      	ands	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3248      	adds	r2, #72	@ 0x48
 80011f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800120a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800120c:	6979      	ldr	r1, [r7, #20]
 800120e:	3348      	adds	r3, #72	@ 0x48
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	440b      	add	r3, r1
 8001214:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	69db      	ldr	r3, [r3, #28]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d122      	bne.n	8001264 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	431a      	orrs	r2, r3
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800123a:	683a      	ldr	r2, [r7, #0]
 800123c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800123e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3248      	adds	r2, #72	@ 0x48
 8001244:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001258:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800125a:	6979      	ldr	r1, [r7, #20]
 800125c:	3348      	adds	r3, #72	@ 0x48
 800125e:	00db      	lsls	r3, r3, #3
 8001260:	440b      	add	r3, r1
 8001262:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d109      	bne.n	8001280 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800127e:	e007      	b.n	8001290 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	431a      	orrs	r2, r3
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d109      	bne.n	80012ac <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80012aa:	e007      	b.n	80012bc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6a1b      	ldr	r3, [r3, #32]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d107      	bne.n	80012d4 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012da:	f023 0201 	bic.w	r2, r3, #1
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80012e4:	2300      	movs	r3, #0
 80012e6:	e006      	b.n	80012f6 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ec:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
  }
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	371c      	adds	r7, #28
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130e:	b2db      	uxtb	r3, r3
 8001310:	2b01      	cmp	r3, #1
 8001312:	d12e      	bne.n	8001372 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2202      	movs	r2, #2
 8001318:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f022 0201 	bic.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800132c:	f7ff fdf6 	bl	8000f1c <HAL_GetTick>
 8001330:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001332:	e012      	b.n	800135a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001334:	f7ff fdf2 	bl	8000f1c <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b0a      	cmp	r3, #10
 8001340:	d90b      	bls.n	800135a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001346:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2205      	movs	r2, #5
 8001352:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e012      	b.n	8001380 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	2b00      	cmp	r3, #0
 8001366:	d1e5      	bne.n	8001334 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800136e:	2300      	movs	r3, #0
 8001370:	e006      	b.n	8001380 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001376:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
  }
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	@ 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800139c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013a6:	7ffb      	ldrb	r3, [r7, #31]
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d003      	beq.n	80013b4 <HAL_CAN_AddTxMessage+0x2c>
 80013ac:	7ffb      	ldrb	r3, [r7, #31]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	f040 80ad 	bne.w	800150e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10a      	bne.n	80013d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d105      	bne.n	80013d4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	f000 8095 	beq.w	80014fe <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	0e1b      	lsrs	r3, r3, #24
 80013d8:	f003 0303 	and.w	r3, r3, #3
 80013dc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013de:	2201      	movs	r2, #1
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	409a      	lsls	r2, r3
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10d      	bne.n	800140c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80013fa:	68f9      	ldr	r1, [r7, #12]
 80013fc:	6809      	ldr	r1, [r1, #0]
 80013fe:	431a      	orrs	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	3318      	adds	r3, #24
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	440b      	add	r3, r1
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e00f      	b.n	800142c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001416:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800141c:	68f9      	ldr	r1, [r7, #12]
 800141e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001420:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	3318      	adds	r3, #24
 8001426:	011b      	lsls	r3, r3, #4
 8001428:	440b      	add	r3, r1
 800142a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6819      	ldr	r1, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	3318      	adds	r3, #24
 8001438:	011b      	lsls	r3, r3, #4
 800143a:	440b      	add	r3, r1
 800143c:	3304      	adds	r3, #4
 800143e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	7d1b      	ldrb	r3, [r3, #20]
 8001444:	2b01      	cmp	r3, #1
 8001446:	d111      	bne.n	800146c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	3318      	adds	r3, #24
 8001450:	011b      	lsls	r3, r3, #4
 8001452:	4413      	add	r3, r2
 8001454:	3304      	adds	r3, #4
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	6811      	ldr	r1, [r2, #0]
 800145c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3318      	adds	r3, #24
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	440b      	add	r3, r1
 8001468:	3304      	adds	r3, #4
 800146a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3307      	adds	r3, #7
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	061a      	lsls	r2, r3, #24
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3306      	adds	r3, #6
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	041b      	lsls	r3, r3, #16
 800147c:	431a      	orrs	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3305      	adds	r3, #5
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	021b      	lsls	r3, r3, #8
 8001486:	4313      	orrs	r3, r2
 8001488:	687a      	ldr	r2, [r7, #4]
 800148a:	3204      	adds	r2, #4
 800148c:	7812      	ldrb	r2, [r2, #0]
 800148e:	4610      	mov	r0, r2
 8001490:	68fa      	ldr	r2, [r7, #12]
 8001492:	6811      	ldr	r1, [r2, #0]
 8001494:	ea43 0200 	orr.w	r2, r3, r0
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	011b      	lsls	r3, r3, #4
 800149c:	440b      	add	r3, r1
 800149e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80014a2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3303      	adds	r3, #3
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	061a      	lsls	r2, r3, #24
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3302      	adds	r3, #2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	041b      	lsls	r3, r3, #16
 80014b4:	431a      	orrs	r2, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3301      	adds	r3, #1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	021b      	lsls	r3, r3, #8
 80014be:	4313      	orrs	r3, r2
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	7812      	ldrb	r2, [r2, #0]
 80014c4:	4610      	mov	r0, r2
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	6811      	ldr	r1, [r2, #0]
 80014ca:	ea43 0200 	orr.w	r2, r3, r0
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	440b      	add	r3, r1
 80014d4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80014d8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	3318      	adds	r3, #24
 80014e2:	011b      	lsls	r3, r3, #4
 80014e4:	4413      	add	r3, r2
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68fa      	ldr	r2, [r7, #12]
 80014ea:	6811      	ldr	r1, [r2, #0]
 80014ec:	f043 0201 	orr.w	r2, r3, #1
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	3318      	adds	r3, #24
 80014f4:	011b      	lsls	r3, r3, #4
 80014f6:	440b      	add	r3, r1
 80014f8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e00e      	b.n	800151c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001502:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e006      	b.n	800151c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001512:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
  }
}
 800151c:	4618      	mov	r0, r3
 800151e:	3724      	adds	r7, #36	@ 0x24
 8001520:	46bd      	mov	sp, r7
 8001522:	bc80      	pop	{r7}
 8001524:	4770      	bx	lr

08001526 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001526:	b480      	push	{r7}
 8001528:	b085      	sub	sp, #20
 800152a:	af00      	add	r7, sp, #0
 800152c:	6078      	str	r0, [r7, #4]
 800152e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001536:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001538:	7bfb      	ldrb	r3, [r7, #15]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d002      	beq.n	8001544 <HAL_CAN_ActivateNotification+0x1e>
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d109      	bne.n	8001558 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6959      	ldr	r1, [r3, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	e006      	b.n	8001566 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
  }
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <__NVIC_SetPriorityGrouping>:
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001580:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800158c:	4013      	ands	r3, r2
 800158e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800159c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a2:	4a04      	ldr	r2, [pc, #16]	@ (80015b4 <__NVIC_SetPriorityGrouping+0x44>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	60d3      	str	r3, [r2, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bc80      	pop	{r7}
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000ed00 	.word	0xe000ed00

080015b8 <__NVIC_GetPriorityGrouping>:
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015bc:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <__NVIC_GetPriorityGrouping+0x18>)
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	f003 0307 	and.w	r3, r3, #7
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <__NVIC_EnableIRQ>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	db0b      	blt.n	80015fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	f003 021f 	and.w	r2, r3, #31
 80015ec:	4906      	ldr	r1, [pc, #24]	@ (8001608 <__NVIC_EnableIRQ+0x34>)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	095b      	lsrs	r3, r3, #5
 80015f4:	2001      	movs	r0, #1
 80015f6:	fa00 f202 	lsl.w	r2, r0, r2
 80015fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100

0800160c <__NVIC_SetPriority>:
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	6039      	str	r1, [r7, #0]
 8001616:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161c:	2b00      	cmp	r3, #0
 800161e:	db0a      	blt.n	8001636 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	b2da      	uxtb	r2, r3
 8001624:	490c      	ldr	r1, [pc, #48]	@ (8001658 <__NVIC_SetPriority+0x4c>)
 8001626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162a:	0112      	lsls	r2, r2, #4
 800162c:	b2d2      	uxtb	r2, r2
 800162e:	440b      	add	r3, r1
 8001630:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001634:	e00a      	b.n	800164c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4908      	ldr	r1, [pc, #32]	@ (800165c <__NVIC_SetPriority+0x50>)
 800163c:	79fb      	ldrb	r3, [r7, #7]
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	3b04      	subs	r3, #4
 8001644:	0112      	lsls	r2, r2, #4
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	440b      	add	r3, r1
 800164a:	761a      	strb	r2, [r3, #24]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <NVIC_EncodePriority>:
{
 8001660:	b480      	push	{r7}
 8001662:	b089      	sub	sp, #36	@ 0x24
 8001664:	af00      	add	r7, sp, #0
 8001666:	60f8      	str	r0, [r7, #12]
 8001668:	60b9      	str	r1, [r7, #8]
 800166a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f1c3 0307 	rsb	r3, r3, #7
 800167a:	2b04      	cmp	r3, #4
 800167c:	bf28      	it	cs
 800167e:	2304      	movcs	r3, #4
 8001680:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3304      	adds	r3, #4
 8001686:	2b06      	cmp	r3, #6
 8001688:	d902      	bls.n	8001690 <NVIC_EncodePriority+0x30>
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	3b03      	subs	r3, #3
 800168e:	e000      	b.n	8001692 <NVIC_EncodePriority+0x32>
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001694:	f04f 32ff 	mov.w	r2, #4294967295
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	fa02 f303 	lsl.w	r3, r2, r3
 800169e:	43da      	mvns	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	401a      	ands	r2, r3
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	fa01 f303 	lsl.w	r3, r1, r3
 80016b2:	43d9      	mvns	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b8:	4313      	orrs	r3, r2
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3724      	adds	r7, #36	@ 0x24
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc80      	pop	{r7}
 80016c2:	4770      	bx	lr

080016c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d4:	d301      	bcc.n	80016da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00f      	b.n	80016fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <SysTick_Config+0x40>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	3b01      	subs	r3, #1
 80016e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e2:	210f      	movs	r1, #15
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f7ff ff90 	bl	800160c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <SysTick_Config+0x40>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016f2:	4b04      	ldr	r3, [pc, #16]	@ (8001704 <SysTick_Config+0x40>)
 80016f4:	2207      	movs	r2, #7
 80016f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	e000e010 	.word	0xe000e010

08001708 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f7ff ff2d 	bl	8001570 <__NVIC_SetPriorityGrouping>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171e:	b580      	push	{r7, lr}
 8001720:	b086      	sub	sp, #24
 8001722:	af00      	add	r7, sp, #0
 8001724:	4603      	mov	r3, r0
 8001726:	60b9      	str	r1, [r7, #8]
 8001728:	607a      	str	r2, [r7, #4]
 800172a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001730:	f7ff ff42 	bl	80015b8 <__NVIC_GetPriorityGrouping>
 8001734:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	6978      	ldr	r0, [r7, #20]
 800173c:	f7ff ff90 	bl	8001660 <NVIC_EncodePriority>
 8001740:	4602      	mov	r2, r0
 8001742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f7ff ff5f 	bl	800160c <__NVIC_SetPriority>
}
 800174e:	bf00      	nop
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
 800175c:	4603      	mov	r3, r0
 800175e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff35 	bl	80015d4 <__NVIC_EnableIRQ>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b082      	sub	sp, #8
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f7ff ffa2 	bl	80016c4 <SysTick_Config>
 8001780:	4603      	mov	r3, r0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
	...

0800178c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b04      	cmp	r3, #4
 8001798:	d106      	bne.n	80017a8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017a0:	f043 0304 	orr.w	r3, r3, #4
 80017a4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80017a6:	e005      	b.n	80017b4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80017a8:	4b05      	ldr	r3, [pc, #20]	@ (80017c0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a04      	ldr	r2, [pc, #16]	@ (80017c0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017ae:	f023 0304 	bic.w	r3, r3, #4
 80017b2:	6013      	str	r3, [r2, #0]
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000e010 	.word	0xe000e010

080017c4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e043      	b.n	8001862 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	4b22      	ldr	r3, [pc, #136]	@ (800186c <HAL_DMA_Init+0xa8>)
 80017e2:	4413      	add	r3, r2
 80017e4:	4a22      	ldr	r2, [pc, #136]	@ (8001870 <HAL_DMA_Init+0xac>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	091b      	lsrs	r3, r3, #4
 80017ec:	009a      	lsls	r2, r3, #2
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a1f      	ldr	r2, [pc, #124]	@ (8001874 <HAL_DMA_Init+0xb0>)
 80017f6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2202      	movs	r2, #2
 80017fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800180e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001812:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800181c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001828:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001834:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800183c:	68fa      	ldr	r2, [r7, #12]
 800183e:	4313      	orrs	r3, r2
 8001840:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2200      	movs	r2, #0
 800184e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bc80      	pop	{r7}
 800186a:	4770      	bx	lr
 800186c:	bffdfff8 	.word	0xbffdfff8
 8001870:	cccccccd 	.word	0xcccccccd
 8001874:	40020000 	.word	0x40020000

08001878 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_DMA_Start_IT+0x20>
 8001894:	2302      	movs	r3, #2
 8001896:	e04b      	b.n	8001930 <HAL_DMA_Start_IT+0xb8>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d13a      	bne.n	8001922 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f9eb 	bl	8001cac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 020e 	orr.w	r2, r2, #14
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e00f      	b.n	8001910 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0204 	bic.w	r2, r2, #4
 80018fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 020a 	orr.w	r2, r2, #10
 800190e:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e005      	b.n	800192e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800192a:	2302      	movs	r3, #2
 800192c:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800192e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d008      	beq.n	8001962 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2204      	movs	r2, #4
 8001954:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e020      	b.n	80019a4 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 020e 	bic.w	r2, r2, #14
 8001970:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f202 	lsl.w	r2, r1, r2
 8001990:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80019a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
	...

080019b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d005      	beq.n	80019d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2204      	movs	r2, #4
 80019cc:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	73fb      	strb	r3, [r7, #15]
 80019d2:	e051      	b.n	8001a78 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 020e 	bic.w	r2, r2, #14
 80019e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a22      	ldr	r2, [pc, #136]	@ (8001a84 <HAL_DMA_Abort_IT+0xd4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d029      	beq.n	8001a52 <HAL_DMA_Abort_IT+0xa2>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a21      	ldr	r2, [pc, #132]	@ (8001a88 <HAL_DMA_Abort_IT+0xd8>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d022      	beq.n	8001a4e <HAL_DMA_Abort_IT+0x9e>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1f      	ldr	r2, [pc, #124]	@ (8001a8c <HAL_DMA_Abort_IT+0xdc>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d01a      	beq.n	8001a48 <HAL_DMA_Abort_IT+0x98>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a1e      	ldr	r2, [pc, #120]	@ (8001a90 <HAL_DMA_Abort_IT+0xe0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d012      	beq.n	8001a42 <HAL_DMA_Abort_IT+0x92>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a1c      	ldr	r2, [pc, #112]	@ (8001a94 <HAL_DMA_Abort_IT+0xe4>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00a      	beq.n	8001a3c <HAL_DMA_Abort_IT+0x8c>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001a98 <HAL_DMA_Abort_IT+0xe8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d102      	bne.n	8001a36 <HAL_DMA_Abort_IT+0x86>
 8001a30:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a34:	e00e      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a3a:	e00b      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a40:	e008      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a46:	e005      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a4c:	e002      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a4e:	2310      	movs	r3, #16
 8001a50:	e000      	b.n	8001a54 <HAL_DMA_Abort_IT+0xa4>
 8001a52:	2301      	movs	r3, #1
 8001a54:	4a11      	ldr	r2, [pc, #68]	@ (8001a9c <HAL_DMA_Abort_IT+0xec>)
 8001a56:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
    } 
  }
  return status;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	40020008 	.word	0x40020008
 8001a88:	4002001c 	.word	0x4002001c
 8001a8c:	40020030 	.word	0x40020030
 8001a90:	40020044 	.word	0x40020044
 8001a94:	40020058 	.word	0x40020058
 8001a98:	4002006c 	.word	0x4002006c
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	2204      	movs	r2, #4
 8001abe:	409a      	lsls	r2, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d04f      	beq.n	8001b68 <HAL_DMA_IRQHandler+0xc8>
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d04a      	beq.n	8001b68 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0320 	and.w	r3, r3, #32
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d107      	bne.n	8001af0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0204 	bic.w	r2, r2, #4
 8001aee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a66      	ldr	r2, [pc, #408]	@ (8001c90 <HAL_DMA_IRQHandler+0x1f0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d029      	beq.n	8001b4e <HAL_DMA_IRQHandler+0xae>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a65      	ldr	r2, [pc, #404]	@ (8001c94 <HAL_DMA_IRQHandler+0x1f4>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d022      	beq.n	8001b4a <HAL_DMA_IRQHandler+0xaa>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a63      	ldr	r2, [pc, #396]	@ (8001c98 <HAL_DMA_IRQHandler+0x1f8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d01a      	beq.n	8001b44 <HAL_DMA_IRQHandler+0xa4>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a62      	ldr	r2, [pc, #392]	@ (8001c9c <HAL_DMA_IRQHandler+0x1fc>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d012      	beq.n	8001b3e <HAL_DMA_IRQHandler+0x9e>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a60      	ldr	r2, [pc, #384]	@ (8001ca0 <HAL_DMA_IRQHandler+0x200>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00a      	beq.n	8001b38 <HAL_DMA_IRQHandler+0x98>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a5f      	ldr	r2, [pc, #380]	@ (8001ca4 <HAL_DMA_IRQHandler+0x204>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d102      	bne.n	8001b32 <HAL_DMA_IRQHandler+0x92>
 8001b2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b30:	e00e      	b.n	8001b50 <HAL_DMA_IRQHandler+0xb0>
 8001b32:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b36:	e00b      	b.n	8001b50 <HAL_DMA_IRQHandler+0xb0>
 8001b38:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001b3c:	e008      	b.n	8001b50 <HAL_DMA_IRQHandler+0xb0>
 8001b3e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b42:	e005      	b.n	8001b50 <HAL_DMA_IRQHandler+0xb0>
 8001b44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b48:	e002      	b.n	8001b50 <HAL_DMA_IRQHandler+0xb0>
 8001b4a:	2340      	movs	r3, #64	@ 0x40
 8001b4c:	e000      	b.n	8001b50 <HAL_DMA_IRQHandler+0xb0>
 8001b4e:	2304      	movs	r3, #4
 8001b50:	4a55      	ldr	r2, [pc, #340]	@ (8001ca8 <HAL_DMA_IRQHandler+0x208>)
 8001b52:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8094 	beq.w	8001c86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001b66:	e08e      	b.n	8001c86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d056      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x186>
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d051      	beq.n	8001c26 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0320 	and.w	r3, r3, #32
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d10b      	bne.n	8001ba8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f022 020a 	bic.w	r2, r2, #10
 8001b9e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a38      	ldr	r2, [pc, #224]	@ (8001c90 <HAL_DMA_IRQHandler+0x1f0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d029      	beq.n	8001c06 <HAL_DMA_IRQHandler+0x166>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a37      	ldr	r2, [pc, #220]	@ (8001c94 <HAL_DMA_IRQHandler+0x1f4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d022      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x162>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a35      	ldr	r2, [pc, #212]	@ (8001c98 <HAL_DMA_IRQHandler+0x1f8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01a      	beq.n	8001bfc <HAL_DMA_IRQHandler+0x15c>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a34      	ldr	r2, [pc, #208]	@ (8001c9c <HAL_DMA_IRQHandler+0x1fc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d012      	beq.n	8001bf6 <HAL_DMA_IRQHandler+0x156>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a32      	ldr	r2, [pc, #200]	@ (8001ca0 <HAL_DMA_IRQHandler+0x200>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00a      	beq.n	8001bf0 <HAL_DMA_IRQHandler+0x150>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a31      	ldr	r2, [pc, #196]	@ (8001ca4 <HAL_DMA_IRQHandler+0x204>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d102      	bne.n	8001bea <HAL_DMA_IRQHandler+0x14a>
 8001be4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001be8:	e00e      	b.n	8001c08 <HAL_DMA_IRQHandler+0x168>
 8001bea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001bee:	e00b      	b.n	8001c08 <HAL_DMA_IRQHandler+0x168>
 8001bf0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001bf4:	e008      	b.n	8001c08 <HAL_DMA_IRQHandler+0x168>
 8001bf6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001bfa:	e005      	b.n	8001c08 <HAL_DMA_IRQHandler+0x168>
 8001bfc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c00:	e002      	b.n	8001c08 <HAL_DMA_IRQHandler+0x168>
 8001c02:	2320      	movs	r3, #32
 8001c04:	e000      	b.n	8001c08 <HAL_DMA_IRQHandler+0x168>
 8001c06:	2302      	movs	r3, #2
 8001c08:	4a27      	ldr	r2, [pc, #156]	@ (8001ca8 <HAL_DMA_IRQHandler+0x208>)
 8001c0a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d034      	beq.n	8001c86 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c24:	e02f      	b.n	8001c86 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2a:	2208      	movs	r2, #8
 8001c2c:	409a      	lsls	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d028      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x1e8>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d023      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681a      	ldr	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f022 020e 	bic.w	r2, r2, #14
 8001c4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c58:	2101      	movs	r1, #1
 8001c5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d004      	beq.n	8001c88 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
    }
  }
  return;
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
}
 8001c8a:	3710      	adds	r7, #16
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	40020008 	.word	0x40020008
 8001c94:	4002001c 	.word	0x4002001c
 8001c98:	40020030 	.word	0x40020030
 8001c9c:	40020044 	.word	0x40020044
 8001ca0:	40020058 	.word	0x40020058
 8001ca4:	4002006c 	.word	0x4002006c
 8001ca8:	40020000 	.word	0x40020000

08001cac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b10      	cmp	r3, #16
 8001cd8:	d108      	bne.n	8001cec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001cea:	e007      	b.n	8001cfc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68ba      	ldr	r2, [r7, #8]
 8001cf2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	60da      	str	r2, [r3, #12]
}
 8001cfc:	bf00      	nop
 8001cfe:	3714      	adds	r7, #20
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bc80      	pop	{r7}
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b08b      	sub	sp, #44	@ 0x2c
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d1a:	e169      	b.n	8001ff0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	69fa      	ldr	r2, [r7, #28]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	f040 8158 	bne.w	8001fea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	4a9a      	ldr	r2, [pc, #616]	@ (8001fa8 <HAL_GPIO_Init+0x2a0>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d05e      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d44:	4a98      	ldr	r2, [pc, #608]	@ (8001fa8 <HAL_GPIO_Init+0x2a0>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d875      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d4a:	4a98      	ldr	r2, [pc, #608]	@ (8001fac <HAL_GPIO_Init+0x2a4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d058      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d50:	4a96      	ldr	r2, [pc, #600]	@ (8001fac <HAL_GPIO_Init+0x2a4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d86f      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d56:	4a96      	ldr	r2, [pc, #600]	@ (8001fb0 <HAL_GPIO_Init+0x2a8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d052      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d5c:	4a94      	ldr	r2, [pc, #592]	@ (8001fb0 <HAL_GPIO_Init+0x2a8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d869      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d62:	4a94      	ldr	r2, [pc, #592]	@ (8001fb4 <HAL_GPIO_Init+0x2ac>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d04c      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d68:	4a92      	ldr	r2, [pc, #584]	@ (8001fb4 <HAL_GPIO_Init+0x2ac>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d863      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a92      	ldr	r2, [pc, #584]	@ (8001fb8 <HAL_GPIO_Init+0x2b0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d046      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
 8001d74:	4a90      	ldr	r2, [pc, #576]	@ (8001fb8 <HAL_GPIO_Init+0x2b0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d85d      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d7a:	2b12      	cmp	r3, #18
 8001d7c:	d82a      	bhi.n	8001dd4 <HAL_GPIO_Init+0xcc>
 8001d7e:	2b12      	cmp	r3, #18
 8001d80:	d859      	bhi.n	8001e36 <HAL_GPIO_Init+0x12e>
 8001d82:	a201      	add	r2, pc, #4	@ (adr r2, 8001d88 <HAL_GPIO_Init+0x80>)
 8001d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d88:	08001e03 	.word	0x08001e03
 8001d8c:	08001ddd 	.word	0x08001ddd
 8001d90:	08001def 	.word	0x08001def
 8001d94:	08001e31 	.word	0x08001e31
 8001d98:	08001e37 	.word	0x08001e37
 8001d9c:	08001e37 	.word	0x08001e37
 8001da0:	08001e37 	.word	0x08001e37
 8001da4:	08001e37 	.word	0x08001e37
 8001da8:	08001e37 	.word	0x08001e37
 8001dac:	08001e37 	.word	0x08001e37
 8001db0:	08001e37 	.word	0x08001e37
 8001db4:	08001e37 	.word	0x08001e37
 8001db8:	08001e37 	.word	0x08001e37
 8001dbc:	08001e37 	.word	0x08001e37
 8001dc0:	08001e37 	.word	0x08001e37
 8001dc4:	08001e37 	.word	0x08001e37
 8001dc8:	08001e37 	.word	0x08001e37
 8001dcc:	08001de5 	.word	0x08001de5
 8001dd0:	08001df9 	.word	0x08001df9
 8001dd4:	4a79      	ldr	r2, [pc, #484]	@ (8001fbc <HAL_GPIO_Init+0x2b4>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dda:	e02c      	b.n	8001e36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e029      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	68db      	ldr	r3, [r3, #12]
 8001de8:	3304      	adds	r3, #4
 8001dea:	623b      	str	r3, [r7, #32]
          break;
 8001dec:	e024      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	3308      	adds	r3, #8
 8001df4:	623b      	str	r3, [r7, #32]
          break;
 8001df6:	e01f      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	330c      	adds	r3, #12
 8001dfe:	623b      	str	r3, [r7, #32]
          break;
 8001e00:	e01a      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	623b      	str	r3, [r7, #32]
          break;
 8001e0e:	e013      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d105      	bne.n	8001e24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e18:	2308      	movs	r3, #8
 8001e1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	611a      	str	r2, [r3, #16]
          break;
 8001e22:	e009      	b.n	8001e38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	615a      	str	r2, [r3, #20]
          break;
 8001e2e:	e003      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e30:	2300      	movs	r3, #0
 8001e32:	623b      	str	r3, [r7, #32]
          break;
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x130>
          break;
 8001e36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2bff      	cmp	r3, #255	@ 0xff
 8001e3c:	d801      	bhi.n	8001e42 <HAL_GPIO_Init+0x13a>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	e001      	b.n	8001e46 <HAL_GPIO_Init+0x13e>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	3304      	adds	r3, #4
 8001e46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	2bff      	cmp	r3, #255	@ 0xff
 8001e4c:	d802      	bhi.n	8001e54 <HAL_GPIO_Init+0x14c>
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	e002      	b.n	8001e5a <HAL_GPIO_Init+0x152>
 8001e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e56:	3b08      	subs	r3, #8
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	210f      	movs	r1, #15
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	6a39      	ldr	r1, [r7, #32]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	431a      	orrs	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 80b1 	beq.w	8001fea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e88:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc0 <HAL_GPIO_Init+0x2b8>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	4a4c      	ldr	r2, [pc, #304]	@ (8001fc0 <HAL_GPIO_Init+0x2b8>)
 8001e8e:	f043 0301 	orr.w	r3, r3, #1
 8001e92:	6193      	str	r3, [r2, #24]
 8001e94:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc0 <HAL_GPIO_Init+0x2b8>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ea0:	4a48      	ldr	r2, [pc, #288]	@ (8001fc4 <HAL_GPIO_Init+0x2bc>)
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	089b      	lsrs	r3, r3, #2
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	68fa      	ldr	r2, [r7, #12]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	4a40      	ldr	r2, [pc, #256]	@ (8001fc8 <HAL_GPIO_Init+0x2c0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d013      	beq.n	8001ef4 <HAL_GPIO_Init+0x1ec>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	4a3f      	ldr	r2, [pc, #252]	@ (8001fcc <HAL_GPIO_Init+0x2c4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_GPIO_Init+0x1e8>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	4a3e      	ldr	r2, [pc, #248]	@ (8001fd0 <HAL_GPIO_Init+0x2c8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d007      	beq.n	8001eec <HAL_GPIO_Init+0x1e4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a3d      	ldr	r2, [pc, #244]	@ (8001fd4 <HAL_GPIO_Init+0x2cc>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_GPIO_Init+0x1e0>
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e006      	b.n	8001ef6 <HAL_GPIO_Init+0x1ee>
 8001ee8:	2304      	movs	r3, #4
 8001eea:	e004      	b.n	8001ef6 <HAL_GPIO_Init+0x1ee>
 8001eec:	2302      	movs	r3, #2
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x1ee>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_GPIO_Init+0x1ee>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f06:	492f      	ldr	r1, [pc, #188]	@ (8001fc4 <HAL_GPIO_Init+0x2bc>)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f20:	4b2d      	ldr	r3, [pc, #180]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	492c      	ldr	r1, [pc, #176]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4928      	ldr	r1, [pc, #160]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f48:	4b23      	ldr	r3, [pc, #140]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	4922      	ldr	r1, [pc, #136]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f56:	4b20      	ldr	r3, [pc, #128]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	491e      	ldr	r1, [pc, #120]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f70:	4b19      	ldr	r3, [pc, #100]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4918      	ldr	r1, [pc, #96]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7e:	4b16      	ldr	r3, [pc, #88]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4914      	ldr	r1, [pc, #80]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d021      	beq.n	8001fdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f98:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	490e      	ldr	r1, [pc, #56]	@ (8001fd8 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e021      	b.n	8001fea <HAL_GPIO_Init+0x2e2>
 8001fa6:	bf00      	nop
 8001fa8:	10320000 	.word	0x10320000
 8001fac:	10310000 	.word	0x10310000
 8001fb0:	10220000 	.word	0x10220000
 8001fb4:	10210000 	.word	0x10210000
 8001fb8:	10120000 	.word	0x10120000
 8001fbc:	10110000 	.word	0x10110000
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40010000 	.word	0x40010000
 8001fc8:	40010800 	.word	0x40010800
 8001fcc:	40010c00 	.word	0x40010c00
 8001fd0:	40011000 	.word	0x40011000
 8001fd4:	40011400 	.word	0x40011400
 8001fd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	4909      	ldr	r1, [pc, #36]	@ (800200c <HAL_GPIO_Init+0x304>)
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fec:	3301      	adds	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f47f ae8e 	bne.w	8001d1c <HAL_GPIO_Init+0x14>
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	372c      	adds	r7, #44	@ 0x2c
 8002006:	46bd      	mov	sp, r7
 8002008:	bc80      	pop	{r7}
 800200a:	4770      	bx	lr
 800200c:	40010400 	.word	0x40010400

08002010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	807b      	strh	r3, [r7, #2]
 800201c:	4613      	mov	r3, r2
 800201e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002020:	787b      	ldrb	r3, [r7, #1]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d003      	beq.n	800202e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002026:	887a      	ldrh	r2, [r7, #2]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800202c:	e003      	b.n	8002036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800202e:	887b      	ldrh	r3, [r7, #2]
 8002030:	041a      	lsls	r2, r3, #16
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	611a      	str	r2, [r3, #16]
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e272      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	f000 8087 	beq.w	800216e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002060:	4b92      	ldr	r3, [pc, #584]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f003 030c 	and.w	r3, r3, #12
 8002068:	2b04      	cmp	r3, #4
 800206a:	d00c      	beq.n	8002086 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800206c:	4b8f      	ldr	r3, [pc, #572]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b08      	cmp	r3, #8
 8002076:	d112      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
 8002078:	4b8c      	ldr	r3, [pc, #560]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002080:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002084:	d10b      	bne.n	800209e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	4b89      	ldr	r3, [pc, #548]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d06c      	beq.n	800216c <HAL_RCC_OscConfig+0x12c>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d168      	bne.n	800216c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e24c      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020a6:	d106      	bne.n	80020b6 <HAL_RCC_OscConfig+0x76>
 80020a8:	4b80      	ldr	r3, [pc, #512]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a7f      	ldr	r2, [pc, #508]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	e02e      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x98>
 80020be:	4b7b      	ldr	r3, [pc, #492]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a7a      	ldr	r2, [pc, #488]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b78      	ldr	r3, [pc, #480]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a77      	ldr	r2, [pc, #476]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e01d      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020e0:	d10c      	bne.n	80020fc <HAL_RCC_OscConfig+0xbc>
 80020e2:	4b72      	ldr	r3, [pc, #456]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a71      	ldr	r2, [pc, #452]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ec:	6013      	str	r3, [r2, #0]
 80020ee:	4b6f      	ldr	r3, [pc, #444]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a6e      	ldr	r2, [pc, #440]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020f8:	6013      	str	r3, [r2, #0]
 80020fa:	e00b      	b.n	8002114 <HAL_RCC_OscConfig+0xd4>
 80020fc:	4b6b      	ldr	r3, [pc, #428]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a6a      	ldr	r2, [pc, #424]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	4b68      	ldr	r3, [pc, #416]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a67      	ldr	r2, [pc, #412]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800210e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002112:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d013      	beq.n	8002144 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211c:	f7fe fefe 	bl	8000f1c <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002124:	f7fe fefa 	bl	8000f1c <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	@ 0x64
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e200      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002136:	4b5d      	ldr	r3, [pc, #372]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0xe4>
 8002142:	e014      	b.n	800216e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002144:	f7fe feea 	bl	8000f1c <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800214c:	f7fe fee6 	bl	8000f1c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	@ 0x64
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e1ec      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800215e:	4b53      	ldr	r3, [pc, #332]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x10c>
 800216a:	e000      	b.n	800216e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800216c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0302 	and.w	r3, r3, #2
 8002176:	2b00      	cmp	r3, #0
 8002178:	d063      	beq.n	8002242 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217a:	4b4c      	ldr	r3, [pc, #304]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 030c 	and.w	r3, r3, #12
 8002182:	2b00      	cmp	r3, #0
 8002184:	d00b      	beq.n	800219e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002186:	4b49      	ldr	r3, [pc, #292]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	2b08      	cmp	r3, #8
 8002190:	d11c      	bne.n	80021cc <HAL_RCC_OscConfig+0x18c>
 8002192:	4b46      	ldr	r3, [pc, #280]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d116      	bne.n	80021cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800219e:	4b43      	ldr	r3, [pc, #268]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d005      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d001      	beq.n	80021b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e1c0      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021b6:	4b3d      	ldr	r3, [pc, #244]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	695b      	ldr	r3, [r3, #20]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	4939      	ldr	r1, [pc, #228]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ca:	e03a      	b.n	8002242 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d020      	beq.n	8002216 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d4:	4b36      	ldr	r3, [pc, #216]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021da:	f7fe fe9f 	bl	8000f1c <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e2:	f7fe fe9b 	bl	8000f1c <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e1a1      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f4:	4b2d      	ldr	r3, [pc, #180]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d0f0      	beq.n	80021e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b2a      	ldr	r3, [pc, #168]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4927      	ldr	r1, [pc, #156]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002210:	4313      	orrs	r3, r2
 8002212:	600b      	str	r3, [r1, #0]
 8002214:	e015      	b.n	8002242 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b26      	ldr	r3, [pc, #152]	@ (80022b0 <HAL_RCC_OscConfig+0x270>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221c:	f7fe fe7e 	bl	8000f1c <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002224:	f7fe fe7a 	bl	8000f1c <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e180      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002236:	4b1d      	ldr	r3, [pc, #116]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d03a      	beq.n	80022c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d019      	beq.n	800228a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002256:	4b17      	ldr	r3, [pc, #92]	@ (80022b4 <HAL_RCC_OscConfig+0x274>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800225c:	f7fe fe5e 	bl	8000f1c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002264:	f7fe fe5a 	bl	8000f1c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e160      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002276:	4b0d      	ldr	r3, [pc, #52]	@ (80022ac <HAL_RCC_OscConfig+0x26c>)
 8002278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002282:	2001      	movs	r0, #1
 8002284:	f000 face 	bl	8002824 <RCC_Delay>
 8002288:	e01c      	b.n	80022c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228a:	4b0a      	ldr	r3, [pc, #40]	@ (80022b4 <HAL_RCC_OscConfig+0x274>)
 800228c:	2200      	movs	r2, #0
 800228e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002290:	f7fe fe44 	bl	8000f1c <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002296:	e00f      	b.n	80022b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002298:	f7fe fe40 	bl	8000f1c <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d908      	bls.n	80022b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e146      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	42420000 	.word	0x42420000
 80022b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b8:	4b92      	ldr	r3, [pc, #584]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e9      	bne.n	8002298 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0304 	and.w	r3, r3, #4
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80a6 	beq.w	800241e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022d8:	69db      	ldr	r3, [r3, #28]
 80022da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10d      	bne.n	80022fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e2:	4b88      	ldr	r3, [pc, #544]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	4a87      	ldr	r2, [pc, #540]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022ec:	61d3      	str	r3, [r2, #28]
 80022ee:	4b85      	ldr	r3, [pc, #532]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022f6:	60bb      	str	r3, [r7, #8]
 80022f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fa:	2301      	movs	r3, #1
 80022fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022fe:	4b82      	ldr	r3, [pc, #520]	@ (8002508 <HAL_RCC_OscConfig+0x4c8>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002306:	2b00      	cmp	r3, #0
 8002308:	d118      	bne.n	800233c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230a:	4b7f      	ldr	r3, [pc, #508]	@ (8002508 <HAL_RCC_OscConfig+0x4c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a7e      	ldr	r2, [pc, #504]	@ (8002508 <HAL_RCC_OscConfig+0x4c8>)
 8002310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002316:	f7fe fe01 	bl	8000f1c <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800231e:	f7fe fdfd 	bl	8000f1c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b64      	cmp	r3, #100	@ 0x64
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e103      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002330:	4b75      	ldr	r3, [pc, #468]	@ (8002508 <HAL_RCC_OscConfig+0x4c8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002338:	2b00      	cmp	r3, #0
 800233a:	d0f0      	beq.n	800231e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	2b01      	cmp	r3, #1
 8002342:	d106      	bne.n	8002352 <HAL_RCC_OscConfig+0x312>
 8002344:	4b6f      	ldr	r3, [pc, #444]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	4a6e      	ldr	r2, [pc, #440]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6213      	str	r3, [r2, #32]
 8002350:	e02d      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d10c      	bne.n	8002374 <HAL_RCC_OscConfig+0x334>
 800235a:	4b6a      	ldr	r3, [pc, #424]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	6a1b      	ldr	r3, [r3, #32]
 800235e:	4a69      	ldr	r2, [pc, #420]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	f023 0301 	bic.w	r3, r3, #1
 8002364:	6213      	str	r3, [r2, #32]
 8002366:	4b67      	ldr	r3, [pc, #412]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	4a66      	ldr	r2, [pc, #408]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	f023 0304 	bic.w	r3, r3, #4
 8002370:	6213      	str	r3, [r2, #32]
 8002372:	e01c      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b05      	cmp	r3, #5
 800237a:	d10c      	bne.n	8002396 <HAL_RCC_OscConfig+0x356>
 800237c:	4b61      	ldr	r3, [pc, #388]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	4a60      	ldr	r2, [pc, #384]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	f043 0304 	orr.w	r3, r3, #4
 8002386:	6213      	str	r3, [r2, #32]
 8002388:	4b5e      	ldr	r3, [pc, #376]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4a5d      	ldr	r2, [pc, #372]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	f043 0301 	orr.w	r3, r3, #1
 8002392:	6213      	str	r3, [r2, #32]
 8002394:	e00b      	b.n	80023ae <HAL_RCC_OscConfig+0x36e>
 8002396:	4b5b      	ldr	r3, [pc, #364]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a5a      	ldr	r2, [pc, #360]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4b58      	ldr	r3, [pc, #352]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a57      	ldr	r2, [pc, #348]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d015      	beq.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023b6:	f7fe fdb1 	bl	8000f1c <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023bc:	e00a      	b.n	80023d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023be:	f7fe fdad 	bl	8000f1c <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e0b1      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ee      	beq.n	80023be <HAL_RCC_OscConfig+0x37e>
 80023e0:	e014      	b.n	800240c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7fe fd9b 	bl	8000f1c <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ea:	f7fe fd97 	bl	8000f1c <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e09b      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002400:	4b40      	ldr	r3, [pc, #256]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800240c:	7dfb      	ldrb	r3, [r7, #23]
 800240e:	2b01      	cmp	r3, #1
 8002410:	d105      	bne.n	800241e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002412:	4b3c      	ldr	r3, [pc, #240]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a3b      	ldr	r2, [pc, #236]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 8087 	beq.w	8002536 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002428:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d061      	beq.n	80024f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b02      	cmp	r3, #2
 800243a:	d146      	bne.n	80024ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800243c:	4b33      	ldr	r3, [pc, #204]	@ (800250c <HAL_RCC_OscConfig+0x4cc>)
 800243e:	2200      	movs	r2, #0
 8002440:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002442:	f7fe fd6b 	bl	8000f1c <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244a:	f7fe fd67 	bl	8000f1c <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e06d      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245c:	4b29      	ldr	r3, [pc, #164]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d1f0      	bne.n	800244a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002470:	d108      	bne.n	8002484 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002472:	4b24      	ldr	r3, [pc, #144]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	4921      	ldr	r1, [pc, #132]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002480:	4313      	orrs	r3, r2
 8002482:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002484:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6a19      	ldr	r1, [r3, #32]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	430b      	orrs	r3, r1
 8002496:	491b      	ldr	r1, [pc, #108]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	4313      	orrs	r3, r2
 800249a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800249c:	4b1b      	ldr	r3, [pc, #108]	@ (800250c <HAL_RCC_OscConfig+0x4cc>)
 800249e:	2201      	movs	r2, #1
 80024a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a2:	f7fe fd3b 	bl	8000f1c <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024a8:	e008      	b.n	80024bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe fd37 	bl	8000f1c <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d901      	bls.n	80024bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e03d      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d0f0      	beq.n	80024aa <HAL_RCC_OscConfig+0x46a>
 80024c8:	e035      	b.n	8002536 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <HAL_RCC_OscConfig+0x4cc>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d0:	f7fe fd24 	bl	8000f1c <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d8:	f7fe fd20 	bl	8000f1c <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e026      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ea:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <HAL_RCC_OscConfig+0x4c4>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1f0      	bne.n	80024d8 <HAL_RCC_OscConfig+0x498>
 80024f6:	e01e      	b.n	8002536 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69db      	ldr	r3, [r3, #28]
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d107      	bne.n	8002510 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e019      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
 8002504:	40021000 	.word	0x40021000
 8002508:	40007000 	.word	0x40007000
 800250c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <HAL_RCC_OscConfig+0x500>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a1b      	ldr	r3, [r3, #32]
 8002520:	429a      	cmp	r2, r3
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800252e:	429a      	cmp	r2, r3
 8002530:	d001      	beq.n	8002536 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e000      	b.n	8002538 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	40021000 	.word	0x40021000

08002544 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d101      	bne.n	8002558 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0d0      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002558:	4b6a      	ldr	r3, [pc, #424]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	683a      	ldr	r2, [r7, #0]
 8002562:	429a      	cmp	r2, r3
 8002564:	d910      	bls.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002566:	4b67      	ldr	r3, [pc, #412]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f023 0207 	bic.w	r2, r3, #7
 800256e:	4965      	ldr	r1, [pc, #404]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4313      	orrs	r3, r2
 8002574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002576:	4b63      	ldr	r3, [pc, #396]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	429a      	cmp	r2, r3
 8002582:	d001      	beq.n	8002588 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e0b8      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d020      	beq.n	80025d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a0:	4b59      	ldr	r3, [pc, #356]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	4a58      	ldr	r2, [pc, #352]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0308 	and.w	r3, r3, #8
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d005      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025b8:	4b53      	ldr	r3, [pc, #332]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	4a52      	ldr	r2, [pc, #328]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c4:	4b50      	ldr	r3, [pc, #320]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	494d      	ldr	r1, [pc, #308]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d040      	beq.n	8002664 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d107      	bne.n	80025fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ea:	4b47      	ldr	r3, [pc, #284]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d115      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e07f      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d107      	bne.n	8002612 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002602:	4b41      	ldr	r3, [pc, #260]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d109      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e073      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e06b      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002622:	4b39      	ldr	r3, [pc, #228]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f023 0203 	bic.w	r2, r3, #3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	4936      	ldr	r1, [pc, #216]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	4313      	orrs	r3, r2
 8002632:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002634:	f7fe fc72 	bl	8000f1c <HAL_GetTick>
 8002638:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263a:	e00a      	b.n	8002652 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800263c:	f7fe fc6e 	bl	8000f1c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	f241 3288 	movw	r2, #5000	@ 0x1388
 800264a:	4293      	cmp	r3, r2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e053      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002652:	4b2d      	ldr	r3, [pc, #180]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f003 020c 	and.w	r2, r3, #12
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	429a      	cmp	r2, r3
 8002662:	d1eb      	bne.n	800263c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002664:	4b27      	ldr	r3, [pc, #156]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d210      	bcs.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b24      	ldr	r3, [pc, #144]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f023 0207 	bic.w	r2, r3, #7
 800267a:	4922      	ldr	r1, [pc, #136]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	4313      	orrs	r3, r2
 8002680:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002682:	4b20      	ldr	r3, [pc, #128]	@ (8002704 <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	683a      	ldr	r2, [r7, #0]
 800268c:	429a      	cmp	r2, r3
 800268e:	d001      	beq.n	8002694 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e032      	b.n	80026fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	2b00      	cmp	r3, #0
 800269e:	d008      	beq.n	80026b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a0:	4b19      	ldr	r3, [pc, #100]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	4916      	ldr	r1, [pc, #88]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d009      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026be:	4b12      	ldr	r3, [pc, #72]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	490e      	ldr	r1, [pc, #56]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d2:	f000 f821 	bl	8002718 <HAL_RCC_GetSysClockFreq>
 80026d6:	4602      	mov	r2, r0
 80026d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002708 <HAL_RCC_ClockConfig+0x1c4>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	091b      	lsrs	r3, r3, #4
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	490a      	ldr	r1, [pc, #40]	@ (800270c <HAL_RCC_ClockConfig+0x1c8>)
 80026e4:	5ccb      	ldrb	r3, [r1, r3]
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	4a09      	ldr	r2, [pc, #36]	@ (8002710 <HAL_RCC_ClockConfig+0x1cc>)
 80026ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ee:	4b09      	ldr	r3, [pc, #36]	@ (8002714 <HAL_RCC_ClockConfig+0x1d0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fbd0 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40022000 	.word	0x40022000
 8002708:	40021000 	.word	0x40021000
 800270c:	0800436c 	.word	0x0800436c
 8002710:	20000000 	.word	0x20000000
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
 8002726:	2300      	movs	r3, #0
 8002728:	617b      	str	r3, [r7, #20]
 800272a:	2300      	movs	r3, #0
 800272c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002732:	4b1e      	ldr	r3, [pc, #120]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b04      	cmp	r3, #4
 8002740:	d002      	beq.n	8002748 <HAL_RCC_GetSysClockFreq+0x30>
 8002742:	2b08      	cmp	r3, #8
 8002744:	d003      	beq.n	800274e <HAL_RCC_GetSysClockFreq+0x36>
 8002746:	e027      	b.n	8002798 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002748:	4b19      	ldr	r3, [pc, #100]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800274a:	613b      	str	r3, [r7, #16]
      break;
 800274c:	e027      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	0c9b      	lsrs	r3, r3, #18
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	4a17      	ldr	r2, [pc, #92]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002758:	5cd3      	ldrb	r3, [r2, r3]
 800275a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d010      	beq.n	8002788 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	0c5b      	lsrs	r3, r3, #17
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	4a11      	ldr	r2, [pc, #68]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002772:	5cd3      	ldrb	r3, [r2, r3]
 8002774:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	4a0d      	ldr	r2, [pc, #52]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800277a:	fb03 f202 	mul.w	r2, r3, r2
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	fbb2 f3f3 	udiv	r3, r2, r3
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	e004      	b.n	8002792 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0c      	ldr	r2, [pc, #48]	@ (80027bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800278c:	fb02 f303 	mul.w	r3, r2, r3
 8002790:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	613b      	str	r3, [r7, #16]
      break;
 8002796:	e002      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800279a:	613b      	str	r3, [r7, #16]
      break;
 800279c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279e:	693b      	ldr	r3, [r7, #16]
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	371c      	adds	r7, #28
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bc80      	pop	{r7}
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40021000 	.word	0x40021000
 80027b0:	007a1200 	.word	0x007a1200
 80027b4:	08004384 	.word	0x08004384
 80027b8:	08004394 	.word	0x08004394
 80027bc:	003d0900 	.word	0x003d0900

080027c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c4:	4b02      	ldr	r3, [pc, #8]	@ (80027d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	20000000 	.word	0x20000000

080027d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027d8:	f7ff fff2 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 80027dc:	4602      	mov	r2, r0
 80027de:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	0a1b      	lsrs	r3, r3, #8
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	4903      	ldr	r1, [pc, #12]	@ (80027f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ea:	5ccb      	ldrb	r3, [r1, r3]
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	0800437c 	.word	0x0800437c

080027fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002800:	f7ff ffde 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8002804:	4602      	mov	r2, r0
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	0adb      	lsrs	r3, r3, #11
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	4903      	ldr	r1, [pc, #12]	@ (8002820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002812:	5ccb      	ldrb	r3, [r1, r3]
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	0800437c 	.word	0x0800437c

08002824 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800282c:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <RCC_Delay+0x34>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0a      	ldr	r2, [pc, #40]	@ (800285c <RCC_Delay+0x38>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	0a5b      	lsrs	r3, r3, #9
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	fb02 f303 	mul.w	r3, r2, r3
 800283e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002840:	bf00      	nop
  }
  while (Delay --);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1e5a      	subs	r2, r3, #1
 8002846:	60fa      	str	r2, [r7, #12]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1f9      	bne.n	8002840 <RCC_Delay+0x1c>
}
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr
 8002858:	20000000 	.word	0x20000000
 800285c:	10624dd3 	.word	0x10624dd3

08002860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e042      	b.n	80028f8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b00      	cmp	r3, #0
 800287c:	d106      	bne.n	800288c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f7fe f8ae 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2224      	movs	r2, #36	@ 0x24
 8002890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68da      	ldr	r2, [r3, #12]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80028a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 ffb5 	bl	8003814 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691a      	ldr	r2, [r3, #16]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80028b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	695a      	ldr	r2, [r3, #20]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80028c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	68da      	ldr	r2, [r3, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80028d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	@ 0x30
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002914:	b2db      	uxtb	r3, r3
 8002916:	2b20      	cmp	r3, #32
 8002918:	d156      	bne.n	80029c8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_UART_Transmit_DMA+0x26>
 8002920:	88fb      	ldrh	r3, [r7, #6]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e04f      	b.n	80029ca <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2200      	movs	r2, #0
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2221      	movs	r2, #33	@ 0x21
 8002946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294e:	4a21      	ldr	r2, [pc, #132]	@ (80029d4 <HAL_UART_Transmit_DMA+0xd4>)
 8002950:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002956:	4a20      	ldr	r2, [pc, #128]	@ (80029d8 <HAL_UART_Transmit_DMA+0xd8>)
 8002958:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295e:	4a1f      	ldr	r2, [pc, #124]	@ (80029dc <HAL_UART_Transmit_DMA+0xdc>)
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002966:	2200      	movs	r2, #0
 8002968:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 800296a:	f107 0308 	add.w	r3, r7, #8
 800296e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3304      	adds	r3, #4
 800297e:	461a      	mov	r2, r3
 8002980:	88fb      	ldrh	r3, [r7, #6]
 8002982:	f7fe ff79 	bl	8001878 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800298e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3314      	adds	r3, #20
 8002996:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	e853 3f00 	ldrex	r3, [r3]
 800299e:	617b      	str	r3, [r7, #20]
   return(result);
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3314      	adds	r3, #20
 80029ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80029b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80029b2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b4:	6a39      	ldr	r1, [r7, #32]
 80029b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b8:	e841 2300 	strex	r3, r2, [r1]
 80029bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d1e5      	bne.n	8002990 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	e000      	b.n	80029ca <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80029c8:	2302      	movs	r3, #2
  }
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3730      	adds	r7, #48	@ 0x30
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	080030ab 	.word	0x080030ab
 80029d8:	08003145 	.word	0x08003145
 80029dc:	080032c9 	.word	0x080032c9

080029e0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	d112      	bne.n	8002a20 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d002      	beq.n	8002a06 <HAL_UART_Receive_DMA+0x26>
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e00b      	b.n	8002a22 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	461a      	mov	r2, r3
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f000 fca0 	bl	800335c <UART_Start_Receive_DMA>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	e000      	b.n	8002a22 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a20:	2302      	movs	r3, #2
  }
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b090      	sub	sp, #64	@ 0x40
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf14      	ite	ne
 8002a44:	2301      	movne	r3, #1
 8002a46:	2300      	moveq	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b21      	cmp	r3, #33	@ 0x21
 8002a56:	d128      	bne.n	8002aaa <HAL_UART_DMAStop+0x80>
 8002a58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d025      	beq.n	8002aaa <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3314      	adds	r3, #20
 8002a64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a68:	e853 3f00 	ldrex	r3, [r3]
 8002a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3314      	adds	r3, #20
 8002a7c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a7e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e5      	bne.n	8002a5e <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d004      	beq.n	8002aa4 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7fe ff4a 	bl	8001938 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 fcf3 	bl	8003490 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf14      	ite	ne
 8002ab8:	2301      	movne	r3, #1
 8002aba:	2300      	moveq	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b22      	cmp	r3, #34	@ 0x22
 8002aca:	d128      	bne.n	8002b1e <HAL_UART_DMAStop+0xf4>
 8002acc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d025      	beq.n	8002b1e <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	3314      	adds	r3, #20
 8002ad8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3314      	adds	r3, #20
 8002af0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002af2:	61fa      	str	r2, [r7, #28]
 8002af4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	e841 2300 	strex	r3, r2, [r1]
 8002afe:	617b      	str	r3, [r7, #20]
   return(result);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e5      	bne.n	8002ad2 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7fe ff10 	bl	8001938 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 fce0 	bl	80034de <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3740      	adds	r7, #64	@ 0x40
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b0ba      	sub	sp, #232	@ 0xe8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	695b      	ldr	r3, [r3, #20]
 8002b4a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002b66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10f      	bne.n	8002b8e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_UART_IRQHandler+0x66>
 8002b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b7e:	f003 0320 	and.w	r3, r3, #32
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fd86 	bl	8003698 <UART_Receive_IT>
      return;
 8002b8c:	e25b      	b.n	8003046 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002b8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f000 80de 	beq.w	8002d54 <HAL_UART_IRQHandler+0x22c>
 8002b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80d1 	beq.w	8002d54 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00b      	beq.n	8002bd6 <HAL_UART_IRQHandler+0xae>
 8002bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bce:	f043 0201 	orr.w	r2, r3, #1
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <HAL_UART_IRQHandler+0xd2>
 8002be2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d005      	beq.n	8002bfa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bf2:	f043 0202 	orr.w	r2, r3, #2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bfe:	f003 0302 	and.w	r3, r3, #2
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_UART_IRQHandler+0xf6>
 8002c06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f043 0204 	orr.w	r2, r3, #4
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002c1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d011      	beq.n	8002c4e <HAL_UART_IRQHandler+0x126>
 8002c2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d105      	bne.n	8002c42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c46:	f043 0208 	orr.w	r2, r3, #8
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 81f2 	beq.w	800303c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_UART_IRQHandler+0x14e>
 8002c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c68:	f003 0320 	and.w	r3, r3, #32
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d002      	beq.n	8002c76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fd11 	bl	8003698 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bf14      	ite	ne
 8002c84:	2301      	movne	r3, #1
 8002c86:	2300      	moveq	r3, #0
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <HAL_UART_IRQHandler+0x17a>
 8002c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04f      	beq.n	8002d42 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 fc1b 	bl	80034de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d041      	beq.n	8002d3a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3314      	adds	r3, #20
 8002cbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002ccc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cd4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	3314      	adds	r3, #20
 8002cde:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002ce2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002ce6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002cee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002cf2:	e841 2300 	strex	r3, r2, [r1]
 8002cf6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002cfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d1d9      	bne.n	8002cb6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d013      	beq.n	8002d32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d0e:	4a7e      	ldr	r2, [pc, #504]	@ (8002f08 <HAL_UART_IRQHandler+0x3e0>)
 8002d10:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe fe4a 	bl	80019b0 <HAL_DMA_Abort_IT>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d30:	e00e      	b.n	8002d50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f9a5 	bl	8003082 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d38:	e00a      	b.n	8002d50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 f9a1 	bl	8003082 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d40:	e006      	b.n	8002d50 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 f99d 	bl	8003082 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002d4e:	e175      	b.n	800303c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d50:	bf00      	nop
    return;
 8002d52:	e173      	b.n	800303c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	f040 814f 	bne.w	8002ffc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d62:	f003 0310 	and.w	r3, r3, #16
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 8148 	beq.w	8002ffc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d70:	f003 0310 	and.w	r3, r3, #16
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8141 	beq.w	8002ffc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	60bb      	str	r3, [r7, #8]
 8002d8e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f000 80b6 	beq.w	8002f0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002dac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 8145 	beq.w	8003040 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	f080 813e 	bcs.w	8003040 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002dca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	2b20      	cmp	r3, #32
 8002dd4:	f000 8088 	beq.w	8002ee8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002de6:	e853 3f00 	ldrex	r3, [r3]
 8002dea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002df2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002df6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002e04:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002e08:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002e10:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002e14:	e841 2300 	strex	r3, r2, [r1]
 8002e18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1d9      	bne.n	8002dd8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3314      	adds	r3, #20
 8002e2a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002e2e:	e853 3f00 	ldrex	r3, [r3]
 8002e32:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002e34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002e36:	f023 0301 	bic.w	r3, r3, #1
 8002e3a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	3314      	adds	r3, #20
 8002e44:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e48:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002e4c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e4e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002e50:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002e54:	e841 2300 	strex	r3, r2, [r1]
 8002e58:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002e5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d1e1      	bne.n	8002e24 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3314      	adds	r3, #20
 8002e66:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e68:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002e6a:	e853 3f00 	ldrex	r3, [r3]
 8002e6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002e70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002e72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002e76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3314      	adds	r3, #20
 8002e80:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002e84:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002e86:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e88:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002e8a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002e8c:	e841 2300 	strex	r3, r2, [r1]
 8002e90:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002e92:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1e3      	bne.n	8002e60 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	330c      	adds	r3, #12
 8002eac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002eb0:	e853 3f00 	ldrex	r3, [r3]
 8002eb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002eb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002eb8:	f023 0310 	bic.w	r3, r3, #16
 8002ebc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	330c      	adds	r3, #12
 8002ec6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002eca:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002ecc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ece:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002ed0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002ed2:	e841 2300 	strex	r3, r2, [r1]
 8002ed6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002ed8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1e3      	bne.n	8002ea6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe fd28 	bl	8001938 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	4619      	mov	r1, r3
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 f8c8 	bl	8003094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f04:	e09c      	b.n	8003040 <HAL_UART_IRQHandler+0x518>
 8002f06:	bf00      	nop
 8002f08:	080035a3 	.word	0x080035a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f000 808e 	beq.w	8003044 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002f28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8089 	beq.w	8003044 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	330c      	adds	r3, #12
 8002f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	330c      	adds	r3, #12
 8002f52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002f56:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002f5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f5e:	e841 2300 	strex	r3, r2, [r1]
 8002f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1e3      	bne.n	8002f32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3314      	adds	r3, #20
 8002f70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f74:	e853 3f00 	ldrex	r3, [r3]
 8002f78:	623b      	str	r3, [r7, #32]
   return(result);
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	f023 0301 	bic.w	r3, r3, #1
 8002f80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3314      	adds	r3, #20
 8002f8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e3      	bne.n	8002f6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f023 0310 	bic.w	r3, r3, #16
 8002fc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	330c      	adds	r3, #12
 8002fd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002fd4:	61fa      	str	r2, [r7, #28]
 8002fd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	69b9      	ldr	r1, [r7, #24]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	617b      	str	r3, [r7, #20]
   return(result);
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e3      	bne.n	8002fb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002fee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f84d 	bl	8003094 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002ffa:	e023      	b.n	8003044 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003004:	2b00      	cmp	r3, #0
 8003006:	d009      	beq.n	800301c <HAL_UART_IRQHandler+0x4f4>
 8003008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800300c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 fad8 	bl	80035ca <UART_Transmit_IT>
    return;
 800301a:	e014      	b.n	8003046 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800301c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00e      	beq.n	8003046 <HAL_UART_IRQHandler+0x51e>
 8003028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800302c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 fb17 	bl	8003668 <UART_EndTransmit_IT>
    return;
 800303a:	e004      	b.n	8003046 <HAL_UART_IRQHandler+0x51e>
    return;
 800303c:	bf00      	nop
 800303e:	e002      	b.n	8003046 <HAL_UART_IRQHandler+0x51e>
      return;
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <HAL_UART_IRQHandler+0x51e>
      return;
 8003044:	bf00      	nop
  }
}
 8003046:	37e8      	adds	r7, #232	@ 0xe8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003066:	bf00      	nop
 8003068:	370c      	adds	r7, #12
 800306a:	46bd      	mov	sp, r7
 800306c:	bc80      	pop	{r7}
 800306e:	4770      	bx	lr

08003070 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003082:	b480      	push	{r7}
 8003084:	b083      	sub	sp, #12
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800308a:	bf00      	nop
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	460b      	mov	r3, r1
 800309e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b090      	sub	sp, #64	@ 0x40
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0320 	and.w	r3, r3, #32
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d137      	bne.n	8003136 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80030c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030c8:	2200      	movs	r2, #0
 80030ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80030cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	3314      	adds	r3, #20
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	e853 3f00 	ldrex	r3, [r3]
 80030da:	623b      	str	r3, [r7, #32]
   return(result);
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80030e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3314      	adds	r3, #20
 80030ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80030ec:	633a      	str	r2, [r7, #48]	@ 0x30
 80030ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030f0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80030f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80030f4:	e841 2300 	strex	r3, r2, [r1]
 80030f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80030fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d1e5      	bne.n	80030cc <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	330c      	adds	r3, #12
 8003106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	e853 3f00 	ldrex	r3, [r3]
 800310e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003116:	637b      	str	r3, [r7, #52]	@ 0x34
 8003118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	330c      	adds	r3, #12
 800311e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003120:	61fa      	str	r2, [r7, #28]
 8003122:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003124:	69b9      	ldr	r1, [r7, #24]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	e841 2300 	strex	r3, r2, [r1]
 800312c:	617b      	str	r3, [r7, #20]
   return(result);
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1e5      	bne.n	8003100 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003134:	e002      	b.n	800313c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003136:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003138:	f7fd fe5c 	bl	8000df4 <HAL_UART_TxCpltCallback>
}
 800313c:	bf00      	nop
 800313e:	3740      	adds	r7, #64	@ 0x40
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003150:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f7ff ff7a 	bl	800304c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003158:	bf00      	nop
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b09c      	sub	sp, #112	@ 0x70
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0320 	and.w	r3, r3, #32
 8003178:	2b00      	cmp	r3, #0
 800317a:	d172      	bne.n	8003262 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800317c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800317e:	2200      	movs	r2, #0
 8003180:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003182:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	330c      	adds	r3, #12
 8003188:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800318a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800318c:	e853 3f00 	ldrex	r3, [r3]
 8003190:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003192:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003198:	66bb      	str	r3, [r7, #104]	@ 0x68
 800319a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80031a2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031a4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031aa:	e841 2300 	strex	r3, r2, [r1]
 80031ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1e5      	bne.n	8003182 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	3314      	adds	r3, #20
 80031bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c8:	f023 0301 	bic.w	r3, r3, #1
 80031cc:	667b      	str	r3, [r7, #100]	@ 0x64
 80031ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	3314      	adds	r3, #20
 80031d4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80031d6:	647a      	str	r2, [r7, #68]	@ 0x44
 80031d8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031dc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1e5      	bne.n	80031b6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	3314      	adds	r3, #20
 80031f0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f4:	e853 3f00 	ldrex	r3, [r3]
 80031f8:	623b      	str	r3, [r7, #32]
   return(result);
 80031fa:	6a3b      	ldr	r3, [r7, #32]
 80031fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003200:	663b      	str	r3, [r7, #96]	@ 0x60
 8003202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3314      	adds	r3, #20
 8003208:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800320a:	633a      	str	r2, [r7, #48]	@ 0x30
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003212:	e841 2300 	strex	r3, r2, [r1]
 8003216:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1e5      	bne.n	80031ea <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800321e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003220:	2220      	movs	r2, #32
 8003222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003226:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322a:	2b01      	cmp	r3, #1
 800322c:	d119      	bne.n	8003262 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	330c      	adds	r3, #12
 8003234:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	e853 3f00 	ldrex	r3, [r3]
 800323c:	60fb      	str	r3, [r7, #12]
   return(result);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0310 	bic.w	r3, r3, #16
 8003244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003246:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	330c      	adds	r3, #12
 800324c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800324e:	61fa      	str	r2, [r7, #28]
 8003250:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003252:	69b9      	ldr	r1, [r7, #24]
 8003254:	69fa      	ldr	r2, [r7, #28]
 8003256:	e841 2300 	strex	r3, r2, [r1]
 800325a:	617b      	str	r3, [r7, #20]
   return(result);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1e5      	bne.n	800322e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003262:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003264:	2200      	movs	r2, #0
 8003266:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	2b01      	cmp	r3, #1
 800326e:	d106      	bne.n	800327e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003272:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003274:	4619      	mov	r1, r3
 8003276:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003278:	f7ff ff0c 	bl	8003094 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800327c:	e002      	b.n	8003284 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800327e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003280:	f7ff feed 	bl	800305e <HAL_UART_RxCpltCallback>
}
 8003284:	bf00      	nop
 8003286:	3770      	adds	r7, #112	@ 0x70
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003298:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d108      	bne.n	80032ba <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	4619      	mov	r1, r3
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f7ff feee 	bl	8003094 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80032b8:	e002      	b.n	80032c0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7ff fed8 	bl	8003070 <HAL_UART_RxHalfCpltCallback>
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf14      	ite	ne
 80032e8:	2301      	movne	r3, #1
 80032ea:	2300      	moveq	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b21      	cmp	r3, #33	@ 0x21
 80032fa:	d108      	bne.n	800330e <UART_DMAError+0x46>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	2200      	movs	r2, #0
 8003306:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003308:	68b8      	ldr	r0, [r7, #8]
 800330a:	f000 f8c1 	bl	8003490 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003318:	2b00      	cmp	r3, #0
 800331a:	bf14      	ite	ne
 800331c:	2301      	movne	r3, #1
 800331e:	2300      	moveq	r3, #0
 8003320:	b2db      	uxtb	r3, r3
 8003322:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b22      	cmp	r3, #34	@ 0x22
 800332e:	d108      	bne.n	8003342 <UART_DMAError+0x7a>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d005      	beq.n	8003342 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2200      	movs	r2, #0
 800333a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800333c:	68b8      	ldr	r0, [r7, #8]
 800333e:	f000 f8ce 	bl	80034de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003346:	f043 0210 	orr.w	r2, r3, #16
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f7ff fe97 	bl	8003082 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003354:	bf00      	nop
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b098      	sub	sp, #96	@ 0x60
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	4613      	mov	r3, r2
 8003368:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	88fa      	ldrh	r2, [r7, #6]
 8003374:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2222      	movs	r2, #34	@ 0x22
 8003380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003388:	4a3e      	ldr	r2, [pc, #248]	@ (8003484 <UART_Start_Receive_DMA+0x128>)
 800338a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003390:	4a3d      	ldr	r2, [pc, #244]	@ (8003488 <UART_Start_Receive_DMA+0x12c>)
 8003392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003398:	4a3c      	ldr	r2, [pc, #240]	@ (800348c <UART_Start_Receive_DMA+0x130>)
 800339a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a0:	2200      	movs	r2, #0
 80033a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80033a4:	f107 0308 	add.w	r3, r7, #8
 80033a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	3304      	adds	r3, #4
 80033b4:	4619      	mov	r1, r3
 80033b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	88fb      	ldrh	r3, [r7, #6]
 80033bc:	f7fe fa5c 	bl	8001878 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80033c0:	2300      	movs	r3, #0
 80033c2:	613b      	str	r3, [r7, #16]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	613b      	str	r3, [r7, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	613b      	str	r3, [r7, #16]
 80033d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d019      	beq.n	8003412 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	330c      	adds	r3, #12
 80033e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033e8:	e853 3f00 	ldrex	r3, [r3]
 80033ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80033ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	330c      	adds	r3, #12
 80033fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033fe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003400:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003402:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003404:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003406:	e841 2300 	strex	r3, r2, [r1]
 800340a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800340c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1e5      	bne.n	80033de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	3314      	adds	r3, #20
 8003418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800341a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800341c:	e853 3f00 	ldrex	r3, [r3]
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003424:	f043 0301 	orr.w	r3, r3, #1
 8003428:	657b      	str	r3, [r7, #84]	@ 0x54
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3314      	adds	r3, #20
 8003430:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003432:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003434:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003436:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003438:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800343a:	e841 2300 	strex	r3, r2, [r1]
 800343e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1e5      	bne.n	8003412 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	3314      	adds	r3, #20
 800344c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800344e:	69bb      	ldr	r3, [r7, #24]
 8003450:	e853 3f00 	ldrex	r3, [r3]
 8003454:	617b      	str	r3, [r7, #20]
   return(result);
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800345c:	653b      	str	r3, [r7, #80]	@ 0x50
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3314      	adds	r3, #20
 8003464:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003466:	627a      	str	r2, [r7, #36]	@ 0x24
 8003468:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346a:	6a39      	ldr	r1, [r7, #32]
 800346c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800346e:	e841 2300 	strex	r3, r2, [r1]
 8003472:	61fb      	str	r3, [r7, #28]
   return(result);
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1e5      	bne.n	8003446 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3760      	adds	r7, #96	@ 0x60
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	08003161 	.word	0x08003161
 8003488:	0800328d 	.word	0x0800328d
 800348c:	080032c9 	.word	0x080032c9

08003490 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003490:	b480      	push	{r7}
 8003492:	b089      	sub	sp, #36	@ 0x24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	61ba      	str	r2, [r7, #24]
 80034ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6979      	ldr	r1, [r7, #20]
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	613b      	str	r3, [r7, #16]
   return(result);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2220      	movs	r2, #32
 80034d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80034d4:	bf00      	nop
 80034d6:	3724      	adds	r7, #36	@ 0x24
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr

080034de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034de:	b480      	push	{r7}
 80034e0:	b095      	sub	sp, #84	@ 0x54
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	330c      	adds	r3, #12
 80034ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034f0:	e853 3f00 	ldrex	r3, [r3]
 80034f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	330c      	adds	r3, #12
 8003504:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003506:	643a      	str	r2, [r7, #64]	@ 0x40
 8003508:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800350c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1e5      	bne.n	80034e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3314      	adds	r3, #20
 8003520:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	e853 3f00 	ldrex	r3, [r3]
 8003528:	61fb      	str	r3, [r7, #28]
   return(result);
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f023 0301 	bic.w	r3, r3, #1
 8003530:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3314      	adds	r3, #20
 8003538:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800353a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800353c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003540:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003542:	e841 2300 	strex	r3, r2, [r1]
 8003546:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1e5      	bne.n	800351a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	2b01      	cmp	r3, #1
 8003554:	d119      	bne.n	800358a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	60bb      	str	r3, [r7, #8]
   return(result);
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	f023 0310 	bic.w	r3, r3, #16
 800356c:	647b      	str	r3, [r7, #68]	@ 0x44
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003576:	61ba      	str	r2, [r7, #24]
 8003578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6979      	ldr	r1, [r7, #20]
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	613b      	str	r3, [r7, #16]
   return(result);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e5      	bne.n	8003556 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2220      	movs	r2, #32
 800358e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003598:	bf00      	nop
 800359a:	3754      	adds	r7, #84	@ 0x54
 800359c:	46bd      	mov	sp, r7
 800359e:	bc80      	pop	{r7}
 80035a0:	4770      	bx	lr

080035a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b084      	sub	sp, #16
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fd60 	bl	8003082 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b21      	cmp	r3, #33	@ 0x21
 80035dc:	d13e      	bne.n	800365c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035e6:	d114      	bne.n	8003612 <UART_Transmit_IT+0x48>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d110      	bne.n	8003612 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a1b      	ldr	r3, [r3, #32]
 80035f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	461a      	mov	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003604:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	1c9a      	adds	r2, r3, #2
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	621a      	str	r2, [r3, #32]
 8003610:	e008      	b.n	8003624 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	1c59      	adds	r1, r3, #1
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6211      	str	r1, [r2, #32]
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29b      	uxth	r3, r3
 800362e:	687a      	ldr	r2, [r7, #4]
 8003630:	4619      	mov	r1, r3
 8003632:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10f      	bne.n	8003658 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003646:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003656:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003658:	2300      	movs	r3, #0
 800365a:	e000      	b.n	800365e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800365c:	2302      	movs	r3, #2
  }
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800367e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd fbb3 	bl	8000df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b08c      	sub	sp, #48	@ 0x30
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b22      	cmp	r3, #34	@ 0x22
 80036aa:	f040 80ae 	bne.w	800380a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036b6:	d117      	bne.n	80036e8 <UART_Receive_IT+0x50>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d113      	bne.n	80036e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e6:	e026      	b.n	8003736 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036fa:	d007      	beq.n	800370c <UART_Receive_IT+0x74>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d10a      	bne.n	800371a <UART_Receive_IT+0x82>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d106      	bne.n	800371a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	b2da      	uxtb	r2, r3
 8003714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e008      	b.n	800372c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003726:	b2da      	uxtb	r2, r3
 8003728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800372a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800373a:	b29b      	uxth	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	b29b      	uxth	r3, r3
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	4619      	mov	r1, r3
 8003744:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003746:	2b00      	cmp	r3, #0
 8003748:	d15d      	bne.n	8003806 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0220 	bic.w	r2, r2, #32
 8003758:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003768:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695a      	ldr	r2, [r3, #20]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f022 0201 	bic.w	r2, r2, #1
 8003778:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378c:	2b01      	cmp	r3, #1
 800378e:	d135      	bne.n	80037fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	330c      	adds	r3, #12
 800379c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	613b      	str	r3, [r7, #16]
   return(result);
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f023 0310 	bic.w	r3, r3, #16
 80037ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	330c      	adds	r3, #12
 80037b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037b6:	623a      	str	r2, [r7, #32]
 80037b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	69f9      	ldr	r1, [r7, #28]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e5      	bne.n	8003796 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d10a      	bne.n	80037ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037d8:	2300      	movs	r3, #0
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80037f2:	4619      	mov	r1, r3
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f7ff fc4d 	bl	8003094 <HAL_UARTEx_RxEventCallback>
 80037fa:	e002      	b.n	8003802 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f7ff fc2e 	bl	800305e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e002      	b.n	800380c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	3730      	adds	r7, #48	@ 0x30
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68da      	ldr	r2, [r3, #12]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	695b      	ldr	r3, [r3, #20]
 8003840:	4313      	orrs	r3, r2
 8003842:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800384e:	f023 030c 	bic.w	r3, r3, #12
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	6812      	ldr	r2, [r2, #0]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	430b      	orrs	r3, r1
 800385a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699a      	ldr	r2, [r3, #24]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a2c      	ldr	r2, [pc, #176]	@ (8003928 <UART_SetConfig+0x114>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d103      	bne.n	8003884 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800387c:	f7fe ffbe 	bl	80027fc <HAL_RCC_GetPCLK2Freq>
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	e002      	b.n	800388a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003884:	f7fe ffa6 	bl	80027d4 <HAL_RCC_GetPCLK1Freq>
 8003888:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009a      	lsls	r2, r3, #2
 8003894:	441a      	add	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a0:	4a22      	ldr	r2, [pc, #136]	@ (800392c <UART_SetConfig+0x118>)
 80038a2:	fba2 2303 	umull	r2, r3, r2, r3
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	0119      	lsls	r1, r3, #4
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009a      	lsls	r2, r3, #2
 80038b4:	441a      	add	r2, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80038c0:	4b1a      	ldr	r3, [pc, #104]	@ (800392c <UART_SetConfig+0x118>)
 80038c2:	fba3 0302 	umull	r0, r3, r3, r2
 80038c6:	095b      	lsrs	r3, r3, #5
 80038c8:	2064      	movs	r0, #100	@ 0x64
 80038ca:	fb00 f303 	mul.w	r3, r0, r3
 80038ce:	1ad3      	subs	r3, r2, r3
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	3332      	adds	r3, #50	@ 0x32
 80038d4:	4a15      	ldr	r2, [pc, #84]	@ (800392c <UART_SetConfig+0x118>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038e0:	4419      	add	r1, r3
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009a      	lsls	r2, r3, #2
 80038ec:	441a      	add	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f8:	4b0c      	ldr	r3, [pc, #48]	@ (800392c <UART_SetConfig+0x118>)
 80038fa:	fba3 0302 	umull	r0, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2064      	movs	r0, #100	@ 0x64
 8003902:	fb00 f303 	mul.w	r3, r0, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	3332      	adds	r3, #50	@ 0x32
 800390c:	4a07      	ldr	r2, [pc, #28]	@ (800392c <UART_SetConfig+0x118>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	f003 020f 	and.w	r2, r3, #15
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	440a      	add	r2, r1
 800391e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003920:	bf00      	nop
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40013800 	.word	0x40013800
 800392c:	51eb851f 	.word	0x51eb851f

08003930 <_vsniprintf_r>:
 8003930:	b530      	push	{r4, r5, lr}
 8003932:	4614      	mov	r4, r2
 8003934:	2c00      	cmp	r4, #0
 8003936:	4605      	mov	r5, r0
 8003938:	461a      	mov	r2, r3
 800393a:	b09b      	sub	sp, #108	@ 0x6c
 800393c:	da05      	bge.n	800394a <_vsniprintf_r+0x1a>
 800393e:	238b      	movs	r3, #139	@ 0x8b
 8003940:	6003      	str	r3, [r0, #0]
 8003942:	f04f 30ff 	mov.w	r0, #4294967295
 8003946:	b01b      	add	sp, #108	@ 0x6c
 8003948:	bd30      	pop	{r4, r5, pc}
 800394a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800394e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003952:	bf0c      	ite	eq
 8003954:	4623      	moveq	r3, r4
 8003956:	f104 33ff 	addne.w	r3, r4, #4294967295
 800395a:	9302      	str	r3, [sp, #8]
 800395c:	9305      	str	r3, [sp, #20]
 800395e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003962:	9100      	str	r1, [sp, #0]
 8003964:	9104      	str	r1, [sp, #16]
 8003966:	f8ad 300e 	strh.w	r3, [sp, #14]
 800396a:	4669      	mov	r1, sp
 800396c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800396e:	f000 f9bd 	bl	8003cec <_svfiprintf_r>
 8003972:	1c43      	adds	r3, r0, #1
 8003974:	bfbc      	itt	lt
 8003976:	238b      	movlt	r3, #139	@ 0x8b
 8003978:	602b      	strlt	r3, [r5, #0]
 800397a:	2c00      	cmp	r4, #0
 800397c:	d0e3      	beq.n	8003946 <_vsniprintf_r+0x16>
 800397e:	2200      	movs	r2, #0
 8003980:	9b00      	ldr	r3, [sp, #0]
 8003982:	701a      	strb	r2, [r3, #0]
 8003984:	e7df      	b.n	8003946 <_vsniprintf_r+0x16>
	...

08003988 <vsniprintf>:
 8003988:	b507      	push	{r0, r1, r2, lr}
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	4613      	mov	r3, r2
 800398e:	460a      	mov	r2, r1
 8003990:	4601      	mov	r1, r0
 8003992:	4803      	ldr	r0, [pc, #12]	@ (80039a0 <vsniprintf+0x18>)
 8003994:	6800      	ldr	r0, [r0, #0]
 8003996:	f7ff ffcb 	bl	8003930 <_vsniprintf_r>
 800399a:	b003      	add	sp, #12
 800399c:	f85d fb04 	ldr.w	pc, [sp], #4
 80039a0:	2000000c 	.word	0x2000000c

080039a4 <memcmp>:
 80039a4:	b510      	push	{r4, lr}
 80039a6:	3901      	subs	r1, #1
 80039a8:	4402      	add	r2, r0
 80039aa:	4290      	cmp	r0, r2
 80039ac:	d101      	bne.n	80039b2 <memcmp+0xe>
 80039ae:	2000      	movs	r0, #0
 80039b0:	e005      	b.n	80039be <memcmp+0x1a>
 80039b2:	7803      	ldrb	r3, [r0, #0]
 80039b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80039b8:	42a3      	cmp	r3, r4
 80039ba:	d001      	beq.n	80039c0 <memcmp+0x1c>
 80039bc:	1b18      	subs	r0, r3, r4
 80039be:	bd10      	pop	{r4, pc}
 80039c0:	3001      	adds	r0, #1
 80039c2:	e7f2      	b.n	80039aa <memcmp+0x6>

080039c4 <memset>:
 80039c4:	4603      	mov	r3, r0
 80039c6:	4402      	add	r2, r0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d100      	bne.n	80039ce <memset+0xa>
 80039cc:	4770      	bx	lr
 80039ce:	f803 1b01 	strb.w	r1, [r3], #1
 80039d2:	e7f9      	b.n	80039c8 <memset+0x4>

080039d4 <__errno>:
 80039d4:	4b01      	ldr	r3, [pc, #4]	@ (80039dc <__errno+0x8>)
 80039d6:	6818      	ldr	r0, [r3, #0]
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	2000000c 	.word	0x2000000c

080039e0 <__libc_init_array>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	2600      	movs	r6, #0
 80039e4:	4d0c      	ldr	r5, [pc, #48]	@ (8003a18 <__libc_init_array+0x38>)
 80039e6:	4c0d      	ldr	r4, [pc, #52]	@ (8003a1c <__libc_init_array+0x3c>)
 80039e8:	1b64      	subs	r4, r4, r5
 80039ea:	10a4      	asrs	r4, r4, #2
 80039ec:	42a6      	cmp	r6, r4
 80039ee:	d109      	bne.n	8003a04 <__libc_init_array+0x24>
 80039f0:	f000 fc78 	bl	80042e4 <_init>
 80039f4:	2600      	movs	r6, #0
 80039f6:	4d0a      	ldr	r5, [pc, #40]	@ (8003a20 <__libc_init_array+0x40>)
 80039f8:	4c0a      	ldr	r4, [pc, #40]	@ (8003a24 <__libc_init_array+0x44>)
 80039fa:	1b64      	subs	r4, r4, r5
 80039fc:	10a4      	asrs	r4, r4, #2
 80039fe:	42a6      	cmp	r6, r4
 8003a00:	d105      	bne.n	8003a0e <__libc_init_array+0x2e>
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a08:	4798      	blx	r3
 8003a0a:	3601      	adds	r6, #1
 8003a0c:	e7ee      	b.n	80039ec <__libc_init_array+0xc>
 8003a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a12:	4798      	blx	r3
 8003a14:	3601      	adds	r6, #1
 8003a16:	e7f2      	b.n	80039fe <__libc_init_array+0x1e>
 8003a18:	080043cc 	.word	0x080043cc
 8003a1c:	080043cc 	.word	0x080043cc
 8003a20:	080043cc 	.word	0x080043cc
 8003a24:	080043d0 	.word	0x080043d0

08003a28 <__retarget_lock_acquire_recursive>:
 8003a28:	4770      	bx	lr

08003a2a <__retarget_lock_release_recursive>:
 8003a2a:	4770      	bx	lr

08003a2c <memcpy>:
 8003a2c:	440a      	add	r2, r1
 8003a2e:	4291      	cmp	r1, r2
 8003a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a34:	d100      	bne.n	8003a38 <memcpy+0xc>
 8003a36:	4770      	bx	lr
 8003a38:	b510      	push	{r4, lr}
 8003a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a3e:	4291      	cmp	r1, r2
 8003a40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a44:	d1f9      	bne.n	8003a3a <memcpy+0xe>
 8003a46:	bd10      	pop	{r4, pc}

08003a48 <_free_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	4605      	mov	r5, r0
 8003a4c:	2900      	cmp	r1, #0
 8003a4e:	d040      	beq.n	8003ad2 <_free_r+0x8a>
 8003a50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a54:	1f0c      	subs	r4, r1, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	bfb8      	it	lt
 8003a5a:	18e4      	addlt	r4, r4, r3
 8003a5c:	f000 f8de 	bl	8003c1c <__malloc_lock>
 8003a60:	4a1c      	ldr	r2, [pc, #112]	@ (8003ad4 <_free_r+0x8c>)
 8003a62:	6813      	ldr	r3, [r2, #0]
 8003a64:	b933      	cbnz	r3, 8003a74 <_free_r+0x2c>
 8003a66:	6063      	str	r3, [r4, #4]
 8003a68:	6014      	str	r4, [r2, #0]
 8003a6a:	4628      	mov	r0, r5
 8003a6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a70:	f000 b8da 	b.w	8003c28 <__malloc_unlock>
 8003a74:	42a3      	cmp	r3, r4
 8003a76:	d908      	bls.n	8003a8a <_free_r+0x42>
 8003a78:	6820      	ldr	r0, [r4, #0]
 8003a7a:	1821      	adds	r1, r4, r0
 8003a7c:	428b      	cmp	r3, r1
 8003a7e:	bf01      	itttt	eq
 8003a80:	6819      	ldreq	r1, [r3, #0]
 8003a82:	685b      	ldreq	r3, [r3, #4]
 8003a84:	1809      	addeq	r1, r1, r0
 8003a86:	6021      	streq	r1, [r4, #0]
 8003a88:	e7ed      	b.n	8003a66 <_free_r+0x1e>
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	b10b      	cbz	r3, 8003a94 <_free_r+0x4c>
 8003a90:	42a3      	cmp	r3, r4
 8003a92:	d9fa      	bls.n	8003a8a <_free_r+0x42>
 8003a94:	6811      	ldr	r1, [r2, #0]
 8003a96:	1850      	adds	r0, r2, r1
 8003a98:	42a0      	cmp	r0, r4
 8003a9a:	d10b      	bne.n	8003ab4 <_free_r+0x6c>
 8003a9c:	6820      	ldr	r0, [r4, #0]
 8003a9e:	4401      	add	r1, r0
 8003aa0:	1850      	adds	r0, r2, r1
 8003aa2:	4283      	cmp	r3, r0
 8003aa4:	6011      	str	r1, [r2, #0]
 8003aa6:	d1e0      	bne.n	8003a6a <_free_r+0x22>
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	4408      	add	r0, r1
 8003aae:	6010      	str	r0, [r2, #0]
 8003ab0:	6053      	str	r3, [r2, #4]
 8003ab2:	e7da      	b.n	8003a6a <_free_r+0x22>
 8003ab4:	d902      	bls.n	8003abc <_free_r+0x74>
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	602b      	str	r3, [r5, #0]
 8003aba:	e7d6      	b.n	8003a6a <_free_r+0x22>
 8003abc:	6820      	ldr	r0, [r4, #0]
 8003abe:	1821      	adds	r1, r4, r0
 8003ac0:	428b      	cmp	r3, r1
 8003ac2:	bf01      	itttt	eq
 8003ac4:	6819      	ldreq	r1, [r3, #0]
 8003ac6:	685b      	ldreq	r3, [r3, #4]
 8003ac8:	1809      	addeq	r1, r1, r0
 8003aca:	6021      	streq	r1, [r4, #0]
 8003acc:	6063      	str	r3, [r4, #4]
 8003ace:	6054      	str	r4, [r2, #4]
 8003ad0:	e7cb      	b.n	8003a6a <_free_r+0x22>
 8003ad2:	bd38      	pop	{r3, r4, r5, pc}
 8003ad4:	200008e4 	.word	0x200008e4

08003ad8 <sbrk_aligned>:
 8003ad8:	b570      	push	{r4, r5, r6, lr}
 8003ada:	4e0f      	ldr	r6, [pc, #60]	@ (8003b18 <sbrk_aligned+0x40>)
 8003adc:	460c      	mov	r4, r1
 8003ade:	6831      	ldr	r1, [r6, #0]
 8003ae0:	4605      	mov	r5, r0
 8003ae2:	b911      	cbnz	r1, 8003aea <sbrk_aligned+0x12>
 8003ae4:	f000 fbaa 	bl	800423c <_sbrk_r>
 8003ae8:	6030      	str	r0, [r6, #0]
 8003aea:	4621      	mov	r1, r4
 8003aec:	4628      	mov	r0, r5
 8003aee:	f000 fba5 	bl	800423c <_sbrk_r>
 8003af2:	1c43      	adds	r3, r0, #1
 8003af4:	d103      	bne.n	8003afe <sbrk_aligned+0x26>
 8003af6:	f04f 34ff 	mov.w	r4, #4294967295
 8003afa:	4620      	mov	r0, r4
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
 8003afe:	1cc4      	adds	r4, r0, #3
 8003b00:	f024 0403 	bic.w	r4, r4, #3
 8003b04:	42a0      	cmp	r0, r4
 8003b06:	d0f8      	beq.n	8003afa <sbrk_aligned+0x22>
 8003b08:	1a21      	subs	r1, r4, r0
 8003b0a:	4628      	mov	r0, r5
 8003b0c:	f000 fb96 	bl	800423c <_sbrk_r>
 8003b10:	3001      	adds	r0, #1
 8003b12:	d1f2      	bne.n	8003afa <sbrk_aligned+0x22>
 8003b14:	e7ef      	b.n	8003af6 <sbrk_aligned+0x1e>
 8003b16:	bf00      	nop
 8003b18:	200008e0 	.word	0x200008e0

08003b1c <_malloc_r>:
 8003b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b20:	1ccd      	adds	r5, r1, #3
 8003b22:	f025 0503 	bic.w	r5, r5, #3
 8003b26:	3508      	adds	r5, #8
 8003b28:	2d0c      	cmp	r5, #12
 8003b2a:	bf38      	it	cc
 8003b2c:	250c      	movcc	r5, #12
 8003b2e:	2d00      	cmp	r5, #0
 8003b30:	4606      	mov	r6, r0
 8003b32:	db01      	blt.n	8003b38 <_malloc_r+0x1c>
 8003b34:	42a9      	cmp	r1, r5
 8003b36:	d904      	bls.n	8003b42 <_malloc_r+0x26>
 8003b38:	230c      	movs	r3, #12
 8003b3a:	6033      	str	r3, [r6, #0]
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b42:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003c18 <_malloc_r+0xfc>
 8003b46:	f000 f869 	bl	8003c1c <__malloc_lock>
 8003b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8003b4e:	461c      	mov	r4, r3
 8003b50:	bb44      	cbnz	r4, 8003ba4 <_malloc_r+0x88>
 8003b52:	4629      	mov	r1, r5
 8003b54:	4630      	mov	r0, r6
 8003b56:	f7ff ffbf 	bl	8003ad8 <sbrk_aligned>
 8003b5a:	1c43      	adds	r3, r0, #1
 8003b5c:	4604      	mov	r4, r0
 8003b5e:	d158      	bne.n	8003c12 <_malloc_r+0xf6>
 8003b60:	f8d8 4000 	ldr.w	r4, [r8]
 8003b64:	4627      	mov	r7, r4
 8003b66:	2f00      	cmp	r7, #0
 8003b68:	d143      	bne.n	8003bf2 <_malloc_r+0xd6>
 8003b6a:	2c00      	cmp	r4, #0
 8003b6c:	d04b      	beq.n	8003c06 <_malloc_r+0xea>
 8003b6e:	6823      	ldr	r3, [r4, #0]
 8003b70:	4639      	mov	r1, r7
 8003b72:	4630      	mov	r0, r6
 8003b74:	eb04 0903 	add.w	r9, r4, r3
 8003b78:	f000 fb60 	bl	800423c <_sbrk_r>
 8003b7c:	4581      	cmp	r9, r0
 8003b7e:	d142      	bne.n	8003c06 <_malloc_r+0xea>
 8003b80:	6821      	ldr	r1, [r4, #0]
 8003b82:	4630      	mov	r0, r6
 8003b84:	1a6d      	subs	r5, r5, r1
 8003b86:	4629      	mov	r1, r5
 8003b88:	f7ff ffa6 	bl	8003ad8 <sbrk_aligned>
 8003b8c:	3001      	adds	r0, #1
 8003b8e:	d03a      	beq.n	8003c06 <_malloc_r+0xea>
 8003b90:	6823      	ldr	r3, [r4, #0]
 8003b92:	442b      	add	r3, r5
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	f8d8 3000 	ldr.w	r3, [r8]
 8003b9a:	685a      	ldr	r2, [r3, #4]
 8003b9c:	bb62      	cbnz	r2, 8003bf8 <_malloc_r+0xdc>
 8003b9e:	f8c8 7000 	str.w	r7, [r8]
 8003ba2:	e00f      	b.n	8003bc4 <_malloc_r+0xa8>
 8003ba4:	6822      	ldr	r2, [r4, #0]
 8003ba6:	1b52      	subs	r2, r2, r5
 8003ba8:	d420      	bmi.n	8003bec <_malloc_r+0xd0>
 8003baa:	2a0b      	cmp	r2, #11
 8003bac:	d917      	bls.n	8003bde <_malloc_r+0xc2>
 8003bae:	1961      	adds	r1, r4, r5
 8003bb0:	42a3      	cmp	r3, r4
 8003bb2:	6025      	str	r5, [r4, #0]
 8003bb4:	bf18      	it	ne
 8003bb6:	6059      	strne	r1, [r3, #4]
 8003bb8:	6863      	ldr	r3, [r4, #4]
 8003bba:	bf08      	it	eq
 8003bbc:	f8c8 1000 	streq.w	r1, [r8]
 8003bc0:	5162      	str	r2, [r4, r5]
 8003bc2:	604b      	str	r3, [r1, #4]
 8003bc4:	4630      	mov	r0, r6
 8003bc6:	f000 f82f 	bl	8003c28 <__malloc_unlock>
 8003bca:	f104 000b 	add.w	r0, r4, #11
 8003bce:	1d23      	adds	r3, r4, #4
 8003bd0:	f020 0007 	bic.w	r0, r0, #7
 8003bd4:	1ac2      	subs	r2, r0, r3
 8003bd6:	bf1c      	itt	ne
 8003bd8:	1a1b      	subne	r3, r3, r0
 8003bda:	50a3      	strne	r3, [r4, r2]
 8003bdc:	e7af      	b.n	8003b3e <_malloc_r+0x22>
 8003bde:	6862      	ldr	r2, [r4, #4]
 8003be0:	42a3      	cmp	r3, r4
 8003be2:	bf0c      	ite	eq
 8003be4:	f8c8 2000 	streq.w	r2, [r8]
 8003be8:	605a      	strne	r2, [r3, #4]
 8003bea:	e7eb      	b.n	8003bc4 <_malloc_r+0xa8>
 8003bec:	4623      	mov	r3, r4
 8003bee:	6864      	ldr	r4, [r4, #4]
 8003bf0:	e7ae      	b.n	8003b50 <_malloc_r+0x34>
 8003bf2:	463c      	mov	r4, r7
 8003bf4:	687f      	ldr	r7, [r7, #4]
 8003bf6:	e7b6      	b.n	8003b66 <_malloc_r+0x4a>
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	42a3      	cmp	r3, r4
 8003bfe:	d1fb      	bne.n	8003bf8 <_malloc_r+0xdc>
 8003c00:	2300      	movs	r3, #0
 8003c02:	6053      	str	r3, [r2, #4]
 8003c04:	e7de      	b.n	8003bc4 <_malloc_r+0xa8>
 8003c06:	230c      	movs	r3, #12
 8003c08:	4630      	mov	r0, r6
 8003c0a:	6033      	str	r3, [r6, #0]
 8003c0c:	f000 f80c 	bl	8003c28 <__malloc_unlock>
 8003c10:	e794      	b.n	8003b3c <_malloc_r+0x20>
 8003c12:	6005      	str	r5, [r0, #0]
 8003c14:	e7d6      	b.n	8003bc4 <_malloc_r+0xa8>
 8003c16:	bf00      	nop
 8003c18:	200008e4 	.word	0x200008e4

08003c1c <__malloc_lock>:
 8003c1c:	4801      	ldr	r0, [pc, #4]	@ (8003c24 <__malloc_lock+0x8>)
 8003c1e:	f7ff bf03 	b.w	8003a28 <__retarget_lock_acquire_recursive>
 8003c22:	bf00      	nop
 8003c24:	200008dc 	.word	0x200008dc

08003c28 <__malloc_unlock>:
 8003c28:	4801      	ldr	r0, [pc, #4]	@ (8003c30 <__malloc_unlock+0x8>)
 8003c2a:	f7ff befe 	b.w	8003a2a <__retarget_lock_release_recursive>
 8003c2e:	bf00      	nop
 8003c30:	200008dc 	.word	0x200008dc

08003c34 <__ssputs_r>:
 8003c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c38:	461f      	mov	r7, r3
 8003c3a:	688e      	ldr	r6, [r1, #8]
 8003c3c:	4682      	mov	sl, r0
 8003c3e:	42be      	cmp	r6, r7
 8003c40:	460c      	mov	r4, r1
 8003c42:	4690      	mov	r8, r2
 8003c44:	680b      	ldr	r3, [r1, #0]
 8003c46:	d82d      	bhi.n	8003ca4 <__ssputs_r+0x70>
 8003c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003c50:	d026      	beq.n	8003ca0 <__ssputs_r+0x6c>
 8003c52:	6965      	ldr	r5, [r4, #20]
 8003c54:	6909      	ldr	r1, [r1, #16]
 8003c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c5a:	eba3 0901 	sub.w	r9, r3, r1
 8003c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c62:	1c7b      	adds	r3, r7, #1
 8003c64:	444b      	add	r3, r9
 8003c66:	106d      	asrs	r5, r5, #1
 8003c68:	429d      	cmp	r5, r3
 8003c6a:	bf38      	it	cc
 8003c6c:	461d      	movcc	r5, r3
 8003c6e:	0553      	lsls	r3, r2, #21
 8003c70:	d527      	bpl.n	8003cc2 <__ssputs_r+0x8e>
 8003c72:	4629      	mov	r1, r5
 8003c74:	f7ff ff52 	bl	8003b1c <_malloc_r>
 8003c78:	4606      	mov	r6, r0
 8003c7a:	b360      	cbz	r0, 8003cd6 <__ssputs_r+0xa2>
 8003c7c:	464a      	mov	r2, r9
 8003c7e:	6921      	ldr	r1, [r4, #16]
 8003c80:	f7ff fed4 	bl	8003a2c <memcpy>
 8003c84:	89a3      	ldrh	r3, [r4, #12]
 8003c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	6126      	str	r6, [r4, #16]
 8003c92:	444e      	add	r6, r9
 8003c94:	6026      	str	r6, [r4, #0]
 8003c96:	463e      	mov	r6, r7
 8003c98:	6165      	str	r5, [r4, #20]
 8003c9a:	eba5 0509 	sub.w	r5, r5, r9
 8003c9e:	60a5      	str	r5, [r4, #8]
 8003ca0:	42be      	cmp	r6, r7
 8003ca2:	d900      	bls.n	8003ca6 <__ssputs_r+0x72>
 8003ca4:	463e      	mov	r6, r7
 8003ca6:	4632      	mov	r2, r6
 8003ca8:	4641      	mov	r1, r8
 8003caa:	6820      	ldr	r0, [r4, #0]
 8003cac:	f000 faac 	bl	8004208 <memmove>
 8003cb0:	2000      	movs	r0, #0
 8003cb2:	68a3      	ldr	r3, [r4, #8]
 8003cb4:	1b9b      	subs	r3, r3, r6
 8003cb6:	60a3      	str	r3, [r4, #8]
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	4433      	add	r3, r6
 8003cbc:	6023      	str	r3, [r4, #0]
 8003cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cc2:	462a      	mov	r2, r5
 8003cc4:	f000 fad8 	bl	8004278 <_realloc_r>
 8003cc8:	4606      	mov	r6, r0
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d1e0      	bne.n	8003c90 <__ssputs_r+0x5c>
 8003cce:	4650      	mov	r0, sl
 8003cd0:	6921      	ldr	r1, [r4, #16]
 8003cd2:	f7ff feb9 	bl	8003a48 <_free_r>
 8003cd6:	230c      	movs	r3, #12
 8003cd8:	f8ca 3000 	str.w	r3, [sl]
 8003cdc:	89a3      	ldrh	r3, [r4, #12]
 8003cde:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ce6:	81a3      	strh	r3, [r4, #12]
 8003ce8:	e7e9      	b.n	8003cbe <__ssputs_r+0x8a>
	...

08003cec <_svfiprintf_r>:
 8003cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cf0:	4698      	mov	r8, r3
 8003cf2:	898b      	ldrh	r3, [r1, #12]
 8003cf4:	4607      	mov	r7, r0
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	460d      	mov	r5, r1
 8003cfa:	4614      	mov	r4, r2
 8003cfc:	b09d      	sub	sp, #116	@ 0x74
 8003cfe:	d510      	bpl.n	8003d22 <_svfiprintf_r+0x36>
 8003d00:	690b      	ldr	r3, [r1, #16]
 8003d02:	b973      	cbnz	r3, 8003d22 <_svfiprintf_r+0x36>
 8003d04:	2140      	movs	r1, #64	@ 0x40
 8003d06:	f7ff ff09 	bl	8003b1c <_malloc_r>
 8003d0a:	6028      	str	r0, [r5, #0]
 8003d0c:	6128      	str	r0, [r5, #16]
 8003d0e:	b930      	cbnz	r0, 8003d1e <_svfiprintf_r+0x32>
 8003d10:	230c      	movs	r3, #12
 8003d12:	603b      	str	r3, [r7, #0]
 8003d14:	f04f 30ff 	mov.w	r0, #4294967295
 8003d18:	b01d      	add	sp, #116	@ 0x74
 8003d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d1e:	2340      	movs	r3, #64	@ 0x40
 8003d20:	616b      	str	r3, [r5, #20]
 8003d22:	2300      	movs	r3, #0
 8003d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d26:	2320      	movs	r3, #32
 8003d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003d2c:	2330      	movs	r3, #48	@ 0x30
 8003d2e:	f04f 0901 	mov.w	r9, #1
 8003d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8003d36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003ed0 <_svfiprintf_r+0x1e4>
 8003d3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003d3e:	4623      	mov	r3, r4
 8003d40:	469a      	mov	sl, r3
 8003d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d46:	b10a      	cbz	r2, 8003d4c <_svfiprintf_r+0x60>
 8003d48:	2a25      	cmp	r2, #37	@ 0x25
 8003d4a:	d1f9      	bne.n	8003d40 <_svfiprintf_r+0x54>
 8003d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8003d50:	d00b      	beq.n	8003d6a <_svfiprintf_r+0x7e>
 8003d52:	465b      	mov	r3, fp
 8003d54:	4622      	mov	r2, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	4638      	mov	r0, r7
 8003d5a:	f7ff ff6b 	bl	8003c34 <__ssputs_r>
 8003d5e:	3001      	adds	r0, #1
 8003d60:	f000 80a7 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d66:	445a      	add	r2, fp
 8003d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 809f 	beq.w	8003eb2 <_svfiprintf_r+0x1c6>
 8003d74:	2300      	movs	r3, #0
 8003d76:	f04f 32ff 	mov.w	r2, #4294967295
 8003d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d7e:	f10a 0a01 	add.w	sl, sl, #1
 8003d82:	9304      	str	r3, [sp, #16]
 8003d84:	9307      	str	r3, [sp, #28]
 8003d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d8c:	4654      	mov	r4, sl
 8003d8e:	2205      	movs	r2, #5
 8003d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d94:	484e      	ldr	r0, [pc, #312]	@ (8003ed0 <_svfiprintf_r+0x1e4>)
 8003d96:	f000 fa61 	bl	800425c <memchr>
 8003d9a:	9a04      	ldr	r2, [sp, #16]
 8003d9c:	b9d8      	cbnz	r0, 8003dd6 <_svfiprintf_r+0xea>
 8003d9e:	06d0      	lsls	r0, r2, #27
 8003da0:	bf44      	itt	mi
 8003da2:	2320      	movmi	r3, #32
 8003da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003da8:	0711      	lsls	r1, r2, #28
 8003daa:	bf44      	itt	mi
 8003dac:	232b      	movmi	r3, #43	@ 0x2b
 8003dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003db2:	f89a 3000 	ldrb.w	r3, [sl]
 8003db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db8:	d015      	beq.n	8003de6 <_svfiprintf_r+0xfa>
 8003dba:	4654      	mov	r4, sl
 8003dbc:	2000      	movs	r0, #0
 8003dbe:	f04f 0c0a 	mov.w	ip, #10
 8003dc2:	9a07      	ldr	r2, [sp, #28]
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003dca:	3b30      	subs	r3, #48	@ 0x30
 8003dcc:	2b09      	cmp	r3, #9
 8003dce:	d94b      	bls.n	8003e68 <_svfiprintf_r+0x17c>
 8003dd0:	b1b0      	cbz	r0, 8003e00 <_svfiprintf_r+0x114>
 8003dd2:	9207      	str	r2, [sp, #28]
 8003dd4:	e014      	b.n	8003e00 <_svfiprintf_r+0x114>
 8003dd6:	eba0 0308 	sub.w	r3, r0, r8
 8003dda:	fa09 f303 	lsl.w	r3, r9, r3
 8003dde:	4313      	orrs	r3, r2
 8003de0:	46a2      	mov	sl, r4
 8003de2:	9304      	str	r3, [sp, #16]
 8003de4:	e7d2      	b.n	8003d8c <_svfiprintf_r+0xa0>
 8003de6:	9b03      	ldr	r3, [sp, #12]
 8003de8:	1d19      	adds	r1, r3, #4
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	9103      	str	r1, [sp, #12]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	bfbb      	ittet	lt
 8003df2:	425b      	neglt	r3, r3
 8003df4:	f042 0202 	orrlt.w	r2, r2, #2
 8003df8:	9307      	strge	r3, [sp, #28]
 8003dfa:	9307      	strlt	r3, [sp, #28]
 8003dfc:	bfb8      	it	lt
 8003dfe:	9204      	strlt	r2, [sp, #16]
 8003e00:	7823      	ldrb	r3, [r4, #0]
 8003e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e04:	d10a      	bne.n	8003e1c <_svfiprintf_r+0x130>
 8003e06:	7863      	ldrb	r3, [r4, #1]
 8003e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e0a:	d132      	bne.n	8003e72 <_svfiprintf_r+0x186>
 8003e0c:	9b03      	ldr	r3, [sp, #12]
 8003e0e:	3402      	adds	r4, #2
 8003e10:	1d1a      	adds	r2, r3, #4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	9203      	str	r2, [sp, #12]
 8003e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003e1a:	9305      	str	r3, [sp, #20]
 8003e1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003ed4 <_svfiprintf_r+0x1e8>
 8003e20:	2203      	movs	r2, #3
 8003e22:	4650      	mov	r0, sl
 8003e24:	7821      	ldrb	r1, [r4, #0]
 8003e26:	f000 fa19 	bl	800425c <memchr>
 8003e2a:	b138      	cbz	r0, 8003e3c <_svfiprintf_r+0x150>
 8003e2c:	2240      	movs	r2, #64	@ 0x40
 8003e2e:	9b04      	ldr	r3, [sp, #16]
 8003e30:	eba0 000a 	sub.w	r0, r0, sl
 8003e34:	4082      	lsls	r2, r0
 8003e36:	4313      	orrs	r3, r2
 8003e38:	3401      	adds	r4, #1
 8003e3a:	9304      	str	r3, [sp, #16]
 8003e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e40:	2206      	movs	r2, #6
 8003e42:	4825      	ldr	r0, [pc, #148]	@ (8003ed8 <_svfiprintf_r+0x1ec>)
 8003e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003e48:	f000 fa08 	bl	800425c <memchr>
 8003e4c:	2800      	cmp	r0, #0
 8003e4e:	d036      	beq.n	8003ebe <_svfiprintf_r+0x1d2>
 8003e50:	4b22      	ldr	r3, [pc, #136]	@ (8003edc <_svfiprintf_r+0x1f0>)
 8003e52:	bb1b      	cbnz	r3, 8003e9c <_svfiprintf_r+0x1b0>
 8003e54:	9b03      	ldr	r3, [sp, #12]
 8003e56:	3307      	adds	r3, #7
 8003e58:	f023 0307 	bic.w	r3, r3, #7
 8003e5c:	3308      	adds	r3, #8
 8003e5e:	9303      	str	r3, [sp, #12]
 8003e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e62:	4433      	add	r3, r6
 8003e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e66:	e76a      	b.n	8003d3e <_svfiprintf_r+0x52>
 8003e68:	460c      	mov	r4, r1
 8003e6a:	2001      	movs	r0, #1
 8003e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e70:	e7a8      	b.n	8003dc4 <_svfiprintf_r+0xd8>
 8003e72:	2300      	movs	r3, #0
 8003e74:	f04f 0c0a 	mov.w	ip, #10
 8003e78:	4619      	mov	r1, r3
 8003e7a:	3401      	adds	r4, #1
 8003e7c:	9305      	str	r3, [sp, #20]
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e84:	3a30      	subs	r2, #48	@ 0x30
 8003e86:	2a09      	cmp	r2, #9
 8003e88:	d903      	bls.n	8003e92 <_svfiprintf_r+0x1a6>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0c6      	beq.n	8003e1c <_svfiprintf_r+0x130>
 8003e8e:	9105      	str	r1, [sp, #20]
 8003e90:	e7c4      	b.n	8003e1c <_svfiprintf_r+0x130>
 8003e92:	4604      	mov	r4, r0
 8003e94:	2301      	movs	r3, #1
 8003e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e9a:	e7f0      	b.n	8003e7e <_svfiprintf_r+0x192>
 8003e9c:	ab03      	add	r3, sp, #12
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	4638      	mov	r0, r7
 8003ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ee0 <_svfiprintf_r+0x1f4>)
 8003ea6:	a904      	add	r1, sp, #16
 8003ea8:	f3af 8000 	nop.w
 8003eac:	1c42      	adds	r2, r0, #1
 8003eae:	4606      	mov	r6, r0
 8003eb0:	d1d6      	bne.n	8003e60 <_svfiprintf_r+0x174>
 8003eb2:	89ab      	ldrh	r3, [r5, #12]
 8003eb4:	065b      	lsls	r3, r3, #25
 8003eb6:	f53f af2d 	bmi.w	8003d14 <_svfiprintf_r+0x28>
 8003eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ebc:	e72c      	b.n	8003d18 <_svfiprintf_r+0x2c>
 8003ebe:	ab03      	add	r3, sp, #12
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	462a      	mov	r2, r5
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	4b06      	ldr	r3, [pc, #24]	@ (8003ee0 <_svfiprintf_r+0x1f4>)
 8003ec8:	a904      	add	r1, sp, #16
 8003eca:	f000 f87d 	bl	8003fc8 <_printf_i>
 8003ece:	e7ed      	b.n	8003eac <_svfiprintf_r+0x1c0>
 8003ed0:	08004396 	.word	0x08004396
 8003ed4:	0800439c 	.word	0x0800439c
 8003ed8:	080043a0 	.word	0x080043a0
 8003edc:	00000000 	.word	0x00000000
 8003ee0:	08003c35 	.word	0x08003c35

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4698      	mov	r8, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bfb8      	it	lt
 8003ef6:	4613      	movlt	r3, r2
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003efe:	460c      	mov	r4, r1
 8003f00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003f04:	b10a      	cbz	r2, 8003f0a <_printf_common+0x26>
 8003f06:	3301      	adds	r3, #1
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0699      	lsls	r1, r3, #26
 8003f0e:	bf42      	ittt	mi
 8003f10:	6833      	ldrmi	r3, [r6, #0]
 8003f12:	3302      	addmi	r3, #2
 8003f14:	6033      	strmi	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	f015 0506 	ands.w	r5, r5, #6
 8003f1c:	d106      	bne.n	8003f2c <_printf_common+0x48>
 8003f1e:	f104 0a19 	add.w	sl, r4, #25
 8003f22:	68e3      	ldr	r3, [r4, #12]
 8003f24:	6832      	ldr	r2, [r6, #0]
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	dc2b      	bgt.n	8003f84 <_printf_common+0xa0>
 8003f2c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003f30:	6822      	ldr	r2, [r4, #0]
 8003f32:	3b00      	subs	r3, #0
 8003f34:	bf18      	it	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	0692      	lsls	r2, r2, #26
 8003f3a:	d430      	bmi.n	8003f9e <_printf_common+0xba>
 8003f3c:	4641      	mov	r1, r8
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003f44:	47c8      	blx	r9
 8003f46:	3001      	adds	r0, #1
 8003f48:	d023      	beq.n	8003f92 <_printf_common+0xae>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	6922      	ldr	r2, [r4, #16]
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf14      	ite	ne
 8003f56:	2500      	movne	r5, #0
 8003f58:	6833      	ldreq	r3, [r6, #0]
 8003f5a:	f04f 0600 	mov.w	r6, #0
 8003f5e:	bf08      	it	eq
 8003f60:	68e5      	ldreq	r5, [r4, #12]
 8003f62:	f104 041a 	add.w	r4, r4, #26
 8003f66:	bf08      	it	eq
 8003f68:	1aed      	subeq	r5, r5, r3
 8003f6a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003f6e:	bf08      	it	eq
 8003f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f74:	4293      	cmp	r3, r2
 8003f76:	bfc4      	itt	gt
 8003f78:	1a9b      	subgt	r3, r3, r2
 8003f7a:	18ed      	addgt	r5, r5, r3
 8003f7c:	42b5      	cmp	r5, r6
 8003f7e:	d11a      	bne.n	8003fb6 <_printf_common+0xd2>
 8003f80:	2000      	movs	r0, #0
 8003f82:	e008      	b.n	8003f96 <_printf_common+0xb2>
 8003f84:	2301      	movs	r3, #1
 8003f86:	4652      	mov	r2, sl
 8003f88:	4641      	mov	r1, r8
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	47c8      	blx	r9
 8003f8e:	3001      	adds	r0, #1
 8003f90:	d103      	bne.n	8003f9a <_printf_common+0xb6>
 8003f92:	f04f 30ff 	mov.w	r0, #4294967295
 8003f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f9a:	3501      	adds	r5, #1
 8003f9c:	e7c1      	b.n	8003f22 <_printf_common+0x3e>
 8003f9e:	2030      	movs	r0, #48	@ 0x30
 8003fa0:	18e1      	adds	r1, r4, r3
 8003fa2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003fac:	4422      	add	r2, r4
 8003fae:	3302      	adds	r3, #2
 8003fb0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003fb4:	e7c2      	b.n	8003f3c <_printf_common+0x58>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	4622      	mov	r2, r4
 8003fba:	4641      	mov	r1, r8
 8003fbc:	4638      	mov	r0, r7
 8003fbe:	47c8      	blx	r9
 8003fc0:	3001      	adds	r0, #1
 8003fc2:	d0e6      	beq.n	8003f92 <_printf_common+0xae>
 8003fc4:	3601      	adds	r6, #1
 8003fc6:	e7d9      	b.n	8003f7c <_printf_common+0x98>

08003fc8 <_printf_i>:
 8003fc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fcc:	7e0f      	ldrb	r7, [r1, #24]
 8003fce:	4691      	mov	r9, r2
 8003fd0:	2f78      	cmp	r7, #120	@ 0x78
 8003fd2:	4680      	mov	r8, r0
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	469a      	mov	sl, r3
 8003fd8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003fda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003fde:	d807      	bhi.n	8003ff0 <_printf_i+0x28>
 8003fe0:	2f62      	cmp	r7, #98	@ 0x62
 8003fe2:	d80a      	bhi.n	8003ffa <_printf_i+0x32>
 8003fe4:	2f00      	cmp	r7, #0
 8003fe6:	f000 80d3 	beq.w	8004190 <_printf_i+0x1c8>
 8003fea:	2f58      	cmp	r7, #88	@ 0x58
 8003fec:	f000 80ba 	beq.w	8004164 <_printf_i+0x19c>
 8003ff0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ff4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ff8:	e03a      	b.n	8004070 <_printf_i+0xa8>
 8003ffa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003ffe:	2b15      	cmp	r3, #21
 8004000:	d8f6      	bhi.n	8003ff0 <_printf_i+0x28>
 8004002:	a101      	add	r1, pc, #4	@ (adr r1, 8004008 <_printf_i+0x40>)
 8004004:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004008:	08004061 	.word	0x08004061
 800400c:	08004075 	.word	0x08004075
 8004010:	08003ff1 	.word	0x08003ff1
 8004014:	08003ff1 	.word	0x08003ff1
 8004018:	08003ff1 	.word	0x08003ff1
 800401c:	08003ff1 	.word	0x08003ff1
 8004020:	08004075 	.word	0x08004075
 8004024:	08003ff1 	.word	0x08003ff1
 8004028:	08003ff1 	.word	0x08003ff1
 800402c:	08003ff1 	.word	0x08003ff1
 8004030:	08003ff1 	.word	0x08003ff1
 8004034:	08004177 	.word	0x08004177
 8004038:	0800409f 	.word	0x0800409f
 800403c:	08004131 	.word	0x08004131
 8004040:	08003ff1 	.word	0x08003ff1
 8004044:	08003ff1 	.word	0x08003ff1
 8004048:	08004199 	.word	0x08004199
 800404c:	08003ff1 	.word	0x08003ff1
 8004050:	0800409f 	.word	0x0800409f
 8004054:	08003ff1 	.word	0x08003ff1
 8004058:	08003ff1 	.word	0x08003ff1
 800405c:	08004139 	.word	0x08004139
 8004060:	6833      	ldr	r3, [r6, #0]
 8004062:	1d1a      	adds	r2, r3, #4
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6032      	str	r2, [r6, #0]
 8004068:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800406c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004070:	2301      	movs	r3, #1
 8004072:	e09e      	b.n	80041b2 <_printf_i+0x1ea>
 8004074:	6833      	ldr	r3, [r6, #0]
 8004076:	6820      	ldr	r0, [r4, #0]
 8004078:	1d19      	adds	r1, r3, #4
 800407a:	6031      	str	r1, [r6, #0]
 800407c:	0606      	lsls	r6, r0, #24
 800407e:	d501      	bpl.n	8004084 <_printf_i+0xbc>
 8004080:	681d      	ldr	r5, [r3, #0]
 8004082:	e003      	b.n	800408c <_printf_i+0xc4>
 8004084:	0645      	lsls	r5, r0, #25
 8004086:	d5fb      	bpl.n	8004080 <_printf_i+0xb8>
 8004088:	f9b3 5000 	ldrsh.w	r5, [r3]
 800408c:	2d00      	cmp	r5, #0
 800408e:	da03      	bge.n	8004098 <_printf_i+0xd0>
 8004090:	232d      	movs	r3, #45	@ 0x2d
 8004092:	426d      	negs	r5, r5
 8004094:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004098:	230a      	movs	r3, #10
 800409a:	4859      	ldr	r0, [pc, #356]	@ (8004200 <_printf_i+0x238>)
 800409c:	e011      	b.n	80040c2 <_printf_i+0xfa>
 800409e:	6821      	ldr	r1, [r4, #0]
 80040a0:	6833      	ldr	r3, [r6, #0]
 80040a2:	0608      	lsls	r0, r1, #24
 80040a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80040a8:	d402      	bmi.n	80040b0 <_printf_i+0xe8>
 80040aa:	0649      	lsls	r1, r1, #25
 80040ac:	bf48      	it	mi
 80040ae:	b2ad      	uxthmi	r5, r5
 80040b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80040b2:	6033      	str	r3, [r6, #0]
 80040b4:	bf14      	ite	ne
 80040b6:	230a      	movne	r3, #10
 80040b8:	2308      	moveq	r3, #8
 80040ba:	4851      	ldr	r0, [pc, #324]	@ (8004200 <_printf_i+0x238>)
 80040bc:	2100      	movs	r1, #0
 80040be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80040c2:	6866      	ldr	r6, [r4, #4]
 80040c4:	2e00      	cmp	r6, #0
 80040c6:	bfa8      	it	ge
 80040c8:	6821      	ldrge	r1, [r4, #0]
 80040ca:	60a6      	str	r6, [r4, #8]
 80040cc:	bfa4      	itt	ge
 80040ce:	f021 0104 	bicge.w	r1, r1, #4
 80040d2:	6021      	strge	r1, [r4, #0]
 80040d4:	b90d      	cbnz	r5, 80040da <_printf_i+0x112>
 80040d6:	2e00      	cmp	r6, #0
 80040d8:	d04b      	beq.n	8004172 <_printf_i+0x1aa>
 80040da:	4616      	mov	r6, r2
 80040dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80040e0:	fb03 5711 	mls	r7, r3, r1, r5
 80040e4:	5dc7      	ldrb	r7, [r0, r7]
 80040e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80040ea:	462f      	mov	r7, r5
 80040ec:	42bb      	cmp	r3, r7
 80040ee:	460d      	mov	r5, r1
 80040f0:	d9f4      	bls.n	80040dc <_printf_i+0x114>
 80040f2:	2b08      	cmp	r3, #8
 80040f4:	d10b      	bne.n	800410e <_printf_i+0x146>
 80040f6:	6823      	ldr	r3, [r4, #0]
 80040f8:	07df      	lsls	r7, r3, #31
 80040fa:	d508      	bpl.n	800410e <_printf_i+0x146>
 80040fc:	6923      	ldr	r3, [r4, #16]
 80040fe:	6861      	ldr	r1, [r4, #4]
 8004100:	4299      	cmp	r1, r3
 8004102:	bfde      	ittt	le
 8004104:	2330      	movle	r3, #48	@ 0x30
 8004106:	f806 3c01 	strble.w	r3, [r6, #-1]
 800410a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800410e:	1b92      	subs	r2, r2, r6
 8004110:	6122      	str	r2, [r4, #16]
 8004112:	464b      	mov	r3, r9
 8004114:	4621      	mov	r1, r4
 8004116:	4640      	mov	r0, r8
 8004118:	f8cd a000 	str.w	sl, [sp]
 800411c:	aa03      	add	r2, sp, #12
 800411e:	f7ff fee1 	bl	8003ee4 <_printf_common>
 8004122:	3001      	adds	r0, #1
 8004124:	d14a      	bne.n	80041bc <_printf_i+0x1f4>
 8004126:	f04f 30ff 	mov.w	r0, #4294967295
 800412a:	b004      	add	sp, #16
 800412c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004130:	6823      	ldr	r3, [r4, #0]
 8004132:	f043 0320 	orr.w	r3, r3, #32
 8004136:	6023      	str	r3, [r4, #0]
 8004138:	2778      	movs	r7, #120	@ 0x78
 800413a:	4832      	ldr	r0, [pc, #200]	@ (8004204 <_printf_i+0x23c>)
 800413c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	6831      	ldr	r1, [r6, #0]
 8004144:	061f      	lsls	r7, r3, #24
 8004146:	f851 5b04 	ldr.w	r5, [r1], #4
 800414a:	d402      	bmi.n	8004152 <_printf_i+0x18a>
 800414c:	065f      	lsls	r7, r3, #25
 800414e:	bf48      	it	mi
 8004150:	b2ad      	uxthmi	r5, r5
 8004152:	6031      	str	r1, [r6, #0]
 8004154:	07d9      	lsls	r1, r3, #31
 8004156:	bf44      	itt	mi
 8004158:	f043 0320 	orrmi.w	r3, r3, #32
 800415c:	6023      	strmi	r3, [r4, #0]
 800415e:	b11d      	cbz	r5, 8004168 <_printf_i+0x1a0>
 8004160:	2310      	movs	r3, #16
 8004162:	e7ab      	b.n	80040bc <_printf_i+0xf4>
 8004164:	4826      	ldr	r0, [pc, #152]	@ (8004200 <_printf_i+0x238>)
 8004166:	e7e9      	b.n	800413c <_printf_i+0x174>
 8004168:	6823      	ldr	r3, [r4, #0]
 800416a:	f023 0320 	bic.w	r3, r3, #32
 800416e:	6023      	str	r3, [r4, #0]
 8004170:	e7f6      	b.n	8004160 <_printf_i+0x198>
 8004172:	4616      	mov	r6, r2
 8004174:	e7bd      	b.n	80040f2 <_printf_i+0x12a>
 8004176:	6833      	ldr	r3, [r6, #0]
 8004178:	6825      	ldr	r5, [r4, #0]
 800417a:	1d18      	adds	r0, r3, #4
 800417c:	6961      	ldr	r1, [r4, #20]
 800417e:	6030      	str	r0, [r6, #0]
 8004180:	062e      	lsls	r6, r5, #24
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	d501      	bpl.n	800418a <_printf_i+0x1c2>
 8004186:	6019      	str	r1, [r3, #0]
 8004188:	e002      	b.n	8004190 <_printf_i+0x1c8>
 800418a:	0668      	lsls	r0, r5, #25
 800418c:	d5fb      	bpl.n	8004186 <_printf_i+0x1be>
 800418e:	8019      	strh	r1, [r3, #0]
 8004190:	2300      	movs	r3, #0
 8004192:	4616      	mov	r6, r2
 8004194:	6123      	str	r3, [r4, #16]
 8004196:	e7bc      	b.n	8004112 <_printf_i+0x14a>
 8004198:	6833      	ldr	r3, [r6, #0]
 800419a:	2100      	movs	r1, #0
 800419c:	1d1a      	adds	r2, r3, #4
 800419e:	6032      	str	r2, [r6, #0]
 80041a0:	681e      	ldr	r6, [r3, #0]
 80041a2:	6862      	ldr	r2, [r4, #4]
 80041a4:	4630      	mov	r0, r6
 80041a6:	f000 f859 	bl	800425c <memchr>
 80041aa:	b108      	cbz	r0, 80041b0 <_printf_i+0x1e8>
 80041ac:	1b80      	subs	r0, r0, r6
 80041ae:	6060      	str	r0, [r4, #4]
 80041b0:	6863      	ldr	r3, [r4, #4]
 80041b2:	6123      	str	r3, [r4, #16]
 80041b4:	2300      	movs	r3, #0
 80041b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041ba:	e7aa      	b.n	8004112 <_printf_i+0x14a>
 80041bc:	4632      	mov	r2, r6
 80041be:	4649      	mov	r1, r9
 80041c0:	4640      	mov	r0, r8
 80041c2:	6923      	ldr	r3, [r4, #16]
 80041c4:	47d0      	blx	sl
 80041c6:	3001      	adds	r0, #1
 80041c8:	d0ad      	beq.n	8004126 <_printf_i+0x15e>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	079b      	lsls	r3, r3, #30
 80041ce:	d413      	bmi.n	80041f8 <_printf_i+0x230>
 80041d0:	68e0      	ldr	r0, [r4, #12]
 80041d2:	9b03      	ldr	r3, [sp, #12]
 80041d4:	4298      	cmp	r0, r3
 80041d6:	bfb8      	it	lt
 80041d8:	4618      	movlt	r0, r3
 80041da:	e7a6      	b.n	800412a <_printf_i+0x162>
 80041dc:	2301      	movs	r3, #1
 80041de:	4632      	mov	r2, r6
 80041e0:	4649      	mov	r1, r9
 80041e2:	4640      	mov	r0, r8
 80041e4:	47d0      	blx	sl
 80041e6:	3001      	adds	r0, #1
 80041e8:	d09d      	beq.n	8004126 <_printf_i+0x15e>
 80041ea:	3501      	adds	r5, #1
 80041ec:	68e3      	ldr	r3, [r4, #12]
 80041ee:	9903      	ldr	r1, [sp, #12]
 80041f0:	1a5b      	subs	r3, r3, r1
 80041f2:	42ab      	cmp	r3, r5
 80041f4:	dcf2      	bgt.n	80041dc <_printf_i+0x214>
 80041f6:	e7eb      	b.n	80041d0 <_printf_i+0x208>
 80041f8:	2500      	movs	r5, #0
 80041fa:	f104 0619 	add.w	r6, r4, #25
 80041fe:	e7f5      	b.n	80041ec <_printf_i+0x224>
 8004200:	080043a7 	.word	0x080043a7
 8004204:	080043b8 	.word	0x080043b8

08004208 <memmove>:
 8004208:	4288      	cmp	r0, r1
 800420a:	b510      	push	{r4, lr}
 800420c:	eb01 0402 	add.w	r4, r1, r2
 8004210:	d902      	bls.n	8004218 <memmove+0x10>
 8004212:	4284      	cmp	r4, r0
 8004214:	4623      	mov	r3, r4
 8004216:	d807      	bhi.n	8004228 <memmove+0x20>
 8004218:	1e43      	subs	r3, r0, #1
 800421a:	42a1      	cmp	r1, r4
 800421c:	d008      	beq.n	8004230 <memmove+0x28>
 800421e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004226:	e7f8      	b.n	800421a <memmove+0x12>
 8004228:	4601      	mov	r1, r0
 800422a:	4402      	add	r2, r0
 800422c:	428a      	cmp	r2, r1
 800422e:	d100      	bne.n	8004232 <memmove+0x2a>
 8004230:	bd10      	pop	{r4, pc}
 8004232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800423a:	e7f7      	b.n	800422c <memmove+0x24>

0800423c <_sbrk_r>:
 800423c:	b538      	push	{r3, r4, r5, lr}
 800423e:	2300      	movs	r3, #0
 8004240:	4d05      	ldr	r5, [pc, #20]	@ (8004258 <_sbrk_r+0x1c>)
 8004242:	4604      	mov	r4, r0
 8004244:	4608      	mov	r0, r1
 8004246:	602b      	str	r3, [r5, #0]
 8004248:	f7fc fce8 	bl	8000c1c <_sbrk>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d102      	bne.n	8004256 <_sbrk_r+0x1a>
 8004250:	682b      	ldr	r3, [r5, #0]
 8004252:	b103      	cbz	r3, 8004256 <_sbrk_r+0x1a>
 8004254:	6023      	str	r3, [r4, #0]
 8004256:	bd38      	pop	{r3, r4, r5, pc}
 8004258:	200008d8 	.word	0x200008d8

0800425c <memchr>:
 800425c:	4603      	mov	r3, r0
 800425e:	b510      	push	{r4, lr}
 8004260:	b2c9      	uxtb	r1, r1
 8004262:	4402      	add	r2, r0
 8004264:	4293      	cmp	r3, r2
 8004266:	4618      	mov	r0, r3
 8004268:	d101      	bne.n	800426e <memchr+0x12>
 800426a:	2000      	movs	r0, #0
 800426c:	e003      	b.n	8004276 <memchr+0x1a>
 800426e:	7804      	ldrb	r4, [r0, #0]
 8004270:	3301      	adds	r3, #1
 8004272:	428c      	cmp	r4, r1
 8004274:	d1f6      	bne.n	8004264 <memchr+0x8>
 8004276:	bd10      	pop	{r4, pc}

08004278 <_realloc_r>:
 8004278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800427c:	4680      	mov	r8, r0
 800427e:	4615      	mov	r5, r2
 8004280:	460c      	mov	r4, r1
 8004282:	b921      	cbnz	r1, 800428e <_realloc_r+0x16>
 8004284:	4611      	mov	r1, r2
 8004286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800428a:	f7ff bc47 	b.w	8003b1c <_malloc_r>
 800428e:	b92a      	cbnz	r2, 800429c <_realloc_r+0x24>
 8004290:	f7ff fbda 	bl	8003a48 <_free_r>
 8004294:	2400      	movs	r4, #0
 8004296:	4620      	mov	r0, r4
 8004298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800429c:	f000 f81a 	bl	80042d4 <_malloc_usable_size_r>
 80042a0:	4285      	cmp	r5, r0
 80042a2:	4606      	mov	r6, r0
 80042a4:	d802      	bhi.n	80042ac <_realloc_r+0x34>
 80042a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80042aa:	d8f4      	bhi.n	8004296 <_realloc_r+0x1e>
 80042ac:	4629      	mov	r1, r5
 80042ae:	4640      	mov	r0, r8
 80042b0:	f7ff fc34 	bl	8003b1c <_malloc_r>
 80042b4:	4607      	mov	r7, r0
 80042b6:	2800      	cmp	r0, #0
 80042b8:	d0ec      	beq.n	8004294 <_realloc_r+0x1c>
 80042ba:	42b5      	cmp	r5, r6
 80042bc:	462a      	mov	r2, r5
 80042be:	4621      	mov	r1, r4
 80042c0:	bf28      	it	cs
 80042c2:	4632      	movcs	r2, r6
 80042c4:	f7ff fbb2 	bl	8003a2c <memcpy>
 80042c8:	4621      	mov	r1, r4
 80042ca:	4640      	mov	r0, r8
 80042cc:	f7ff fbbc 	bl	8003a48 <_free_r>
 80042d0:	463c      	mov	r4, r7
 80042d2:	e7e0      	b.n	8004296 <_realloc_r+0x1e>

080042d4 <_malloc_usable_size_r>:
 80042d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042d8:	1f18      	subs	r0, r3, #4
 80042da:	2b00      	cmp	r3, #0
 80042dc:	bfbc      	itt	lt
 80042de:	580b      	ldrlt	r3, [r1, r0]
 80042e0:	18c0      	addlt	r0, r0, r3
 80042e2:	4770      	bx	lr

080042e4 <_init>:
 80042e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e6:	bf00      	nop
 80042e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ea:	bc08      	pop	{r3}
 80042ec:	469e      	mov	lr, r3
 80042ee:	4770      	bx	lr

080042f0 <_fini>:
 80042f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042f2:	bf00      	nop
 80042f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f6:	bc08      	pop	{r3}
 80042f8:	469e      	mov	lr, r3
 80042fa:	4770      	bx	lr
