
CAN2RS_Translator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000380c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08003918  08003918  00004918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a40  08003a40  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003a40  08003a40  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003a40  08003a40  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a40  08003a40  00004a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a44  08003a44  00004a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003a48  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b00  2000005c  08003aa4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b5c  08003aa4  00005b5c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a792  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002234  00000000  00000000  0000f817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00011a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006b0  00000000  00000000  00012320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180b4  00000000  00000000  000129d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d7b7  00000000  00000000  0002aa84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084de9  00000000  00000000  0003823b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd024  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002730  00000000  00000000  000bd068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000bf798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003900 	.word	0x08003900

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08003900 	.word	0x08003900

0800014c <CAN_Init>:
static CAN_RxHeaderTypeDef RxHeader;
static uint8_t rxBuf[8];
static volatile bool newMsg = false;

void CAN_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b08c      	sub	sp, #48	@ 0x30
 8000150:	af00      	add	r7, sp, #0
  __HAL_RCC_CAN1_CLK_ENABLE();
 8000152:	4b2f      	ldr	r3, [pc, #188]	@ (8000210 <CAN_Init+0xc4>)
 8000154:	69db      	ldr	r3, [r3, #28]
 8000156:	4a2e      	ldr	r2, [pc, #184]	@ (8000210 <CAN_Init+0xc4>)
 8000158:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800015c:	61d3      	str	r3, [r2, #28]
 800015e:	4b2c      	ldr	r3, [pc, #176]	@ (8000210 <CAN_Init+0xc4>)
 8000160:	69db      	ldr	r3, [r3, #28]
 8000162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]
  hcan1.Instance = CAN1;
 800016a:	4b2a      	ldr	r3, [pc, #168]	@ (8000214 <CAN_Init+0xc8>)
 800016c:	4a2a      	ldr	r2, [pc, #168]	@ (8000218 <CAN_Init+0xcc>)
 800016e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;              // 36MHz / 6 = 6MHz -> 1Mbps (CAN)
 8000170:	4b28      	ldr	r3, [pc, #160]	@ (8000214 <CAN_Init+0xc8>)
 8000172:	2206      	movs	r2, #6
 8000174:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode      = CAN_MODE_NORMAL;
 8000176:	4b27      	ldr	r3, [pc, #156]	@ (8000214 <CAN_Init+0xc8>)
 8000178:	2200      	movs	r2, #0
 800017a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800017c:	4b25      	ldr	r3, [pc, #148]	@ (8000214 <CAN_Init+0xc8>)
 800017e:	2200      	movs	r2, #0
 8000180:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1     = CAN_BS1_8TQ;
 8000182:	4b24      	ldr	r3, [pc, #144]	@ (8000214 <CAN_Init+0xc8>)
 8000184:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 8000188:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2     = CAN_BS2_3TQ;
 800018a:	4b22      	ldr	r3, [pc, #136]	@ (8000214 <CAN_Init+0xc8>)
 800018c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000190:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000192:	4b20      	ldr	r3, [pc, #128]	@ (8000214 <CAN_Init+0xc8>)
 8000194:	2200      	movs	r2, #0
 8000196:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff      = ENABLE;
 8000198:	4b1e      	ldr	r3, [pc, #120]	@ (8000214 <CAN_Init+0xc8>)
 800019a:	2201      	movs	r2, #1
 800019c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp      = DISABLE;
 800019e:	4b1d      	ldr	r3, [pc, #116]	@ (8000214 <CAN_Init+0xc8>)
 80001a0:	2200      	movs	r2, #0
 80001a2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80001a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000214 <CAN_Init+0xc8>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked  = DISABLE;
 80001aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000214 <CAN_Init+0xc8>)
 80001ac:	2200      	movs	r2, #0
 80001ae:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80001b0:	4b18      	ldr	r3, [pc, #96]	@ (8000214 <CAN_Init+0xc8>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	775a      	strb	r2, [r3, #29]
  HAL_CAN_Init(&hcan1);
 80001b6:	4817      	ldr	r0, [pc, #92]	@ (8000214 <CAN_Init+0xc8>)
 80001b8:	f000 fee8 	bl	8000f8c <HAL_CAN_Init>

  // Фильтр: принять всё
  CAN_FilterTypeDef filt = {0};
 80001bc:	f107 0308 	add.w	r3, r7, #8
 80001c0:	2228      	movs	r2, #40	@ 0x28
 80001c2:	2100      	movs	r1, #0
 80001c4:	4618      	mov	r0, r3
 80001c6:	f002 ff0b 	bl	8002fe0 <memset>
  filt.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  filt.FilterIdHigh   = 0;
 80001ce:	2300      	movs	r3, #0
 80001d0:	60bb      	str	r3, [r7, #8]
  filt.FilterIdLow    = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	60fb      	str	r3, [r7, #12]
  filt.FilterMaskIdHigh= 0;
 80001d6:	2300      	movs	r3, #0
 80001d8:	613b      	str	r3, [r7, #16]
  filt.FilterMaskIdLow = 0;
 80001da:	2300      	movs	r3, #0
 80001dc:	617b      	str	r3, [r7, #20]
  filt.FilterBank     = 0;
 80001de:	2300      	movs	r3, #0
 80001e0:	61fb      	str	r3, [r7, #28]
  filt.FilterMode     = CAN_FILTERMODE_IDMASK;
 80001e2:	2300      	movs	r3, #0
 80001e4:	623b      	str	r3, [r7, #32]
  filt.FilterScale    = CAN_FILTERSCALE_32BIT;
 80001e6:	2301      	movs	r3, #1
 80001e8:	627b      	str	r3, [r7, #36]	@ 0x24
  filt.FilterActivation = ENABLE;
 80001ea:	2301      	movs	r3, #1
 80001ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_CAN_ConfigFilter(&hcan1, &filt);
 80001ee:	f107 0308 	add.w	r3, r7, #8
 80001f2:	4619      	mov	r1, r3
 80001f4:	4807      	ldr	r0, [pc, #28]	@ (8000214 <CAN_Init+0xc8>)
 80001f6:	f000 ffc4 	bl	8001182 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 80001fa:	4806      	ldr	r0, [pc, #24]	@ (8000214 <CAN_Init+0xc8>)
 80001fc:	f001 f88a 	bl	8001314 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000200:	2102      	movs	r1, #2
 8000202:	4804      	ldr	r0, [pc, #16]	@ (8000214 <CAN_Init+0xc8>)
 8000204:	f001 f999 	bl	800153a <HAL_CAN_ActivateNotification>
}
 8000208:	bf00      	nop
 800020a:	3730      	adds	r7, #48	@ 0x30
 800020c:	46bd      	mov	sp, r7
 800020e:	bd80      	pop	{r7, pc}
 8000210:	40021000 	.word	0x40021000
 8000214:	20000078 	.word	0x20000078
 8000218:	40006400 	.word	0x40006400

0800021c <CAN_Send>:

HAL_StatusTypeDef CAN_Send(uint16_t id, uint8_t *buf, uint8_t len)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b08a      	sub	sp, #40	@ 0x28
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	6039      	str	r1, [r7, #0]
 8000226:	80fb      	strh	r3, [r7, #6]
 8000228:	4613      	mov	r3, r2
 800022a:	717b      	strb	r3, [r7, #5]
  CAN_TxHeaderTypeDef txh = {0};
 800022c:	f107 0310 	add.w	r3, r7, #16
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
 8000234:	605a      	str	r2, [r3, #4]
 8000236:	609a      	str	r2, [r3, #8]
 8000238:	60da      	str	r2, [r3, #12]
 800023a:	611a      	str	r2, [r3, #16]
 800023c:	615a      	str	r2, [r3, #20]
  uint32_t mailbox;
  txh.StdId = id & 0x7FF;
 800023e:	88fb      	ldrh	r3, [r7, #6]
 8000240:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000244:	613b      	str	r3, [r7, #16]
  txh.IDE   = CAN_ID_STD;
 8000246:	2300      	movs	r3, #0
 8000248:	61bb      	str	r3, [r7, #24]
  txh.RTR   = CAN_RTR_DATA;
 800024a:	2300      	movs	r3, #0
 800024c:	61fb      	str	r3, [r7, #28]
  txh.DLC   = len;
 800024e:	797b      	ldrb	r3, [r7, #5]
 8000250:	623b      	str	r3, [r7, #32]
  return HAL_CAN_AddTxMessage(&hcan1, &txh, buf, &mailbox);
 8000252:	f107 030c 	add.w	r3, r7, #12
 8000256:	f107 0110 	add.w	r1, r7, #16
 800025a:	683a      	ldr	r2, [r7, #0]
 800025c:	4803      	ldr	r0, [pc, #12]	@ (800026c <CAN_Send+0x50>)
 800025e:	f001 f89d 	bl	800139c <HAL_CAN_AddTxMessage>
 8000262:	4603      	mov	r3, r0
}
 8000264:	4618      	mov	r0, r3
 8000266:	3728      	adds	r7, #40	@ 0x28
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}
 800026c:	20000078 	.word	0x20000078

08000270 <CAN_MessagePending>:
    newMsg = true;
  }
}

bool CAN_MessagePending(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  return newMsg;
 8000274:	4b03      	ldr	r3, [pc, #12]	@ (8000284 <CAN_MessagePending+0x14>)
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	b2db      	uxtb	r3, r3
}
 800027a:	4618      	mov	r0, r3
 800027c:	46bd      	mov	sp, r7
 800027e:	bc80      	pop	{r7}
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	200000c4 	.word	0x200000c4

08000288 <CAN_Receive>:

void CAN_Receive(uint16_t *out_id, uint8_t *buf, uint8_t *out_len)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
  newMsg = false;
 8000294:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <CAN_Receive+0x3c>)
 8000296:	2200      	movs	r2, #0
 8000298:	701a      	strb	r2, [r3, #0]
  *out_id  = RxHeader.StdId;
 800029a:	4b0b      	ldr	r3, [pc, #44]	@ (80002c8 <CAN_Receive+0x40>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	b29a      	uxth	r2, r3
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	801a      	strh	r2, [r3, #0]
  *out_len = RxHeader.DLC;
 80002a4:	4b08      	ldr	r3, [pc, #32]	@ (80002c8 <CAN_Receive+0x40>)
 80002a6:	691b      	ldr	r3, [r3, #16]
 80002a8:	b2da      	uxtb	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	701a      	strb	r2, [r3, #0]
  memcpy(buf, rxBuf, RxHeader.DLC);
 80002ae:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <CAN_Receive+0x40>)
 80002b0:	691b      	ldr	r3, [r3, #16]
 80002b2:	461a      	mov	r2, r3
 80002b4:	4905      	ldr	r1, [pc, #20]	@ (80002cc <CAN_Receive+0x44>)
 80002b6:	68b8      	ldr	r0, [r7, #8]
 80002b8:	f002 fec6 	bl	8003048 <memcpy>
}
 80002bc:	bf00      	nop
 80002be:	3710      	adds	r7, #16
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}
 80002c4:	200000c4 	.word	0x200000c4
 80002c8:	200000a0 	.word	0x200000a0
 80002cc:	200000bc 	.word	0x200000bc

080002d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80002d4:	f3bf 8f4f 	dsb	sy
}
 80002d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80002da:	4b06      	ldr	r3, [pc, #24]	@ (80002f4 <__NVIC_SystemReset+0x24>)
 80002dc:	68db      	ldr	r3, [r3, #12]
 80002de:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80002e2:	4904      	ldr	r1, [pc, #16]	@ (80002f4 <__NVIC_SystemReset+0x24>)
 80002e4:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <__NVIC_SystemReset+0x28>)
 80002e6:	4313      	orrs	r3, r2
 80002e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80002ea:	f3bf 8f4f 	dsb	sy
}
 80002ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <__NVIC_SystemReset+0x20>
 80002f4:	e000ed00 	.word	0xe000ed00
 80002f8:	05fa0004 	.word	0x05fa0004

080002fc <DEBUG_Log>:
#include "stm32f1xx_hal.h"
#include <stdarg.h>
#include <stdio.h>

void DEBUG_Log(const char *fmt, ...)
{
 80002fc:	b40f      	push	{r0, r1, r2, r3}
 80002fe:	b580      	push	{r7, lr}
 8000300:	b0a2      	sub	sp, #136	@ 0x88
 8000302:	af00      	add	r7, sp, #0
    char buf[128];
    va_list args;
    va_start(args, fmt);
 8000304:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000308:	603b      	str	r3, [r7, #0]
    int len = vsnprintf(buf, sizeof(buf), fmt, args);
 800030a:	1d38      	adds	r0, r7, #4
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8000312:	2180      	movs	r1, #128	@ 0x80
 8000314:	f002 fe46 	bl	8002fa4 <vsniprintf>
 8000318:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    va_end(args);

    if (len > 0) {
 800031c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000320:	2b00      	cmp	r3, #0
 8000322:	dd0a      	ble.n	800033a <DEBUG_Log+0x3e>
        // Шлём по RS-485, пин DE=1/0 управляется внутри UART_Send()
        UART_Send((uint8_t*)buf, (uint16_t)len);
 8000324:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000328:	b29a      	uxth	r2, r3
 800032a:	1d3b      	adds	r3, r7, #4
 800032c:	4611      	mov	r1, r2
 800032e:	4618      	mov	r0, r3
 8000330:	f000 fd50 	bl	8000dd4 <UART_Send>
        // Даем чуть-чуть времени для передачи, можно убрать при уверенности в DMA
        HAL_Delay(2);
 8000334:	2002      	movs	r0, #2
 8000336:	f000 fe05 	bl	8000f44 <HAL_Delay>
    }
}
 800033a:	bf00      	nop
 800033c:	3788      	adds	r7, #136	@ 0x88
 800033e:	46bd      	mov	sp, r7
 8000340:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000344:	b004      	add	sp, #16
 8000346:	4770      	bx	lr

08000348 <DEBUG_SelfTest>:

void DEBUG_SelfTest(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    uint32_t now = HAL_GetTick();
 800034e:	f000 fdef 	bl	8000f30 <HAL_GetTick>
 8000352:	6078      	str	r0, [r7, #4]
    if (now - last_tick < 1000) return;
 8000354:	4b0f      	ldr	r3, [pc, #60]	@ (8000394 <DEBUG_SelfTest+0x4c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	1ad3      	subs	r3, r2, r3
 800035c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000360:	d314      	bcc.n	800038c <DEBUG_SelfTest+0x44>
    last_tick = now;
 8000362:	4a0c      	ldr	r2, [pc, #48]	@ (8000394 <DEBUG_SelfTest+0x4c>)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	6013      	str	r3, [r2, #0]

    // Простейший «heartbeat»
    DEBUG_Log("DBG: heartbeat %lu\r\n", now);
 8000368:	6879      	ldr	r1, [r7, #4]
 800036a:	480b      	ldr	r0, [pc, #44]	@ (8000398 <DEBUG_SelfTest+0x50>)
 800036c:	f7ff ffc6 	bl	80002fc <DEBUG_Log>
    // если что-то не так — сброситься:
#if 1
    // Пример проверки UART1 error-состояния
    // (HAL_UART_STATE_ERROR не всегда актуально, но можно расширить)
    extern UART_HandleTypeDef huart1;
    if (huart1.gState == HAL_UART_STATE_ERROR) {
 8000370:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <DEBUG_SelfTest+0x54>)
 8000372:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000376:	b2db      	uxtb	r3, r3
 8000378:	2be0      	cmp	r3, #224	@ 0xe0
 800037a:	d108      	bne.n	800038e <DEBUG_SelfTest+0x46>
        DEBUG_Log("DBG: UART1 error -> reset\r\n");
 800037c:	4808      	ldr	r0, [pc, #32]	@ (80003a0 <DEBUG_SelfTest+0x58>)
 800037e:	f7ff ffbd 	bl	80002fc <DEBUG_Log>
        HAL_Delay(5);
 8000382:	2005      	movs	r0, #5
 8000384:	f000 fdde 	bl	8000f44 <HAL_Delay>
        NVIC_SystemReset();
 8000388:	f7ff ffa2 	bl	80002d0 <__NVIC_SystemReset>
    if (now - last_tick < 1000) return;
 800038c:	bf00      	nop
    }
#endif
}
 800038e:	3708      	adds	r7, #8
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	200000c8 	.word	0x200000c8
 8000398:	08003918 	.word	0x08003918
 800039c:	20000940 	.word	0x20000940
 80003a0:	08003930 	.word	0x08003930

080003a4 <DEBUG_Init>:

/**
 * @brief Инициализация debug-модуля.
 *        UART1 уже проинициализирован в UART_Init(), здесь ничего не делаем.
 */
static inline void DEBUG_Init(void) {}
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bc80      	pop	{r7}
 80003ae:	4770      	bx	lr

080003b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b4:	f000 fd64 	bl	8000e80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b8:	f000 f826 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003bc:	f000 f8ee 	bl	800059c <MX_GPIO_Init>
  MX_DMA_Init();
 80003c0:	f000 f8c6 	bl	8000550 <MX_DMA_Init>
  MX_CAN_Init();
 80003c4:	f000 f866 	bl	8000494 <MX_CAN_Init>
  MX_USART1_UART_Init();
 80003c8:	f000 f898 	bl	80004fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80003cc:	f002 f94e 	bl	800266c <HAL_RCC_GetHCLKFreq>
 80003d0:	4603      	mov	r3, r0
 80003d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000404 <main+0x54>)
 80003d4:	fba2 2303 	umull	r2, r3, r2, r3
 80003d8:	099b      	lsrs	r3, r3, #6
 80003da:	4618      	mov	r0, r3
 80003dc:	f001 f9d3 	bl	8001786 <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80003e0:	2004      	movs	r0, #4
 80003e2:	f001 f9dd 	bl	80017a0 <HAL_SYSTICK_CLKSourceConfig>

  UART_Init();         // UART1 @1 000 000 baud, DMA RX/TX, RS-485 DE control
 80003e6:	f000 fc5f 	bl	8000ca8 <UART_Init>
  CAN_Init();          // CAN1 500 kHz (зависит от дисплея шины)
 80003ea:	f7ff feaf 	bl	800014c <CAN_Init>
  SENSOR_Init();       // Инициализация «звездного датчика» (RS-485 интерфейс)
 80003ee:	f000 f959 	bl	80006a4 <SENSOR_Init>
  DEBUG_Init();        // Инициализация отладочных модулей
 80003f2:	f7ff ffd7 	bl	80003a4 <DEBUG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	    SENSOR_Process();    // трансляция CAN↔RS485, контроль зонда
 80003f6:	f000 f993 	bl	8000720 <SENSOR_Process>
	    DEBUG_SelfTest();    // мониторинг ошибок, перезапуск при критике
 80003fa:	f7ff ffa5 	bl	8000348 <DEBUG_SelfTest>
	    SENSOR_Process();    // трансляция CAN↔RS485, контроль зонда
 80003fe:	bf00      	nop
 8000400:	e7f9      	b.n	80003f6 <main+0x46>
 8000402:	bf00      	nop
 8000404:	10624dd3 	.word	0x10624dd3

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b090      	sub	sp, #64	@ 0x40
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	2228      	movs	r2, #40	@ 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f002 fde2 	bl	8002fe0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800042a:	2301      	movs	r3, #1
 800042c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800042e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000432:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000438:	2301      	movs	r3, #1
 800043a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043c:	2302      	movs	r3, #2
 800043e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000440:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000444:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000446:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800044a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044c:	f107 0318 	add.w	r3, r7, #24
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fd4b 	bl	8001eec <HAL_RCC_OscConfig>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d001      	beq.n	8000460 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800045c:	f000 f8f6 	bl	800064c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000460:	230f      	movs	r3, #15
 8000462:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000464:	2302      	movs	r3, #2
 8000466:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800046c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000470:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000476:	1d3b      	adds	r3, r7, #4
 8000478:	2102      	movs	r1, #2
 800047a:	4618      	mov	r0, r3
 800047c:	f001 ffb8 	bl	80023f0 <HAL_RCC_ClockConfig>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000486:	f000 f8e1 	bl	800064c <Error_Handler>
  }
}
 800048a:	bf00      	nop
 800048c:	3740      	adds	r7, #64	@ 0x40
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
	...

08000494 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000498:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <MX_CAN_Init+0x60>)
 800049a:	4a17      	ldr	r2, [pc, #92]	@ (80004f8 <MX_CAN_Init+0x64>)
 800049c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004a0:	2210      	movs	r2, #16
 80004a2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80004a4:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80004b0:	4b10      	ldr	r3, [pc, #64]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80004bc:	4b0d      	ldr	r3, [pc, #52]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80004c2:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80004c8:	4b0a      	ldr	r3, [pc, #40]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80004ce:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80004d4:	4b07      	ldr	r3, [pc, #28]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80004da:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004dc:	2200      	movs	r2, #0
 80004de:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80004e0:	4804      	ldr	r0, [pc, #16]	@ (80004f4 <MX_CAN_Init+0x60>)
 80004e2:	f000 fd53 	bl	8000f8c <HAL_CAN_Init>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80004ec:	f000 f8ae 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80004f0:	bf00      	nop
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200000cc 	.word	0x200000cc
 80004f8:	40006400 	.word	0x40006400

080004fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000500:	4b10      	ldr	r3, [pc, #64]	@ (8000544 <MX_USART1_UART_Init+0x48>)
 8000502:	4a11      	ldr	r2, [pc, #68]	@ (8000548 <MX_USART1_UART_Init+0x4c>)
 8000504:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1000000;
 8000506:	4b0f      	ldr	r3, [pc, #60]	@ (8000544 <MX_USART1_UART_Init+0x48>)
 8000508:	4a10      	ldr	r2, [pc, #64]	@ (800054c <MX_USART1_UART_Init+0x50>)
 800050a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <MX_USART1_UART_Init+0x48>)
 800050e:	2200      	movs	r2, #0
 8000510:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000512:	4b0c      	ldr	r3, [pc, #48]	@ (8000544 <MX_USART1_UART_Init+0x48>)
 8000514:	2200      	movs	r2, #0
 8000516:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000518:	4b0a      	ldr	r3, [pc, #40]	@ (8000544 <MX_USART1_UART_Init+0x48>)
 800051a:	2200      	movs	r2, #0
 800051c:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <MX_USART1_UART_Init+0x48>)
 8000520:	220c      	movs	r2, #12
 8000522:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000524:	4b07      	ldr	r3, [pc, #28]	@ (8000544 <MX_USART1_UART_Init+0x48>)
 8000526:	2200      	movs	r2, #0
 8000528:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <MX_USART1_UART_Init+0x48>)
 800052c:	2200      	movs	r2, #0
 800052e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000530:	4804      	ldr	r0, [pc, #16]	@ (8000544 <MX_USART1_UART_Init+0x48>)
 8000532:	f002 f8eb 	bl	800270c <HAL_UART_Init>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 800053c:	f000 f886 	bl	800064c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	20000940 	.word	0x20000940
 8000548:	40013800 	.word	0x40013800
 800054c:	000f4240 	.word	0x000f4240

08000550 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000556:	4b10      	ldr	r3, [pc, #64]	@ (8000598 <MX_DMA_Init+0x48>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	4a0f      	ldr	r2, [pc, #60]	@ (8000598 <MX_DMA_Init+0x48>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6153      	str	r3, [r2, #20]
 8000562:	4b0d      	ldr	r3, [pc, #52]	@ (8000598 <MX_DMA_Init+0x48>)
 8000564:	695b      	ldr	r3, [r3, #20]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800056e:	2200      	movs	r2, #0
 8000570:	2100      	movs	r1, #0
 8000572:	200e      	movs	r0, #14
 8000574:	f001 f8dd 	bl	8001732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000578:	200e      	movs	r0, #14
 800057a:	f001 f8f6 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800057e:	2200      	movs	r2, #0
 8000580:	2100      	movs	r1, #0
 8000582:	200f      	movs	r0, #15
 8000584:	f001 f8d5 	bl	8001732 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000588:	200f      	movs	r0, #15
 800058a:	f001 f8ee 	bl	800176a <HAL_NVIC_EnableIRQ>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40021000 	.word	0x40021000

0800059c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b0:	4b24      	ldr	r3, [pc, #144]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a23      	ldr	r2, [pc, #140]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005b6:	f043 0310 	orr.w	r3, r3, #16
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b21      	ldr	r3, [pc, #132]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f003 0310 	and.w	r3, r3, #16
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005c8:	4b1e      	ldr	r3, [pc, #120]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6193      	str	r3, [r2, #24]
 80005d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	f003 0320 	and.w	r3, r3, #32
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e0:	4b18      	ldr	r3, [pc, #96]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	4a17      	ldr	r2, [pc, #92]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005e6:	f043 0304 	orr.w	r3, r3, #4
 80005ea:	6193      	str	r3, [r2, #24]
 80005ec:	4b15      	ldr	r3, [pc, #84]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005ee:	699b      	ldr	r3, [r3, #24]
 80005f0:	f003 0304 	and.w	r3, r3, #4
 80005f4:	607b      	str	r3, [r7, #4]
 80005f6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f8:	4b12      	ldr	r3, [pc, #72]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005fa:	699b      	ldr	r3, [r3, #24]
 80005fc:	4a11      	ldr	r2, [pc, #68]	@ (8000644 <MX_GPIO_Init+0xa8>)
 80005fe:	f043 0308 	orr.w	r3, r3, #8
 8000602:	6193      	str	r3, [r2, #24]
 8000604:	4b0f      	ldr	r3, [pc, #60]	@ (8000644 <MX_GPIO_Init+0xa8>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0308 	and.w	r3, r3, #8
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000616:	480c      	ldr	r0, [pc, #48]	@ (8000648 <MX_GPIO_Init+0xac>)
 8000618:	f001 fc50 	bl	8001ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800061c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000620:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2302      	movs	r3, #2
 800062c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062e:	f107 0310 	add.w	r3, r7, #16
 8000632:	4619      	mov	r1, r3
 8000634:	4804      	ldr	r0, [pc, #16]	@ (8000648 <MX_GPIO_Init+0xac>)
 8000636:	f001 fabd 	bl	8001bb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800063a:	bf00      	nop
 800063c:	3720      	adds	r7, #32
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000
 8000648:	40011000 	.word	0x40011000

0800064c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000654:	bf00      	nop
 8000656:	e7fd      	b.n	8000654 <Error_Handler+0x8>

08000658 <endswith>:

/**
 * @brief  Проверяет, завершилась ли в ac_buf фраза pat
 */
static bool endswith(const char *pat, int pat_len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
  if (ac_len < pat_len) return false;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <endswith+0x44>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	429a      	cmp	r2, r3
 800066a:	dd01      	ble.n	8000670 <endswith+0x18>
 800066c:	2300      	movs	r3, #0
 800066e:	e010      	b.n	8000692 <endswith+0x3a>
  return memcmp(&ac_buf[ac_len - pat_len], pat, pat_len) == 0;
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <endswith+0x44>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	4a09      	ldr	r2, [pc, #36]	@ (80006a0 <endswith+0x48>)
 800067a:	4413      	add	r3, r2
 800067c:	683a      	ldr	r2, [r7, #0]
 800067e:	6879      	ldr	r1, [r7, #4]
 8000680:	4618      	mov	r0, r3
 8000682:	f002 fc9d 	bl	8002fc0 <memcmp>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	bf0c      	ite	eq
 800068c:	2301      	moveq	r3, #1
 800068e:	2300      	movne	r3, #0
 8000690:	b2db      	uxtb	r3, r3
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000120 	.word	0x20000120
 80006a0:	20000100 	.word	0x20000100

080006a4 <SENSOR_Init>:

void SENSOR_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  // аппаратный ресет зонда
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80006a8:	2200      	movs	r2, #0
 80006aa:	2180      	movs	r1, #128	@ 0x80
 80006ac:	4813      	ldr	r0, [pc, #76]	@ (80006fc <SENSOR_Init+0x58>)
 80006ae:	f001 fc05 	bl	8001ebc <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80006b2:	200a      	movs	r0, #10
 80006b4:	f000 fc46 	bl	8000f44 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80006b8:	2201      	movs	r2, #1
 80006ba:	2180      	movs	r1, #128	@ 0x80
 80006bc:	480f      	ldr	r0, [pc, #60]	@ (80006fc <SENSOR_Init+0x58>)
 80006be:	f001 fbfd 	bl	8001ebc <HAL_GPIO_WritePin>

  // начальные состояния
  uart_last_idx       = UART_RX_BUFSIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <SENSOR_Init+0x5c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80006cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000704 <SENSOR_Init+0x60>)
 80006ce:	6013      	str	r3, [r2, #0]
  last_req_tick       = HAL_GetTick();
 80006d0:	f000 fc2e 	bl	8000f30 <HAL_GetTick>
 80006d4:	4603      	mov	r3, r0
 80006d6:	4a0c      	ldr	r2, [pc, #48]	@ (8000708 <SENSOR_Init+0x64>)
 80006d8:	6013      	str	r3, [r2, #0]
  awaiting_sensor     = false;
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <SENSOR_Init+0x68>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
  awaiting_handshake2 = false;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <SENSOR_Init+0x6c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	701a      	strb	r2, [r3, #0]
  ac_len              = 0;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000714 <SENSOR_Init+0x70>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	601a      	str	r2, [r3, #0]
  bin_len             = 0;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <SENSOR_Init+0x74>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
  in_bin              = false;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	@ (800071c <SENSOR_Init+0x78>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40010c00 	.word	0x40010c00
 8000700:	20000988 	.word	0x20000988
 8000704:	200000f4 	.word	0x200000f4
 8000708:	200000f8 	.word	0x200000f8
 800070c:	200000fc 	.word	0x200000fc
 8000710:	200000fd 	.word	0x200000fd
 8000714:	20000120 	.word	0x20000120
 8000718:	20000534 	.word	0x20000534
 800071c:	20000538 	.word	0x20000538

08000720 <SENSOR_Process>:

void SENSOR_Process(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b088      	sub	sp, #32
 8000724:	af00      	add	r7, sp, #0
  // 1) Прочитать все новые байты из UART1/DMA circular
  uint32_t cur_idx = UART_RX_BUFSIZE - __HAL_DMA_GET_COUNTER(&hdma_usart1_rx);
 8000726:	4b78      	ldr	r3, [pc, #480]	@ (8000908 <SENSOR_Process+0x1e8>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 8000730:	61fb      	str	r3, [r7, #28]

  while (uart_last_idx != cur_idx)
 8000732:	e0ae      	b.n	8000892 <SENSOR_Process+0x172>
  {
    uint8_t b = uart_rx_buf[uart_last_idx++];
 8000734:	4b75      	ldr	r3, [pc, #468]	@ (800090c <SENSOR_Process+0x1ec>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	4974      	ldr	r1, [pc, #464]	@ (800090c <SENSOR_Process+0x1ec>)
 800073c:	600a      	str	r2, [r1, #0]
 800073e:	4a74      	ldr	r2, [pc, #464]	@ (8000910 <SENSOR_Process+0x1f0>)
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	76fb      	strb	r3, [r7, #27]
    if (uart_last_idx >= UART_RX_BUFSIZE) uart_last_idx = 0;
 8000744:	4b71      	ldr	r3, [pc, #452]	@ (800090c <SENSOR_Process+0x1ec>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800074c:	d302      	bcc.n	8000754 <SENSOR_Process+0x34>
 800074e:	4b6f      	ldr	r3, [pc, #444]	@ (800090c <SENSOR_Process+0x1ec>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]

    // если находим PREAMBLE — переходим в разбор бинарного фрейма
    if (!in_bin && b == PREAMBLE)
 8000754:	4b6f      	ldr	r3, [pc, #444]	@ (8000914 <SENSOR_Process+0x1f4>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	f083 0301 	eor.w	r3, r3, #1
 800075c:	b2db      	uxtb	r3, r3
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00f      	beq.n	8000782 <SENSOR_Process+0x62>
 8000762:	7efb      	ldrb	r3, [r7, #27]
 8000764:	2baa      	cmp	r3, #170	@ 0xaa
 8000766:	d10c      	bne.n	8000782 <SENSOR_Process+0x62>
    {
      in_bin    = true;
 8000768:	4b6a      	ldr	r3, [pc, #424]	@ (8000914 <SENSOR_Process+0x1f4>)
 800076a:	2201      	movs	r2, #1
 800076c:	701a      	strb	r2, [r3, #0]
      bin_len   = 1;
 800076e:	4b6a      	ldr	r3, [pc, #424]	@ (8000918 <SENSOR_Process+0x1f8>)
 8000770:	2201      	movs	r2, #1
 8000772:	601a      	str	r2, [r3, #0]
      bin_buf[0]= PREAMBLE;
 8000774:	4b69      	ldr	r3, [pc, #420]	@ (800091c <SENSOR_Process+0x1fc>)
 8000776:	22aa      	movs	r2, #170	@ 0xaa
 8000778:	701a      	strb	r2, [r3, #0]
      // сбрасываем ASCII-буфер
      ac_len = 0;
 800077a:	4b69      	ldr	r3, [pc, #420]	@ (8000920 <SENSOR_Process+0x200>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
      continue;
 8000780:	e087      	b.n	8000892 <SENSOR_Process+0x172>
    }

    // 1.1) разбор бинарника
    if (in_bin)
 8000782:	4b64      	ldr	r3, [pc, #400]	@ (8000914 <SENSOR_Process+0x1f4>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d03e      	beq.n	8000808 <SENSOR_Process+0xe8>
    {
      bin_buf[bin_len++] = b;
 800078a:	4b63      	ldr	r3, [pc, #396]	@ (8000918 <SENSOR_Process+0x1f8>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	4961      	ldr	r1, [pc, #388]	@ (8000918 <SENSOR_Process+0x1f8>)
 8000792:	600a      	str	r2, [r1, #0]
 8000794:	4961      	ldr	r1, [pc, #388]	@ (800091c <SENSOR_Process+0x1fc>)
 8000796:	7efa      	ldrb	r2, [r7, #27]
 8000798:	54ca      	strb	r2, [r1, r3]
      if (bin_len == 8)
      {
        // заголовок прочитан — в полях 6–7 лежит длина payload
      }
      // ожидаем header(8) + data + CRC(2)
      uint16_t dlen = bin_buf[6] | (bin_buf[7] << 8);
 800079a:	4b60      	ldr	r3, [pc, #384]	@ (800091c <SENSOR_Process+0x1fc>)
 800079c:	799b      	ldrb	r3, [r3, #6]
 800079e:	b21a      	sxth	r2, r3
 80007a0:	4b5e      	ldr	r3, [pc, #376]	@ (800091c <SENSOR_Process+0x1fc>)
 80007a2:	79db      	ldrb	r3, [r3, #7]
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	b21b      	sxth	r3, r3
 80007a8:	4313      	orrs	r3, r2
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	833b      	strh	r3, [r7, #24]
      if (bin_len >= 8 + dlen + 2)
 80007ae:	8b3b      	ldrh	r3, [r7, #24]
 80007b0:	f103 0209 	add.w	r2, r3, #9
 80007b4:	4b58      	ldr	r3, [pc, #352]	@ (8000918 <SENSOR_Process+0x1f8>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	da69      	bge.n	8000890 <SENSOR_Process+0x170>
      {
        // got full frame
        if (awaiting_sensor && awaiting_handshake2)
 80007bc:	4b59      	ldr	r3, [pc, #356]	@ (8000924 <SENSOR_Process+0x204>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d00e      	beq.n	80007e2 <SENSOR_Process+0xc2>
 80007c4:	4b58      	ldr	r3, [pc, #352]	@ (8000928 <SENSOR_Process+0x208>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d00a      	beq.n	80007e2 <SENSOR_Process+0xc2>
        {
          // ответ на «А датчик работает?»
          UART_Send((uint8_t*)"И датчик работает", 18);
 80007cc:	2112      	movs	r1, #18
 80007ce:	4857      	ldr	r0, [pc, #348]	@ (800092c <SENSOR_Process+0x20c>)
 80007d0:	f000 fb00 	bl	8000dd4 <UART_Send>
          awaiting_sensor     = false;
 80007d4:	4b53      	ldr	r3, [pc, #332]	@ (8000924 <SENSOR_Process+0x204>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	701a      	strb	r2, [r3, #0]
          awaiting_handshake2 = false;
 80007da:	4b53      	ldr	r3, [pc, #332]	@ (8000928 <SENSOR_Process+0x208>)
 80007dc:	2200      	movs	r2, #0
 80007de:	701a      	strb	r2, [r3, #0]
 80007e0:	e00b      	b.n	80007fa <SENSOR_Process+0xda>
        else
        {
          // Forward first 8 bytes to CAN
          CAN_Send(SENSOR_CAN_TX_ID,
                   bin_buf,
                   (bin_len > 8 ? 8 : bin_len));
 80007e2:	4b4d      	ldr	r3, [pc, #308]	@ (8000918 <SENSOR_Process+0x1f8>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b08      	cmp	r3, #8
 80007e8:	bfa8      	it	ge
 80007ea:	2308      	movge	r3, #8
          CAN_Send(SENSOR_CAN_TX_ID,
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	461a      	mov	r2, r3
 80007f0:	494a      	ldr	r1, [pc, #296]	@ (800091c <SENSOR_Process+0x1fc>)
 80007f2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80007f6:	f7ff fd11 	bl	800021c <CAN_Send>
        }
        in_bin  = false;
 80007fa:	4b46      	ldr	r3, [pc, #280]	@ (8000914 <SENSOR_Process+0x1f4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
        bin_len = 0;
 8000800:	4b45      	ldr	r3, [pc, #276]	@ (8000918 <SENSOR_Process+0x1f8>)
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
      }
      continue;
 8000806:	e043      	b.n	8000890 <SENSOR_Process+0x170>
    }

    // 1.2) разбор ASCII-символа
    if (b >= 32 && b <= 126 && ac_len < (int)sizeof(ac_buf))
 8000808:	7efb      	ldrb	r3, [r7, #27]
 800080a:	2b1f      	cmp	r3, #31
 800080c:	d941      	bls.n	8000892 <SENSOR_Process+0x172>
 800080e:	7efb      	ldrb	r3, [r7, #27]
 8000810:	2b7e      	cmp	r3, #126	@ 0x7e
 8000812:	d83e      	bhi.n	8000892 <SENSOR_Process+0x172>
 8000814:	4b42      	ldr	r3, [pc, #264]	@ (8000920 <SENSOR_Process+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b1f      	cmp	r3, #31
 800081a:	dc3a      	bgt.n	8000892 <SENSOR_Process+0x172>
    {
      ac_buf[ac_len++] = (char)b;
 800081c:	4b40      	ldr	r3, [pc, #256]	@ (8000920 <SENSOR_Process+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1c5a      	adds	r2, r3, #1
 8000822:	493f      	ldr	r1, [pc, #252]	@ (8000920 <SENSOR_Process+0x200>)
 8000824:	600a      	str	r2, [r1, #0]
 8000826:	4942      	ldr	r1, [pc, #264]	@ (8000930 <SENSOR_Process+0x210>)
 8000828:	7efa      	ldrb	r2, [r7, #27]
 800082a:	54ca      	strb	r2, [r1, r3]

      // Сценарий 1: «Работаешь?»
      if (endswith("Работаешь?", 10))
 800082c:	210a      	movs	r1, #10
 800082e:	4841      	ldr	r0, [pc, #260]	@ (8000934 <SENSOR_Process+0x214>)
 8000830:	f7ff ff12 	bl	8000658 <endswith>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d007      	beq.n	800084a <SENSOR_Process+0x12a>
      {
        UART_Send((uint8_t*)"Работаю!", 8);
 800083a:	2108      	movs	r1, #8
 800083c:	483e      	ldr	r0, [pc, #248]	@ (8000938 <SENSOR_Process+0x218>)
 800083e:	f000 fac9 	bl	8000dd4 <UART_Send>
        ac_len = 0;
 8000842:	4b37      	ldr	r3, [pc, #220]	@ (8000920 <SENSOR_Process+0x200>)
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
        continue;
 8000848:	e023      	b.n	8000892 <SENSOR_Process+0x172>
      }

      // Сценарий 2: «А датчик работает?»
      if (endswith("А датчик работает?", 19))
 800084a:	2113      	movs	r1, #19
 800084c:	483b      	ldr	r0, [pc, #236]	@ (800093c <SENSOR_Process+0x21c>)
 800084e:	f7ff ff03 	bl	8000658 <endswith>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d01c      	beq.n	8000892 <SENSOR_Process+0x172>
      {
        // соберём фрейм запроса 0x04 без payload
        uint8_t req04[] = {
 8000858:	4a39      	ldr	r2, [pc, #228]	@ (8000940 <SENSOR_Process+0x220>)
 800085a:	f107 0310 	add.w	r3, r7, #16
 800085e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000862:	e883 0003 	stmia.w	r3, {r0, r1}
          0x00,    // src
          0x00,0x00,
          0x04,    // команда
          0x00,0x00 // length=0
        };
        UART_Send(req04, sizeof(req04));
 8000866:	f107 0310 	add.w	r3, r7, #16
 800086a:	2108      	movs	r1, #8
 800086c:	4618      	mov	r0, r3
 800086e:	f000 fab1 	bl	8000dd4 <UART_Send>
        awaiting_sensor     = true;
 8000872:	4b2c      	ldr	r3, [pc, #176]	@ (8000924 <SENSOR_Process+0x204>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
        awaiting_handshake2 = true;
 8000878:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <SENSOR_Process+0x208>)
 800087a:	2201      	movs	r2, #1
 800087c:	701a      	strb	r2, [r3, #0]
        last_req_tick       = HAL_GetTick();
 800087e:	f000 fb57 	bl	8000f30 <HAL_GetTick>
 8000882:	4603      	mov	r3, r0
 8000884:	4a2f      	ldr	r2, [pc, #188]	@ (8000944 <SENSOR_Process+0x224>)
 8000886:	6013      	str	r3, [r2, #0]
        ac_len = 0;
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <SENSOR_Process+0x200>)
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
        continue;
 800088e:	e000      	b.n	8000892 <SENSOR_Process+0x172>
      continue;
 8000890:	bf00      	nop
  while (uart_last_idx != cur_idx)
 8000892:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <SENSOR_Process+0x1ec>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	69fa      	ldr	r2, [r7, #28]
 8000898:	429a      	cmp	r2, r3
 800089a:	f47f af4b 	bne.w	8000734 <SENSOR_Process+0x14>

    // else: игнорируем прочие байты
  }

  // 2) CAN → UART
  if (CAN_MessagePending())
 800089e:	f7ff fce7 	bl	8000270 <CAN_MessagePending>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d019      	beq.n	80008dc <SENSOR_Process+0x1bc>
  {
    uint16_t id; uint8_t buf[8], len;
    CAN_Receive(&id, buf, &len);
 80008a8:	1cfa      	adds	r2, r7, #3
 80008aa:	1d39      	adds	r1, r7, #4
 80008ac:	f107 030e 	add.w	r3, r7, #14
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fce9 	bl	8000288 <CAN_Receive>
    if (id == SENSOR_CAN_RX_ID)
 80008b6:	89fb      	ldrh	r3, [r7, #14]
 80008b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008bc:	d10e      	bne.n	80008dc <SENSOR_Process+0x1bc>
    {
      UART_Send(buf, len);
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	461a      	mov	r2, r3
 80008c2:	1d3b      	adds	r3, r7, #4
 80008c4:	4611      	mov	r1, r2
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fa84 	bl	8000dd4 <UART_Send>
      awaiting_sensor = true;
 80008cc:	4b15      	ldr	r3, [pc, #84]	@ (8000924 <SENSOR_Process+0x204>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
      last_req_tick   = HAL_GetTick();
 80008d2:	f000 fb2d 	bl	8000f30 <HAL_GetTick>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000944 <SENSOR_Process+0x224>)
 80008da:	6013      	str	r3, [r2, #0]
    }
  }

  // 3) таймаут ответа zonda
  if (awaiting_sensor &&
 80008dc:	4b11      	ldr	r3, [pc, #68]	@ (8000924 <SENSOR_Process+0x204>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d00d      	beq.n	8000900 <SENSOR_Process+0x1e0>
      (HAL_GetTick() - last_req_tick > SENSOR_TIMEOUT_MS))
 80008e4:	f000 fb24 	bl	8000f30 <HAL_GetTick>
 80008e8:	4602      	mov	r2, r0
 80008ea:	4b16      	ldr	r3, [pc, #88]	@ (8000944 <SENSOR_Process+0x224>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	1ad3      	subs	r3, r2, r3
  if (awaiting_sensor &&
 80008f0:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80008f4:	d904      	bls.n	8000900 <SENSOR_Process+0x1e0>
  {
    DEBUG_Log("Sensor timeout, resetting...\r\n");
 80008f6:	4814      	ldr	r0, [pc, #80]	@ (8000948 <SENSOR_Process+0x228>)
 80008f8:	f7ff fd00 	bl	80002fc <DEBUG_Log>
    SENSOR_Init();
 80008fc:	f7ff fed2 	bl	80006a4 <SENSOR_Init>
  }
}
 8000900:	bf00      	nop
 8000902:	3720      	adds	r7, #32
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000988 	.word	0x20000988
 800090c:	200000f4 	.word	0x200000f4
 8000910:	20000540 	.word	0x20000540
 8000914:	20000538 	.word	0x20000538
 8000918:	20000534 	.word	0x20000534
 800091c:	20000124 	.word	0x20000124
 8000920:	20000120 	.word	0x20000120
 8000924:	200000fc 	.word	0x200000fc
 8000928:	200000fd 	.word	0x200000fd
 800092c:	0800394c 	.word	0x0800394c
 8000930:	20000100 	.word	0x20000100
 8000934:	08003970 	.word	0x08003970
 8000938:	08003984 	.word	0x08003984
 800093c:	08003994 	.word	0x08003994
 8000940:	080039d8 	.word	0x080039d8
 8000944:	200000f8 	.word	0x200000f8
 8000948:	080039b8 	.word	0x080039b8

0800094c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800094c:	b480      	push	{r7}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000952:	4b15      	ldr	r3, [pc, #84]	@ (80009a8 <HAL_MspInit+0x5c>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	4a14      	ldr	r2, [pc, #80]	@ (80009a8 <HAL_MspInit+0x5c>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6193      	str	r3, [r2, #24]
 800095e:	4b12      	ldr	r3, [pc, #72]	@ (80009a8 <HAL_MspInit+0x5c>)
 8000960:	699b      	ldr	r3, [r3, #24]
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	@ (80009a8 <HAL_MspInit+0x5c>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	4a0e      	ldr	r2, [pc, #56]	@ (80009a8 <HAL_MspInit+0x5c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	61d3      	str	r3, [r2, #28]
 8000976:	4b0c      	ldr	r3, [pc, #48]	@ (80009a8 <HAL_MspInit+0x5c>)
 8000978:	69db      	ldr	r3, [r3, #28]
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000982:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <HAL_MspInit+0x60>)
 8000984:	685b      	ldr	r3, [r3, #4]
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]
 8000992:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	4a04      	ldr	r2, [pc, #16]	@ (80009ac <HAL_MspInit+0x60>)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099e:	bf00      	nop
 80009a0:	3714      	adds	r7, #20
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010000 	.word	0x40010000

080009b0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	4a25      	ldr	r2, [pc, #148]	@ (8000a60 <HAL_CAN_MspInit+0xb0>)
 80009cc:	4293      	cmp	r3, r2
 80009ce:	d143      	bne.n	8000a58 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009d0:	4b24      	ldr	r3, [pc, #144]	@ (8000a64 <HAL_CAN_MspInit+0xb4>)
 80009d2:	69db      	ldr	r3, [r3, #28]
 80009d4:	4a23      	ldr	r2, [pc, #140]	@ (8000a64 <HAL_CAN_MspInit+0xb4>)
 80009d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009da:	61d3      	str	r3, [r2, #28]
 80009dc:	4b21      	ldr	r3, [pc, #132]	@ (8000a64 <HAL_CAN_MspInit+0xb4>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009e4:	613b      	str	r3, [r7, #16]
 80009e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a64 <HAL_CAN_MspInit+0xb4>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a1d      	ldr	r2, [pc, #116]	@ (8000a64 <HAL_CAN_MspInit+0xb4>)
 80009ee:	f043 0308 	orr.w	r3, r3, #8
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000a64 <HAL_CAN_MspInit+0xb4>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f003 0308 	and.w	r3, r3, #8
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000a00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	4814      	ldr	r0, [pc, #80]	@ (8000a68 <HAL_CAN_MspInit+0xb8>)
 8000a16:	f001 f8cd 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480e      	ldr	r0, [pc, #56]	@ (8000a68 <HAL_CAN_MspInit+0xb8>)
 8000a30:	f001 f8c0 	bl	8001bb4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000a34:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <HAL_CAN_MspInit+0xbc>)
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a3c:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a44:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a52:	4a06      	ldr	r2, [pc, #24]	@ (8000a6c <HAL_CAN_MspInit+0xbc>)
 8000a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a56:	6053      	str	r3, [r2, #4]

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	@ 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40006400 	.word	0x40006400
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40010c00 	.word	0x40010c00
 8000a6c:	40010000 	.word	0x40010000

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b088      	sub	sp, #32
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0310 	add.w	r3, r7, #16
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a42      	ldr	r2, [pc, #264]	@ (8000b94 <HAL_UART_MspInit+0x124>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d17d      	bne.n	8000b8c <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a90:	4b41      	ldr	r3, [pc, #260]	@ (8000b98 <HAL_UART_MspInit+0x128>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a40      	ldr	r2, [pc, #256]	@ (8000b98 <HAL_UART_MspInit+0x128>)
 8000a96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8000b98 <HAL_UART_MspInit+0x128>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <HAL_UART_MspInit+0x128>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a3a      	ldr	r2, [pc, #232]	@ (8000b98 <HAL_UART_MspInit+0x128>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b38      	ldr	r3, [pc, #224]	@ (8000b98 <HAL_UART_MspInit+0x128>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0304 	and.w	r3, r3, #4
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ac0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ac4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0310 	add.w	r3, r7, #16
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4831      	ldr	r0, [pc, #196]	@ (8000b9c <HAL_UART_MspInit+0x12c>)
 8000ad6:	f001 f86d 	bl	8001bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ade:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	f107 0310 	add.w	r3, r7, #16
 8000aec:	4619      	mov	r1, r3
 8000aee:	482b      	ldr	r0, [pc, #172]	@ (8000b9c <HAL_UART_MspInit+0x12c>)
 8000af0:	f001 f860 	bl	8001bb4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000af4:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000af6:	4a2b      	ldr	r2, [pc, #172]	@ (8000ba4 <HAL_UART_MspInit+0x134>)
 8000af8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afa:	4b29      	ldr	r3, [pc, #164]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b00:	4b27      	ldr	r3, [pc, #156]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b06:	4b26      	ldr	r3, [pc, #152]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b08:	2280      	movs	r2, #128	@ 0x80
 8000b0a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b0c:	4b24      	ldr	r3, [pc, #144]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b12:	4b23      	ldr	r3, [pc, #140]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000b18:	4b21      	ldr	r3, [pc, #132]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b1e:	4b20      	ldr	r3, [pc, #128]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b24:	481e      	ldr	r0, [pc, #120]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b26:	f000 fe57 	bl	80017d8 <HAL_DMA_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000b30:	f7ff fd8c 	bl	800064c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b38:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000b3a:	4a19      	ldr	r2, [pc, #100]	@ (8000ba0 <HAL_UART_MspInit+0x130>)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000b40:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b42:	4a1a      	ldr	r2, [pc, #104]	@ (8000bac <HAL_UART_MspInit+0x13c>)
 8000b44:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b48:	2210      	movs	r2, #16
 8000b4a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b54:	2280      	movs	r2, #128	@ 0x80
 8000b56:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b58:	4b13      	ldr	r3, [pc, #76]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000b64:	4b10      	ldr	r3, [pc, #64]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b72:	f000 fe31 	bl	80017d8 <HAL_DMA_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 8000b7c:	f7ff fd66 	bl	800064c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a09      	ldr	r2, [pc, #36]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b84:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b86:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <HAL_UART_MspInit+0x138>)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3720      	adds	r7, #32
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40013800 	.word	0x40013800
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40010800 	.word	0x40010800
 8000ba0:	20000988 	.word	0x20000988
 8000ba4:	40020058 	.word	0x40020058
 8000ba8:	200009cc 	.word	0x200009cc
 8000bac:	40020044 	.word	0x40020044

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <NMI_Handler+0x4>

08000bb8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <HardFault_Handler+0x4>

08000bc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <MemManage_Handler+0x4>

08000bc8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bc80      	pop	{r7}
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bc80      	pop	{r7}
 8000bee:	4770      	bx	lr

08000bf0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 f984 	bl	8000f0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000c0c:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <DMA1_Channel4_IRQHandler+0x10>)
 8000c0e:	f000 fe9d 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200009cc 	.word	0x200009cc

08000c1c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000c20:	4802      	ldr	r0, [pc, #8]	@ (8000c2c <DMA1_Channel5_IRQHandler+0x10>)
 8000c22:	f000 fe93 	bl	800194c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000988 	.word	0x20000988

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	@ (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	@ (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	@ (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	@ (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	@ (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f002 f9c6 	bl	8002ff0 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	@ (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	@ (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20005000 	.word	0x20005000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	2000053c 	.word	0x2000053c
 8000c98:	20000b60 	.word	0x20000b60

08000c9c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr

08000ca8 <UART_Init>:
/**
 * @brief Инициализация UART1 и DMA для RS-485.
 *        DE-контроль на PB6: при передаче DE=1, по окончании — DE=0.
 */
void UART_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
  // Тактирование USART1 и DMA1
  __HAL_RCC_USART1_CLK_ENABLE();
 8000cae:	4b40      	ldr	r3, [pc, #256]	@ (8000db0 <UART_Init+0x108>)
 8000cb0:	699b      	ldr	r3, [r3, #24]
 8000cb2:	4a3f      	ldr	r2, [pc, #252]	@ (8000db0 <UART_Init+0x108>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb8:	6193      	str	r3, [r2, #24]
 8000cba:	4b3d      	ldr	r3, [pc, #244]	@ (8000db0 <UART_Init+0x108>)
 8000cbc:	699b      	ldr	r3, [r3, #24]
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc2:	607b      	str	r3, [r7, #4]
 8000cc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	4b3a      	ldr	r3, [pc, #232]	@ (8000db0 <UART_Init+0x108>)
 8000cc8:	695b      	ldr	r3, [r3, #20]
 8000cca:	4a39      	ldr	r2, [pc, #228]	@ (8000db0 <UART_Init+0x108>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6153      	str	r3, [r2, #20]
 8000cd2:	4b37      	ldr	r3, [pc, #220]	@ (8000db0 <UART_Init+0x108>)
 8000cd4:	695b      	ldr	r3, [r3, #20]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]

  // Настройка UART1
  huart1.Instance          = USART1;
 8000cde:	4b35      	ldr	r3, [pc, #212]	@ (8000db4 <UART_Init+0x10c>)
 8000ce0:	4a35      	ldr	r2, [pc, #212]	@ (8000db8 <UART_Init+0x110>)
 8000ce2:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate     = 1000000;
 8000ce4:	4b33      	ldr	r3, [pc, #204]	@ (8000db4 <UART_Init+0x10c>)
 8000ce6:	4a35      	ldr	r2, [pc, #212]	@ (8000dbc <UART_Init+0x114>)
 8000ce8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength   = UART_WORDLENGTH_8B;
 8000cea:	4b32      	ldr	r3, [pc, #200]	@ (8000db4 <UART_Init+0x10c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits     = UART_STOPBITS_1;
 8000cf0:	4b30      	ldr	r3, [pc, #192]	@ (8000db4 <UART_Init+0x10c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity       = UART_PARITY_NONE;
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8000db4 <UART_Init+0x10c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode         = UART_MODE_TX_RX;
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	@ (8000db4 <UART_Init+0x10c>)
 8000cfe:	220c      	movs	r2, #12
 8000d00:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 8000d02:	4b2c      	ldr	r3, [pc, #176]	@ (8000db4 <UART_Init+0x10c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <UART_Init+0x10c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  HAL_UART_Init(&huart1);
 8000d0e:	4829      	ldr	r0, [pc, #164]	@ (8000db4 <UART_Init+0x10c>)
 8000d10:	f001 fcfc 	bl	800270c <HAL_UART_Init>

  // Настройка DMA RX (circular)
  hdma_usart1_rx.Instance                 = DMA1_Channel5;
 8000d14:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc0 <UART_Init+0x118>)
 8000d16:	4a2b      	ldr	r2, [pc, #172]	@ (8000dc4 <UART_Init+0x11c>)
 8000d18:	601a      	str	r2, [r3, #0]
  hdma_usart1_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8000d1a:	4b29      	ldr	r3, [pc, #164]	@ (8000dc0 <UART_Init+0x118>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  hdma_usart1_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000d20:	4b27      	ldr	r3, [pc, #156]	@ (8000dc0 <UART_Init+0x118>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hdma_usart1_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8000d26:	4b26      	ldr	r3, [pc, #152]	@ (8000dc0 <UART_Init+0x118>)
 8000d28:	2280      	movs	r2, #128	@ 0x80
 8000d2a:	60da      	str	r2, [r3, #12]
  hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d2c:	4b24      	ldr	r3, [pc, #144]	@ (8000dc0 <UART_Init+0x118>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  hdma_usart1_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000d32:	4b23      	ldr	r3, [pc, #140]	@ (8000dc0 <UART_Init+0x118>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  hdma_usart1_rx.Init.Mode                = DMA_CIRCULAR;
 8000d38:	4b21      	ldr	r3, [pc, #132]	@ (8000dc0 <UART_Init+0x118>)
 8000d3a:	2220      	movs	r2, #32
 8000d3c:	619a      	str	r2, [r3, #24]
  hdma_usart1_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <UART_Init+0x118>)
 8000d40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d44:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_usart1_rx);
 8000d46:	481e      	ldr	r0, [pc, #120]	@ (8000dc0 <UART_Init+0x118>)
 8000d48:	f000 fd46 	bl	80017d8 <HAL_DMA_Init>
  __HAL_LINKDMA(&huart1, hdmarx, hdma_usart1_rx);
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <UART_Init+0x10c>)
 8000d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dc0 <UART_Init+0x118>)
 8000d50:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d52:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <UART_Init+0x118>)
 8000d54:	4a17      	ldr	r2, [pc, #92]	@ (8000db4 <UART_Init+0x10c>)
 8000d56:	625a      	str	r2, [r3, #36]	@ 0x24

  // Настройка DMA TX (normal)
  hdma_usart1_tx.Instance                 = DMA1_Channel4;
 8000d58:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc8 <UART_Init+0x120>)
 8000d5a:	4a1c      	ldr	r2, [pc, #112]	@ (8000dcc <UART_Init+0x124>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hdma_usart1_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8000d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc8 <UART_Init+0x120>)
 8000d60:	2210      	movs	r2, #16
 8000d62:	605a      	str	r2, [r3, #4]
  hdma_usart1_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8000d64:	4b18      	ldr	r3, [pc, #96]	@ (8000dc8 <UART_Init+0x120>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  hdma_usart1_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8000d6a:	4b17      	ldr	r3, [pc, #92]	@ (8000dc8 <UART_Init+0x120>)
 8000d6c:	2280      	movs	r2, #128	@ 0x80
 8000d6e:	60da      	str	r2, [r3, #12]
  hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d70:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <UART_Init+0x120>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
  hdma_usart1_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8000d76:	4b14      	ldr	r3, [pc, #80]	@ (8000dc8 <UART_Init+0x120>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	615a      	str	r2, [r3, #20]
  hdma_usart1_tx.Init.Mode                = DMA_NORMAL;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	@ (8000dc8 <UART_Init+0x120>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  hdma_usart1_tx.Init.Priority            = DMA_PRIORITY_MEDIUM;
 8000d82:	4b11      	ldr	r3, [pc, #68]	@ (8000dc8 <UART_Init+0x120>)
 8000d84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d88:	61da      	str	r2, [r3, #28]
  HAL_DMA_Init(&hdma_usart1_tx);
 8000d8a:	480f      	ldr	r0, [pc, #60]	@ (8000dc8 <UART_Init+0x120>)
 8000d8c:	f000 fd24 	bl	80017d8 <HAL_DMA_Init>
  __HAL_LINKDMA(&huart1, hdmatx, hdma_usart1_tx);
 8000d90:	4b08      	ldr	r3, [pc, #32]	@ (8000db4 <UART_Init+0x10c>)
 8000d92:	4a0d      	ldr	r2, [pc, #52]	@ (8000dc8 <UART_Init+0x120>)
 8000d94:	639a      	str	r2, [r3, #56]	@ 0x38
 8000d96:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc8 <UART_Init+0x120>)
 8000d98:	4a06      	ldr	r2, [pc, #24]	@ (8000db4 <UART_Init+0x10c>)
 8000d9a:	625a      	str	r2, [r3, #36]	@ 0x24

  // Запуск приёма по DMA в circular-режиме
  HAL_UART_Receive_DMA(&huart1, uart_rx_buf, UART_RX_BUFSIZE);
 8000d9c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000da0:	490b      	ldr	r1, [pc, #44]	@ (8000dd0 <UART_Init+0x128>)
 8000da2:	4804      	ldr	r0, [pc, #16]	@ (8000db4 <UART_Init+0x10c>)
 8000da4:	f001 fd72 	bl	800288c <HAL_UART_Receive_DMA>
}
 8000da8:	bf00      	nop
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	20000940 	.word	0x20000940
 8000db8:	40013800 	.word	0x40013800
 8000dbc:	000f4240 	.word	0x000f4240
 8000dc0:	20000988 	.word	0x20000988
 8000dc4:	40020058 	.word	0x40020058
 8000dc8:	200009cc 	.word	0x200009cc
 8000dcc:	40020044 	.word	0x40020044
 8000dd0:	20000540 	.word	0x20000540

08000dd4 <UART_Send>:
 * @brief  Передача данных по UART1/RS-485.
 * @param  buf  Указатель на буфер с данными.
 * @param  len  Длина данных в байтах.
 */
void UART_Send(uint8_t *buf, uint16_t len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	460b      	mov	r3, r1
 8000dde:	807b      	strh	r3, [r7, #2]
  // DE = 1: включаем драйвер RS-485
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000de0:	2201      	movs	r2, #1
 8000de2:	2140      	movs	r1, #64	@ 0x40
 8000de4:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <UART_Send+0x2c>)
 8000de6:	f001 f869 	bl	8001ebc <HAL_GPIO_WritePin>

  // Передача по DMA
  HAL_UART_Transmit_DMA(&huart1, buf, len);
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	461a      	mov	r2, r3
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	4804      	ldr	r0, [pc, #16]	@ (8000e04 <UART_Send+0x30>)
 8000df2:	f001 fcdb 	bl	80027ac <HAL_UART_Transmit_DMA>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40010c00 	.word	0x40010c00
 8000e04:	20000940 	.word	0x20000940

08000e08 <HAL_UART_TxCpltCallback>:
 * @brief  Колбэк HAL по окончании DMA-транзакции TX.
 *         Вызывается в прерывании, когда блок данных отправлен.
 * @param  huart  Хендл UART, где завершилась передача.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1) {
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a05      	ldr	r2, [pc, #20]	@ (8000e2c <HAL_UART_TxCpltCallback+0x24>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d104      	bne.n	8000e24 <HAL_UART_TxCpltCallback+0x1c>
    // DE = 0: выключаем драйвер RS-485
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2140      	movs	r1, #64	@ 0x40
 8000e1e:	4804      	ldr	r0, [pc, #16]	@ (8000e30 <HAL_UART_TxCpltCallback+0x28>)
 8000e20:	f001 f84c 	bl	8001ebc <HAL_GPIO_WritePin>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40013800 	.word	0x40013800
 8000e30:	40010c00 	.word	0x40010c00

08000e34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e34:	f7ff ff32 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480b      	ldr	r0, [pc, #44]	@ (8000e68 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e3a:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e3c:	4a0c      	ldr	r2, [pc, #48]	@ (8000e70 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a09      	ldr	r2, [pc, #36]	@ (8000e74 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e50:	4c09      	ldr	r4, [pc, #36]	@ (8000e78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e5e:	f002 f8cd 	bl	8002ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e62:	f7ff faa5 	bl	80003b0 <main>
  bx lr
 8000e66:	4770      	bx	lr
  ldr r0, =_sdata
 8000e68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e6c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e70:	08003a48 	.word	0x08003a48
  ldr r2, =_sbss
 8000e74:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e78:	20000b5c 	.word	0x20000b5c

08000e7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e7c:	e7fe      	b.n	8000e7c <ADC1_2_IRQHandler>
	...

08000e80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e84:	4b08      	ldr	r3, [pc, #32]	@ (8000ea8 <HAL_Init+0x28>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a07      	ldr	r2, [pc, #28]	@ (8000ea8 <HAL_Init+0x28>)
 8000e8a:	f043 0310 	orr.w	r3, r3, #16
 8000e8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e90:	2003      	movs	r0, #3
 8000e92:	f000 fc43 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e96:	200f      	movs	r0, #15
 8000e98:	f000 f808 	bl	8000eac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e9c:	f7ff fd56 	bl	800094c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40022000 	.word	0x40022000

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	4b12      	ldr	r3, [pc, #72]	@ (8000f00 <HAL_InitTick+0x54>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b12      	ldr	r3, [pc, #72]	@ (8000f04 <HAL_InitTick+0x58>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc5b 	bl	8001786 <HAL_SYSTICK_Config>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00e      	b.n	8000ef8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	2b0f      	cmp	r3, #15
 8000ede:	d80a      	bhi.n	8000ef6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	6879      	ldr	r1, [r7, #4]
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f000 fc23 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_InitTick+0x5c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e000      	b.n	8000ef8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3708      	adds	r7, #8
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000008 	.word	0x20000008
 8000f08:	20000004 	.word	0x20000004

08000f0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f10:	4b05      	ldr	r3, [pc, #20]	@ (8000f28 <HAL_IncTick+0x1c>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	4a03      	ldr	r2, [pc, #12]	@ (8000f2c <HAL_IncTick+0x20>)
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000a10 	.word	0x20000a10

08000f30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return uwTick;
 8000f34:	4b02      	ldr	r3, [pc, #8]	@ (8000f40 <HAL_GetTick+0x10>)
 8000f36:	681b      	ldr	r3, [r3, #0]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	20000a10 	.word	0x20000a10

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff fff0 	bl	8000f30 <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffe0 	bl	8000f30 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008

08000f8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d101      	bne.n	8000f9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e0ed      	b.n	800117a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d102      	bne.n	8000fb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff fd00 	bl	80009b0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f042 0201 	orr.w	r2, r2, #1
 8000fbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000fc0:	f7ff ffb6 	bl	8000f30 <HAL_GetTick>
 8000fc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fc6:	e012      	b.n	8000fee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc8:	f7ff ffb2 	bl	8000f30 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b0a      	cmp	r3, #10
 8000fd4:	d90b      	bls.n	8000fee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2205      	movs	r2, #5
 8000fe6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e0c5      	b.n	800117a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0e5      	beq.n	8000fc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0202 	bic.w	r2, r2, #2
 800100a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800100c:	f7ff ff90 	bl	8000f30 <HAL_GetTick>
 8001010:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001012:	e012      	b.n	800103a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001014:	f7ff ff8c 	bl	8000f30 <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	2b0a      	cmp	r3, #10
 8001020:	d90b      	bls.n	800103a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001026:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2205      	movs	r2, #5
 8001032:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e09f      	b.n	800117a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	2b00      	cmp	r3, #0
 8001046:	d1e5      	bne.n	8001014 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	7e1b      	ldrb	r3, [r3, #24]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d108      	bne.n	8001062 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	e007      	b.n	8001072 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	7e5b      	ldrb	r3, [r3, #25]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d108      	bne.n	800108c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	e007      	b.n	800109c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800109a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7e9b      	ldrb	r3, [r3, #26]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d108      	bne.n	80010b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f042 0220 	orr.w	r2, r2, #32
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	e007      	b.n	80010c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f022 0220 	bic.w	r2, r2, #32
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	7edb      	ldrb	r3, [r3, #27]
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d108      	bne.n	80010e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0210 	bic.w	r2, r2, #16
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	e007      	b.n	80010f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0210 	orr.w	r2, r2, #16
 80010ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	7f1b      	ldrb	r3, [r3, #28]
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d108      	bne.n	800110a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0208 	orr.w	r2, r2, #8
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	e007      	b.n	800111a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 0208 	bic.w	r2, r2, #8
 8001118:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7f5b      	ldrb	r3, [r3, #29]
 800111e:	2b01      	cmp	r3, #1
 8001120:	d108      	bne.n	8001134 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f042 0204 	orr.w	r2, r2, #4
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e007      	b.n	8001144 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f022 0204 	bic.w	r2, r2, #4
 8001142:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	ea42 0103 	orr.w	r1, r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	1e5a      	subs	r2, r3, #1
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2201      	movs	r2, #1
 8001174:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001182:	b480      	push	{r7}
 8001184:	b087      	sub	sp, #28
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001198:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800119a:	7cfb      	ldrb	r3, [r7, #19]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d003      	beq.n	80011a8 <HAL_CAN_ConfigFilter+0x26>
 80011a0:	7cfb      	ldrb	r3, [r7, #19]
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	f040 80aa 	bne.w	80012fc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011ae:	f043 0201 	orr.w	r2, r3, #1
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f003 031f 	and.w	r3, r3, #31
 80011c0:	2201      	movs	r2, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43db      	mvns	r3, r3
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	69db      	ldr	r3, [r3, #28]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d123      	bne.n	800122a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	401a      	ands	r2, r3
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001204:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3248      	adds	r2, #72	@ 0x48
 800120a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800121e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001220:	6979      	ldr	r1, [r7, #20]
 8001222:	3348      	adds	r3, #72	@ 0x48
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	440b      	add	r3, r1
 8001228:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	2b01      	cmp	r3, #1
 8001230:	d122      	bne.n	8001278 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	431a      	orrs	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001252:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	3248      	adds	r2, #72	@ 0x48
 8001258:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800126c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800126e:	6979      	ldr	r1, [r7, #20]
 8001270:	3348      	adds	r3, #72	@ 0x48
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	440b      	add	r3, r1
 8001276:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d109      	bne.n	8001294 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	401a      	ands	r2, r3
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001292:	e007      	b.n	80012a4 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	431a      	orrs	r2, r3
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d109      	bne.n	80012c0 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80012be:	e007      	b.n	80012d0 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d107      	bne.n	80012e8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80012ee:	f023 0201 	bic.w	r2, r3, #1
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	e006      	b.n	800130a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001300:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
  }
}
 800130a:	4618      	mov	r0, r3
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b01      	cmp	r3, #1
 8001326:	d12e      	bne.n	8001386 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2202      	movs	r2, #2
 800132c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f022 0201 	bic.w	r2, r2, #1
 800133e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001340:	f7ff fdf6 	bl	8000f30 <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001346:	e012      	b.n	800136e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001348:	f7ff fdf2 	bl	8000f30 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b0a      	cmp	r3, #10
 8001354:	d90b      	bls.n	800136e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2205      	movs	r2, #5
 8001366:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e012      	b.n	8001394 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	d1e5      	bne.n	8001348 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	e006      	b.n	8001394 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800138a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
  }
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800139c:	b480      	push	{r7}
 800139e:	b089      	sub	sp, #36	@ 0x24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80013ba:	7ffb      	ldrb	r3, [r7, #31]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d003      	beq.n	80013c8 <HAL_CAN_AddTxMessage+0x2c>
 80013c0:	7ffb      	ldrb	r3, [r7, #31]
 80013c2:	2b02      	cmp	r3, #2
 80013c4:	f040 80ad 	bne.w	8001522 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d10a      	bne.n	80013e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d105      	bne.n	80013e8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8095 	beq.w	8001512 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80013e8:	69bb      	ldr	r3, [r7, #24]
 80013ea:	0e1b      	lsrs	r3, r3, #24
 80013ec:	f003 0303 	and.w	r3, r3, #3
 80013f0:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80013f2:	2201      	movs	r2, #1
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	409a      	lsls	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d10d      	bne.n	8001420 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800140e:	68f9      	ldr	r1, [r7, #12]
 8001410:	6809      	ldr	r1, [r1, #0]
 8001412:	431a      	orrs	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3318      	adds	r3, #24
 8001418:	011b      	lsls	r3, r3, #4
 800141a:	440b      	add	r3, r1
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	e00f      	b.n	8001440 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800142a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001430:	68f9      	ldr	r1, [r7, #12]
 8001432:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001434:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3318      	adds	r3, #24
 800143a:	011b      	lsls	r3, r3, #4
 800143c:	440b      	add	r3, r1
 800143e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6819      	ldr	r1, [r3, #0]
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	691a      	ldr	r2, [r3, #16]
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3318      	adds	r3, #24
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	440b      	add	r3, r1
 8001450:	3304      	adds	r3, #4
 8001452:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	7d1b      	ldrb	r3, [r3, #20]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d111      	bne.n	8001480 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	3318      	adds	r3, #24
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	3304      	adds	r3, #4
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	6811      	ldr	r1, [r2, #0]
 8001470:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3318      	adds	r3, #24
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	440b      	add	r3, r1
 800147c:	3304      	adds	r3, #4
 800147e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3307      	adds	r3, #7
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	061a      	lsls	r2, r3, #24
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	3306      	adds	r3, #6
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	041b      	lsls	r3, r3, #16
 8001490:	431a      	orrs	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	3305      	adds	r3, #5
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	4313      	orrs	r3, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	3204      	adds	r2, #4
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	4610      	mov	r0, r2
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	6811      	ldr	r1, [r2, #0]
 80014a8:	ea43 0200 	orr.w	r2, r3, r0
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	011b      	lsls	r3, r3, #4
 80014b0:	440b      	add	r3, r1
 80014b2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80014b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3303      	adds	r3, #3
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	061a      	lsls	r2, r3, #24
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3302      	adds	r3, #2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	041b      	lsls	r3, r3, #16
 80014c8:	431a      	orrs	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3301      	adds	r3, #1
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	4313      	orrs	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	7812      	ldrb	r2, [r2, #0]
 80014d8:	4610      	mov	r0, r2
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	6811      	ldr	r1, [r2, #0]
 80014de:	ea43 0200 	orr.w	r2, r3, r0
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	011b      	lsls	r3, r3, #4
 80014e6:	440b      	add	r3, r1
 80014e8:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80014ec:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3318      	adds	r3, #24
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	6811      	ldr	r1, [r2, #0]
 8001500:	f043 0201 	orr.w	r2, r3, #1
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3318      	adds	r3, #24
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	440b      	add	r3, r1
 800150c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	e00e      	b.n	8001530 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001516:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e006      	b.n	8001530 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
  }
}
 8001530:	4618      	mov	r0, r3
 8001532:	3724      	adds	r7, #36	@ 0x24
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr

0800153a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
 8001542:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f893 3020 	ldrb.w	r3, [r3, #32]
 800154a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d002      	beq.n	8001558 <HAL_CAN_ActivateNotification+0x1e>
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b02      	cmp	r3, #2
 8001556:	d109      	bne.n	800156c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6959      	ldr	r1, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	683a      	ldr	r2, [r7, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001568:	2300      	movs	r3, #0
 800156a:	e006      	b.n	800157a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
  }
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	bc80      	pop	{r7}
 8001582:	4770      	bx	lr

08001584 <__NVIC_SetPriorityGrouping>:
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	@ (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	@ (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4906      	ldr	r1, [pc, #24]	@ (800161c <__NVIC_EnableIRQ+0x34>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	@ (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	@ (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	@ 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	@ 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff90 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	@ (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff2d 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff42 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff90 	bl	8001674 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5f 	bl	8001620 <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff35 	bl	80015e8 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
	...

080017a0 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d106      	bne.n	80017bc <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80017ae:	4b09      	ldr	r3, [pc, #36]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a08      	ldr	r2, [pc, #32]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017b4:	f043 0304 	orr.w	r3, r3, #4
 80017b8:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80017ba:	e005      	b.n	80017c8 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80017bc:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80017c2:	f023 0304 	bic.w	r3, r3, #4
 80017c6:	6013      	str	r3, [r2, #0]
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bc80      	pop	{r7}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	e000e010 	.word	0xe000e010

080017d8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d101      	bne.n	80017ee <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e043      	b.n	8001876 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	461a      	mov	r2, r3
 80017f4:	4b22      	ldr	r3, [pc, #136]	@ (8001880 <HAL_DMA_Init+0xa8>)
 80017f6:	4413      	add	r3, r2
 80017f8:	4a22      	ldr	r2, [pc, #136]	@ (8001884 <HAL_DMA_Init+0xac>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	091b      	lsrs	r3, r3, #4
 8001800:	009a      	lsls	r2, r3, #2
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <HAL_DMA_Init+0xb0>)
 800180a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2202      	movs	r2, #2
 8001810:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001822:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001826:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001830:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800183c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	695b      	ldr	r3, [r3, #20]
 8001842:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001848:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001850:	68fa      	ldr	r2, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001874:	2300      	movs	r3, #0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	bc80      	pop	{r7}
 800187e:	4770      	bx	lr
 8001880:	bffdfff8 	.word	0xbffdfff8
 8001884:	cccccccd 	.word	0xcccccccd
 8001888:	40020000 	.word	0x40020000

0800188c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <HAL_DMA_Start_IT+0x20>
 80018a8:	2302      	movs	r3, #2
 80018aa:	e04b      	b.n	8001944 <HAL_DMA_Start_IT+0xb8>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2201      	movs	r2, #1
 80018b0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d13a      	bne.n	8001936 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2202      	movs	r2, #2
 80018c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 0201 	bic.w	r2, r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	68b9      	ldr	r1, [r7, #8]
 80018e4:	68f8      	ldr	r0, [r7, #12]
 80018e6:	f000 f937 	bl	8001b58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f042 020e 	orr.w	r2, r2, #14
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	e00f      	b.n	8001924 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0204 	bic.w	r2, r2, #4
 8001912:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 020a 	orr.w	r2, r2, #10
 8001922:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e005      	b.n	8001942 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800193e:	2302      	movs	r3, #2
 8001940:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	2204      	movs	r2, #4
 800196a:	409a      	lsls	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	4013      	ands	r3, r2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d04f      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xc8>
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d04a      	beq.n	8001a14 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0320 	and.w	r3, r3, #32
 8001988:	2b00      	cmp	r3, #0
 800198a:	d107      	bne.n	800199c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0204 	bic.w	r2, r2, #4
 800199a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a66      	ldr	r2, [pc, #408]	@ (8001b3c <HAL_DMA_IRQHandler+0x1f0>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d029      	beq.n	80019fa <HAL_DMA_IRQHandler+0xae>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a65      	ldr	r2, [pc, #404]	@ (8001b40 <HAL_DMA_IRQHandler+0x1f4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <HAL_DMA_IRQHandler+0xaa>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a63      	ldr	r2, [pc, #396]	@ (8001b44 <HAL_DMA_IRQHandler+0x1f8>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d01a      	beq.n	80019f0 <HAL_DMA_IRQHandler+0xa4>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a62      	ldr	r2, [pc, #392]	@ (8001b48 <HAL_DMA_IRQHandler+0x1fc>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d012      	beq.n	80019ea <HAL_DMA_IRQHandler+0x9e>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a60      	ldr	r2, [pc, #384]	@ (8001b4c <HAL_DMA_IRQHandler+0x200>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00a      	beq.n	80019e4 <HAL_DMA_IRQHandler+0x98>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001b50 <HAL_DMA_IRQHandler+0x204>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d102      	bne.n	80019de <HAL_DMA_IRQHandler+0x92>
 80019d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019dc:	e00e      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80019e2:	e00b      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80019e8:	e008      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019ee:	e005      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019f4:	e002      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019f6:	2340      	movs	r3, #64	@ 0x40
 80019f8:	e000      	b.n	80019fc <HAL_DMA_IRQHandler+0xb0>
 80019fa:	2304      	movs	r3, #4
 80019fc:	4a55      	ldr	r2, [pc, #340]	@ (8001b54 <HAL_DMA_IRQHandler+0x208>)
 80019fe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 8094 	beq.w	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001a12:	e08e      	b.n	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a18:	2202      	movs	r2, #2
 8001a1a:	409a      	lsls	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d056      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x186>
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d051      	beq.n	8001ad2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0320 	and.w	r3, r3, #32
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d10b      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 020a 	bic.w	r2, r2, #10
 8001a4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a38      	ldr	r2, [pc, #224]	@ (8001b3c <HAL_DMA_IRQHandler+0x1f0>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d029      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x166>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a37      	ldr	r2, [pc, #220]	@ (8001b40 <HAL_DMA_IRQHandler+0x1f4>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d022      	beq.n	8001aae <HAL_DMA_IRQHandler+0x162>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a35      	ldr	r2, [pc, #212]	@ (8001b44 <HAL_DMA_IRQHandler+0x1f8>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d01a      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x15c>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a34      	ldr	r2, [pc, #208]	@ (8001b48 <HAL_DMA_IRQHandler+0x1fc>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d012      	beq.n	8001aa2 <HAL_DMA_IRQHandler+0x156>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a32      	ldr	r2, [pc, #200]	@ (8001b4c <HAL_DMA_IRQHandler+0x200>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00a      	beq.n	8001a9c <HAL_DMA_IRQHandler+0x150>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a31      	ldr	r2, [pc, #196]	@ (8001b50 <HAL_DMA_IRQHandler+0x204>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d102      	bne.n	8001a96 <HAL_DMA_IRQHandler+0x14a>
 8001a90:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a94:	e00e      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001a96:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a9a:	e00b      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001a9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001aa0:	e008      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001aa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001aa6:	e005      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001aa8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aac:	e002      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001aae:	2320      	movs	r3, #32
 8001ab0:	e000      	b.n	8001ab4 <HAL_DMA_IRQHandler+0x168>
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	4a27      	ldr	r2, [pc, #156]	@ (8001b54 <HAL_DMA_IRQHandler+0x208>)
 8001ab6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d034      	beq.n	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ad0:	e02f      	b.n	8001b32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4013      	ands	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d028      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x1e8>
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d023      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 020e 	bic.w	r2, r2, #14
 8001afa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b04:	2101      	movs	r1, #1
 8001b06:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2201      	movs	r2, #1
 8001b10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2201      	movs	r2, #1
 8001b16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d004      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	4798      	blx	r3
    }
  }
  return;
 8001b32:	bf00      	nop
 8001b34:	bf00      	nop
}
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40020008 	.word	0x40020008
 8001b40:	4002001c 	.word	0x4002001c
 8001b44:	40020030 	.word	0x40020030
 8001b48:	40020044 	.word	0x40020044
 8001b4c:	40020058 	.word	0x40020058
 8001b50:	4002006c 	.word	0x4002006c
 8001b54:	40020000 	.word	0x40020000

08001b58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
 8001b64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b6e:	2101      	movs	r1, #1
 8001b70:	fa01 f202 	lsl.w	r2, r1, r2
 8001b74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	683a      	ldr	r2, [r7, #0]
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d108      	bne.n	8001b98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b96:	e007      	b.n	8001ba8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	60da      	str	r2, [r3, #12]
}
 8001ba8:	bf00      	nop
 8001baa:	3714      	adds	r7, #20
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bc80      	pop	{r7}
 8001bb0:	4770      	bx	lr
	...

08001bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b08b      	sub	sp, #44	@ 0x2c
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	e169      	b.n	8001e9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bc8:	2201      	movs	r2, #1
 8001bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	f040 8158 	bne.w	8001e96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a9a      	ldr	r2, [pc, #616]	@ (8001e54 <HAL_GPIO_Init+0x2a0>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d05e      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001bf0:	4a98      	ldr	r2, [pc, #608]	@ (8001e54 <HAL_GPIO_Init+0x2a0>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d875      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001bf6:	4a98      	ldr	r2, [pc, #608]	@ (8001e58 <HAL_GPIO_Init+0x2a4>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d058      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001bfc:	4a96      	ldr	r2, [pc, #600]	@ (8001e58 <HAL_GPIO_Init+0x2a4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d86f      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c02:	4a96      	ldr	r2, [pc, #600]	@ (8001e5c <HAL_GPIO_Init+0x2a8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d052      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001c08:	4a94      	ldr	r2, [pc, #592]	@ (8001e5c <HAL_GPIO_Init+0x2a8>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d869      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c0e:	4a94      	ldr	r2, [pc, #592]	@ (8001e60 <HAL_GPIO_Init+0x2ac>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d04c      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001c14:	4a92      	ldr	r2, [pc, #584]	@ (8001e60 <HAL_GPIO_Init+0x2ac>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d863      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c1a:	4a92      	ldr	r2, [pc, #584]	@ (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d046      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
 8001c20:	4a90      	ldr	r2, [pc, #576]	@ (8001e64 <HAL_GPIO_Init+0x2b0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d85d      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c26:	2b12      	cmp	r3, #18
 8001c28:	d82a      	bhi.n	8001c80 <HAL_GPIO_Init+0xcc>
 8001c2a:	2b12      	cmp	r3, #18
 8001c2c:	d859      	bhi.n	8001ce2 <HAL_GPIO_Init+0x12e>
 8001c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001c34 <HAL_GPIO_Init+0x80>)
 8001c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c34:	08001caf 	.word	0x08001caf
 8001c38:	08001c89 	.word	0x08001c89
 8001c3c:	08001c9b 	.word	0x08001c9b
 8001c40:	08001cdd 	.word	0x08001cdd
 8001c44:	08001ce3 	.word	0x08001ce3
 8001c48:	08001ce3 	.word	0x08001ce3
 8001c4c:	08001ce3 	.word	0x08001ce3
 8001c50:	08001ce3 	.word	0x08001ce3
 8001c54:	08001ce3 	.word	0x08001ce3
 8001c58:	08001ce3 	.word	0x08001ce3
 8001c5c:	08001ce3 	.word	0x08001ce3
 8001c60:	08001ce3 	.word	0x08001ce3
 8001c64:	08001ce3 	.word	0x08001ce3
 8001c68:	08001ce3 	.word	0x08001ce3
 8001c6c:	08001ce3 	.word	0x08001ce3
 8001c70:	08001ce3 	.word	0x08001ce3
 8001c74:	08001ce3 	.word	0x08001ce3
 8001c78:	08001c91 	.word	0x08001c91
 8001c7c:	08001ca5 	.word	0x08001ca5
 8001c80:	4a79      	ldr	r2, [pc, #484]	@ (8001e68 <HAL_GPIO_Init+0x2b4>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d013      	beq.n	8001cae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c86:	e02c      	b.n	8001ce2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	623b      	str	r3, [r7, #32]
          break;
 8001c8e:	e029      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	3304      	adds	r3, #4
 8001c96:	623b      	str	r3, [r7, #32]
          break;
 8001c98:	e024      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	3308      	adds	r3, #8
 8001ca0:	623b      	str	r3, [r7, #32]
          break;
 8001ca2:	e01f      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	330c      	adds	r3, #12
 8001caa:	623b      	str	r3, [r7, #32]
          break;
 8001cac:	e01a      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d102      	bne.n	8001cbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001cb6:	2304      	movs	r3, #4
 8001cb8:	623b      	str	r3, [r7, #32]
          break;
 8001cba:	e013      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d105      	bne.n	8001cd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cc4:	2308      	movs	r3, #8
 8001cc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	69fa      	ldr	r2, [r7, #28]
 8001ccc:	611a      	str	r2, [r3, #16]
          break;
 8001cce:	e009      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cd0:	2308      	movs	r3, #8
 8001cd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	615a      	str	r2, [r3, #20]
          break;
 8001cda:	e003      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	623b      	str	r3, [r7, #32]
          break;
 8001ce0:	e000      	b.n	8001ce4 <HAL_GPIO_Init+0x130>
          break;
 8001ce2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ce4:	69bb      	ldr	r3, [r7, #24]
 8001ce6:	2bff      	cmp	r3, #255	@ 0xff
 8001ce8:	d801      	bhi.n	8001cee <HAL_GPIO_Init+0x13a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	e001      	b.n	8001cf2 <HAL_GPIO_Init+0x13e>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	2bff      	cmp	r3, #255	@ 0xff
 8001cf8:	d802      	bhi.n	8001d00 <HAL_GPIO_Init+0x14c>
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	e002      	b.n	8001d06 <HAL_GPIO_Init+0x152>
 8001d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d02:	3b08      	subs	r3, #8
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	210f      	movs	r1, #15
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	401a      	ands	r2, r3
 8001d18:	6a39      	ldr	r1, [r7, #32]
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d20:	431a      	orrs	r2, r3
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 80b1 	beq.w	8001e96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d34:	4b4d      	ldr	r3, [pc, #308]	@ (8001e6c <HAL_GPIO_Init+0x2b8>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	4a4c      	ldr	r2, [pc, #304]	@ (8001e6c <HAL_GPIO_Init+0x2b8>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6193      	str	r3, [r2, #24]
 8001d40:	4b4a      	ldr	r3, [pc, #296]	@ (8001e6c <HAL_GPIO_Init+0x2b8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60bb      	str	r3, [r7, #8]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d4c:	4a48      	ldr	r2, [pc, #288]	@ (8001e70 <HAL_GPIO_Init+0x2bc>)
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	3302      	adds	r3, #2
 8001d54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	f003 0303 	and.w	r3, r3, #3
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a40      	ldr	r2, [pc, #256]	@ (8001e74 <HAL_GPIO_Init+0x2c0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d013      	beq.n	8001da0 <HAL_GPIO_Init+0x1ec>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001e78 <HAL_GPIO_Init+0x2c4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d00d      	beq.n	8001d9c <HAL_GPIO_Init+0x1e8>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a3e      	ldr	r2, [pc, #248]	@ (8001e7c <HAL_GPIO_Init+0x2c8>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d007      	beq.n	8001d98 <HAL_GPIO_Init+0x1e4>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001e80 <HAL_GPIO_Init+0x2cc>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d101      	bne.n	8001d94 <HAL_GPIO_Init+0x1e0>
 8001d90:	2303      	movs	r3, #3
 8001d92:	e006      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d94:	2304      	movs	r3, #4
 8001d96:	e004      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e002      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e000      	b.n	8001da2 <HAL_GPIO_Init+0x1ee>
 8001da0:	2300      	movs	r3, #0
 8001da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001da4:	f002 0203 	and.w	r2, r2, #3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4093      	lsls	r3, r2
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001db2:	492f      	ldr	r1, [pc, #188]	@ (8001e70 <HAL_GPIO_Init+0x2bc>)
 8001db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d006      	beq.n	8001dda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	492c      	ldr	r1, [pc, #176]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	608b      	str	r3, [r1, #8]
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dda:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001ddc:	689a      	ldr	r2, [r3, #8]
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4928      	ldr	r1, [pc, #160]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d006      	beq.n	8001e02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001df4:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	4922      	ldr	r1, [pc, #136]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	60cb      	str	r3, [r1, #12]
 8001e00:	e006      	b.n	8001e10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e02:	4b20      	ldr	r3, [pc, #128]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	491e      	ldr	r1, [pc, #120]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d006      	beq.n	8001e2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e1e:	685a      	ldr	r2, [r3, #4]
 8001e20:	4918      	ldr	r1, [pc, #96]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	604b      	str	r3, [r1, #4]
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e2a:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	4914      	ldr	r1, [pc, #80]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e34:	4013      	ands	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d021      	beq.n	8001e88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e44:	4b0f      	ldr	r3, [pc, #60]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	490e      	ldr	r1, [pc, #56]	@ (8001e84 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	600b      	str	r3, [r1, #0]
 8001e50:	e021      	b.n	8001e96 <HAL_GPIO_Init+0x2e2>
 8001e52:	bf00      	nop
 8001e54:	10320000 	.word	0x10320000
 8001e58:	10310000 	.word	0x10310000
 8001e5c:	10220000 	.word	0x10220000
 8001e60:	10210000 	.word	0x10210000
 8001e64:	10120000 	.word	0x10120000
 8001e68:	10110000 	.word	0x10110000
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40010000 	.word	0x40010000
 8001e74:	40010800 	.word	0x40010800
 8001e78:	40010c00 	.word	0x40010c00
 8001e7c:	40011000 	.word	0x40011000
 8001e80:	40011400 	.word	0x40011400
 8001e84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e88:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	4909      	ldr	r1, [pc, #36]	@ (8001eb8 <HAL_GPIO_Init+0x304>)
 8001e92:	4013      	ands	r3, r2
 8001e94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e98:	3301      	adds	r3, #1
 8001e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	f47f ae8e 	bne.w	8001bc8 <HAL_GPIO_Init+0x14>
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	372c      	adds	r7, #44	@ 0x2c
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40010400 	.word	0x40010400

08001ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	807b      	strh	r3, [r7, #2]
 8001ec8:	4613      	mov	r3, r2
 8001eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ecc:	787b      	ldrb	r3, [r7, #1]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ed2:	887a      	ldrh	r2, [r7, #2]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ed8:	e003      	b.n	8001ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001eda:	887b      	ldrh	r3, [r7, #2]
 8001edc:	041a      	lsls	r2, r3, #16
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	611a      	str	r2, [r3, #16]
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr

08001eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e272      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f000 8087 	beq.w	800201a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f0c:	4b92      	ldr	r3, [pc, #584]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 030c 	and.w	r3, r3, #12
 8001f14:	2b04      	cmp	r3, #4
 8001f16:	d00c      	beq.n	8001f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f18:	4b8f      	ldr	r3, [pc, #572]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f003 030c 	and.w	r3, r3, #12
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d112      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5e>
 8001f24:	4b8c      	ldr	r3, [pc, #560]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f30:	d10b      	bne.n	8001f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f32:	4b89      	ldr	r3, [pc, #548]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d06c      	beq.n	8002018 <HAL_RCC_OscConfig+0x12c>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d168      	bne.n	8002018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e24c      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f52:	d106      	bne.n	8001f62 <HAL_RCC_OscConfig+0x76>
 8001f54:	4b80      	ldr	r3, [pc, #512]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a7f      	ldr	r2, [pc, #508]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f5e:	6013      	str	r3, [r2, #0]
 8001f60:	e02e      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10c      	bne.n	8001f84 <HAL_RCC_OscConfig+0x98>
 8001f6a:	4b7b      	ldr	r3, [pc, #492]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7a      	ldr	r2, [pc, #488]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b78      	ldr	r3, [pc, #480]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a77      	ldr	r2, [pc, #476]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e01d      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f8c:	d10c      	bne.n	8001fa8 <HAL_RCC_OscConfig+0xbc>
 8001f8e:	4b72      	ldr	r3, [pc, #456]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a71      	ldr	r2, [pc, #452]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a6e      	ldr	r2, [pc, #440]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa4:	6013      	str	r3, [r2, #0]
 8001fa6:	e00b      	b.n	8001fc0 <HAL_RCC_OscConfig+0xd4>
 8001fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a6a      	ldr	r2, [pc, #424]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb2:	6013      	str	r3, [r2, #0]
 8001fb4:	4b68      	ldr	r3, [pc, #416]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a67      	ldr	r2, [pc, #412]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d013      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe ffb2 	bl	8000f30 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7fe ffae 	bl	8000f30 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	@ 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e200      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCC_OscConfig+0xe4>
 8001fee:	e014      	b.n	800201a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ff9e 	bl	8000f30 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe ff9a 	bl	8000f30 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	@ 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e1ec      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	4b53      	ldr	r3, [pc, #332]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x10c>
 8002016:	e000      	b.n	800201a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d063      	beq.n	80020ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002026:	4b4c      	ldr	r3, [pc, #304]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 030c 	and.w	r3, r3, #12
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002032:	4b49      	ldr	r3, [pc, #292]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	2b08      	cmp	r3, #8
 800203c:	d11c      	bne.n	8002078 <HAL_RCC_OscConfig+0x18c>
 800203e:	4b46      	ldr	r3, [pc, #280]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d116      	bne.n	8002078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204a:	4b43      	ldr	r3, [pc, #268]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d005      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d001      	beq.n	8002062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e1c0      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002062:	4b3d      	ldr	r3, [pc, #244]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4939      	ldr	r1, [pc, #228]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002072:	4313      	orrs	r3, r2
 8002074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002076:	e03a      	b.n	80020ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	691b      	ldr	r3, [r3, #16]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d020      	beq.n	80020c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002080:	4b36      	ldr	r3, [pc, #216]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 8002082:	2201      	movs	r2, #1
 8002084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002086:	f7fe ff53 	bl	8000f30 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800208e:	f7fe ff4f 	bl	8000f30 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e1a1      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0f0      	beq.n	800208e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	695b      	ldr	r3, [r3, #20]
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4927      	ldr	r1, [pc, #156]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	600b      	str	r3, [r1, #0]
 80020c0:	e015      	b.n	80020ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020c2:	4b26      	ldr	r3, [pc, #152]	@ (800215c <HAL_RCC_OscConfig+0x270>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe ff32 	bl	8000f30 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe ff2e 	bl	8000f30 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e180      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d03a      	beq.n	8002170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d019      	beq.n	8002136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002102:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <HAL_RCC_OscConfig+0x274>)
 8002104:	2201      	movs	r2, #1
 8002106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002108:	f7fe ff12 	bl	8000f30 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7fe ff0e 	bl	8000f30 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e160      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	4b0d      	ldr	r3, [pc, #52]	@ (8002158 <HAL_RCC_OscConfig+0x26c>)
 8002124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800212e:	2001      	movs	r0, #1
 8002130:	f000 face 	bl	80026d0 <RCC_Delay>
 8002134:	e01c      	b.n	8002170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_RCC_OscConfig+0x274>)
 8002138:	2200      	movs	r2, #0
 800213a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800213c:	f7fe fef8 	bl	8000f30 <HAL_GetTick>
 8002140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002142:	e00f      	b.n	8002164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7fe fef4 	bl	8000f30 <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d908      	bls.n	8002164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e146      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
 8002156:	bf00      	nop
 8002158:	40021000 	.word	0x40021000
 800215c:	42420000 	.word	0x42420000
 8002160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	4b92      	ldr	r3, [pc, #584]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d1e9      	bne.n	8002144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 80a6 	beq.w	80022ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800217e:	2300      	movs	r3, #0
 8002180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002182:	4b8b      	ldr	r3, [pc, #556]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d10d      	bne.n	80021aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800218e:	4b88      	ldr	r3, [pc, #544]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a87      	ldr	r2, [pc, #540]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002198:	61d3      	str	r3, [r2, #28]
 800219a:	4b85      	ldr	r3, [pc, #532]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021a2:	60bb      	str	r3, [r7, #8]
 80021a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021a6:	2301      	movs	r3, #1
 80021a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021aa:	4b82      	ldr	r3, [pc, #520]	@ (80023b4 <HAL_RCC_OscConfig+0x4c8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d118      	bne.n	80021e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021b6:	4b7f      	ldr	r3, [pc, #508]	@ (80023b4 <HAL_RCC_OscConfig+0x4c8>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a7e      	ldr	r2, [pc, #504]	@ (80023b4 <HAL_RCC_OscConfig+0x4c8>)
 80021bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021c2:	f7fe feb5 	bl	8000f30 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ca:	f7fe feb1 	bl	8000f30 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b64      	cmp	r3, #100	@ 0x64
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e103      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021dc:	4b75      	ldr	r3, [pc, #468]	@ (80023b4 <HAL_RCC_OscConfig+0x4c8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d106      	bne.n	80021fe <HAL_RCC_OscConfig+0x312>
 80021f0:	4b6f      	ldr	r3, [pc, #444]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	4a6e      	ldr	r2, [pc, #440]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6213      	str	r3, [r2, #32]
 80021fc:	e02d      	b.n	800225a <HAL_RCC_OscConfig+0x36e>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d10c      	bne.n	8002220 <HAL_RCC_OscConfig+0x334>
 8002206:	4b6a      	ldr	r3, [pc, #424]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a69      	ldr	r2, [pc, #420]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	4b67      	ldr	r3, [pc, #412]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a66      	ldr	r2, [pc, #408]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6213      	str	r3, [r2, #32]
 800221e:	e01c      	b.n	800225a <HAL_RCC_OscConfig+0x36e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d10c      	bne.n	8002242 <HAL_RCC_OscConfig+0x356>
 8002228:	4b61      	ldr	r3, [pc, #388]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	4a60      	ldr	r2, [pc, #384]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800222e:	f043 0304 	orr.w	r3, r3, #4
 8002232:	6213      	str	r3, [r2, #32]
 8002234:	4b5e      	ldr	r3, [pc, #376]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4a5d      	ldr	r2, [pc, #372]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	f043 0301 	orr.w	r3, r3, #1
 800223e:	6213      	str	r3, [r2, #32]
 8002240:	e00b      	b.n	800225a <HAL_RCC_OscConfig+0x36e>
 8002242:	4b5b      	ldr	r3, [pc, #364]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	4a5a      	ldr	r2, [pc, #360]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002248:	f023 0301 	bic.w	r3, r3, #1
 800224c:	6213      	str	r3, [r2, #32]
 800224e:	4b58      	ldr	r3, [pc, #352]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002250:	6a1b      	ldr	r3, [r3, #32]
 8002252:	4a57      	ldr	r2, [pc, #348]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002254:	f023 0304 	bic.w	r3, r3, #4
 8002258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d015      	beq.n	800228e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002262:	f7fe fe65 	bl	8000f30 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	e00a      	b.n	8002280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226a:	f7fe fe61 	bl	8000f30 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002278:	4293      	cmp	r3, r2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e0b1      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	4b4b      	ldr	r3, [pc, #300]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ee      	beq.n	800226a <HAL_RCC_OscConfig+0x37e>
 800228c:	e014      	b.n	80022b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228e:	f7fe fe4f 	bl	8000f30 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7fe fe4b 	bl	8000f30 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e09b      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ac:	4b40      	ldr	r3, [pc, #256]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1ee      	bne.n	8002296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022b8:	7dfb      	ldrb	r3, [r7, #23]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d105      	bne.n	80022ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022be:	4b3c      	ldr	r3, [pc, #240]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a3b      	ldr	r2, [pc, #236]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8087 	beq.w	80023e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022d4:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f003 030c 	and.w	r3, r3, #12
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d061      	beq.n	80023a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d146      	bne.n	8002376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e8:	4b33      	ldr	r3, [pc, #204]	@ (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ee:	f7fe fe1f 	bl	8000f30 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f6:	f7fe fe1b 	bl	8000f30 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e06d      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002308:	4b29      	ldr	r3, [pc, #164]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800231c:	d108      	bne.n	8002330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800231e:	4b24      	ldr	r3, [pc, #144]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	4921      	ldr	r1, [pc, #132]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	4313      	orrs	r3, r2
 800232e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002330:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a19      	ldr	r1, [r3, #32]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002340:	430b      	orrs	r3, r1
 8002342:	491b      	ldr	r1, [pc, #108]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	4313      	orrs	r3, r2
 8002346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002348:	4b1b      	ldr	r3, [pc, #108]	@ (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fdef 	bl	8000f30 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002356:	f7fe fdeb 	bl	8000f30 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e03d      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002368:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x46a>
 8002374:	e035      	b.n	80023e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002376:	4b10      	ldr	r3, [pc, #64]	@ (80023b8 <HAL_RCC_OscConfig+0x4cc>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fdd8 	bl	8000f30 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fdd4 	bl	8000f30 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e026      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002396:	4b06      	ldr	r3, [pc, #24]	@ (80023b0 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0x498>
 80023a2:	e01e      	b.n	80023e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	69db      	ldr	r3, [r3, #28]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d107      	bne.n	80023bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e019      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40007000 	.word	0x40007000
 80023b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023bc:	4b0b      	ldr	r3, [pc, #44]	@ (80023ec <HAL_RCC_OscConfig+0x500>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
 80023f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0d0      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002404:	4b6a      	ldr	r3, [pc, #424]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0307 	and.w	r3, r3, #7
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	429a      	cmp	r2, r3
 8002410:	d910      	bls.n	8002434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002412:	4b67      	ldr	r3, [pc, #412]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 0207 	bic.w	r2, r3, #7
 800241a:	4965      	ldr	r1, [pc, #404]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002422:	4b63      	ldr	r3, [pc, #396]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	429a      	cmp	r2, r3
 800242e:	d001      	beq.n	8002434 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e0b8      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d020      	beq.n	8002482 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800244c:	4b59      	ldr	r3, [pc, #356]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	4a58      	ldr	r2, [pc, #352]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002452:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002456:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d005      	beq.n	8002470 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002464:	4b53      	ldr	r3, [pc, #332]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4a52      	ldr	r2, [pc, #328]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800246a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800246e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002470:	4b50      	ldr	r3, [pc, #320]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	494d      	ldr	r1, [pc, #308]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d040      	beq.n	8002510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002496:	4b47      	ldr	r3, [pc, #284]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d115      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07f      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d107      	bne.n	80024be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ae:	4b41      	ldr	r3, [pc, #260]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d109      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e073      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024be:	4b3d      	ldr	r3, [pc, #244]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e06b      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ce:	4b39      	ldr	r3, [pc, #228]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f023 0203 	bic.w	r2, r3, #3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	4936      	ldr	r1, [pc, #216]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024e0:	f7fe fd26 	bl	8000f30 <HAL_GetTick>
 80024e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e6:	e00a      	b.n	80024fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e8:	f7fe fd22 	bl	8000f30 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e053      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fe:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f003 020c 	and.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	429a      	cmp	r2, r3
 800250e:	d1eb      	bne.n	80024e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002510:	4b27      	ldr	r3, [pc, #156]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d210      	bcs.n	8002540 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251e:	4b24      	ldr	r3, [pc, #144]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	4922      	ldr	r1, [pc, #136]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	4313      	orrs	r3, r2
 800252c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800252e:	4b20      	ldr	r3, [pc, #128]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d001      	beq.n	8002540 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e032      	b.n	80025a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	d008      	beq.n	800255e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800254c:	4b19      	ldr	r3, [pc, #100]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4916      	ldr	r1, [pc, #88]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800256a:	4b12      	ldr	r3, [pc, #72]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	00db      	lsls	r3, r3, #3
 8002578:	490e      	ldr	r1, [pc, #56]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 800257a:	4313      	orrs	r3, r2
 800257c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800257e:	f000 f821 	bl	80025c4 <HAL_RCC_GetSysClockFreq>
 8002582:	4602      	mov	r2, r0
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	091b      	lsrs	r3, r3, #4
 800258a:	f003 030f 	and.w	r3, r3, #15
 800258e:	490a      	ldr	r1, [pc, #40]	@ (80025b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	5ccb      	ldrb	r3, [r1, r3]
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	4a09      	ldr	r2, [pc, #36]	@ (80025bc <HAL_RCC_ClockConfig+0x1cc>)
 8002598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800259a:	4b09      	ldr	r3, [pc, #36]	@ (80025c0 <HAL_RCC_ClockConfig+0x1d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fe fc84 	bl	8000eac <HAL_InitTick>

  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	40022000 	.word	0x40022000
 80025b4:	40021000 	.word	0x40021000
 80025b8:	080039e0 	.word	0x080039e0
 80025bc:	20000000 	.word	0x20000000
 80025c0:	20000004 	.word	0x20000004

080025c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025da:	2300      	movs	r3, #0
 80025dc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025de:	4b1e      	ldr	r3, [pc, #120]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x94>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f003 030c 	and.w	r3, r3, #12
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d002      	beq.n	80025f4 <HAL_RCC_GetSysClockFreq+0x30>
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d003      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x36>
 80025f2:	e027      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025f4:	4b19      	ldr	r3, [pc, #100]	@ (800265c <HAL_RCC_GetSysClockFreq+0x98>)
 80025f6:	613b      	str	r3, [r7, #16]
      break;
 80025f8:	e027      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	0c9b      	lsrs	r3, r3, #18
 80025fe:	f003 030f 	and.w	r3, r3, #15
 8002602:	4a17      	ldr	r2, [pc, #92]	@ (8002660 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d010      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002612:	4b11      	ldr	r3, [pc, #68]	@ (8002658 <HAL_RCC_GetSysClockFreq+0x94>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0c5b      	lsrs	r3, r3, #17
 8002618:	f003 0301 	and.w	r3, r3, #1
 800261c:	4a11      	ldr	r2, [pc, #68]	@ (8002664 <HAL_RCC_GetSysClockFreq+0xa0>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a0d      	ldr	r2, [pc, #52]	@ (800265c <HAL_RCC_GetSysClockFreq+0x98>)
 8002626:	fb03 f202 	mul.w	r2, r3, r2
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	e004      	b.n	800263e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4a0c      	ldr	r2, [pc, #48]	@ (8002668 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	613b      	str	r3, [r7, #16]
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_RCC_GetSysClockFreq+0x98>)
 8002646:	613b      	str	r3, [r7, #16]
      break;
 8002648:	bf00      	nop
    }
  }
  return sysclockfreq;
 800264a:	693b      	ldr	r3, [r7, #16]
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40021000 	.word	0x40021000
 800265c:	007a1200 	.word	0x007a1200
 8002660:	080039f8 	.word	0x080039f8
 8002664:	08003a08 	.word	0x08003a08
 8002668:	003d0900 	.word	0x003d0900

0800266c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002670:	4b02      	ldr	r3, [pc, #8]	@ (800267c <HAL_RCC_GetHCLKFreq+0x10>)
 8002672:	681b      	ldr	r3, [r3, #0]
}
 8002674:	4618      	mov	r0, r3
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr
 800267c:	20000000 	.word	0x20000000

08002680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002684:	f7ff fff2 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8002688:	4602      	mov	r2, r0
 800268a:	4b05      	ldr	r3, [pc, #20]	@ (80026a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	f003 0307 	and.w	r3, r3, #7
 8002694:	4903      	ldr	r1, [pc, #12]	@ (80026a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002696:	5ccb      	ldrb	r3, [r1, r3]
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	080039f0 	.word	0x080039f0

080026a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026ac:	f7ff ffde 	bl	800266c <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0adb      	lsrs	r3, r3, #11
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	@ (80026cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	080039f0 	.word	0x080039f0

080026d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002704 <RCC_Delay+0x34>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002708 <RCC_Delay+0x38>)
 80026de:	fba2 2303 	umull	r2, r3, r2, r3
 80026e2:	0a5b      	lsrs	r3, r3, #9
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	fb02 f303 	mul.w	r3, r2, r3
 80026ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80026ec:	bf00      	nop
  }
  while (Delay --);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1e5a      	subs	r2, r3, #1
 80026f2:	60fa      	str	r2, [r7, #12]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1f9      	bne.n	80026ec <RCC_Delay+0x1c>
}
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	3714      	adds	r7, #20
 80026fe:	46bd      	mov	sp, r7
 8002700:	bc80      	pop	{r7}
 8002702:	4770      	bx	lr
 8002704:	20000000 	.word	0x20000000
 8002708:	10624dd3 	.word	0x10624dd3

0800270c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e042      	b.n	80027a4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe f99c 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2224      	movs	r2, #36	@ 0x24
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800274e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 fb6d 	bl	8002e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002764:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695a      	ldr	r2, [r3, #20]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002774:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68da      	ldr	r2, [r3, #12]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002784:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2220      	movs	r2, #32
 8002798:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08c      	sub	sp, #48	@ 0x30
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d156      	bne.n	8002874 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d002      	beq.n	80027d2 <HAL_UART_Transmit_DMA+0x26>
 80027cc:	88fb      	ldrh	r3, [r7, #6]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e04f      	b.n	8002876 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	88fa      	ldrh	r2, [r7, #6]
 80027e0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	88fa      	ldrh	r2, [r7, #6]
 80027e6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2221      	movs	r2, #33	@ 0x21
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027fa:	4a21      	ldr	r2, [pc, #132]	@ (8002880 <HAL_UART_Transmit_DMA+0xd4>)
 80027fc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002802:	4a20      	ldr	r2, [pc, #128]	@ (8002884 <HAL_UART_Transmit_DMA+0xd8>)
 8002804:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280a:	4a1f      	ldr	r2, [pc, #124]	@ (8002888 <HAL_UART_Transmit_DMA+0xdc>)
 800280c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002812:	2200      	movs	r2, #0
 8002814:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002816:	f107 0308 	add.w	r3, r7, #8
 800281a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002822:	6819      	ldr	r1, [r3, #0]
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	3304      	adds	r3, #4
 800282a:	461a      	mov	r2, r3
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	f7ff f82d 	bl	800188c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800283a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3314      	adds	r3, #20
 8002842:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	e853 3f00 	ldrex	r3, [r3]
 800284a:	617b      	str	r3, [r7, #20]
   return(result);
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	3314      	adds	r3, #20
 800285a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800285c:	627a      	str	r2, [r7, #36]	@ 0x24
 800285e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002860:	6a39      	ldr	r1, [r7, #32]
 8002862:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002864:	e841 2300 	strex	r3, r2, [r1]
 8002868:	61fb      	str	r3, [r7, #28]
   return(result);
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1e5      	bne.n	800283c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002870:	2300      	movs	r3, #0
 8002872:	e000      	b.n	8002876 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002874:	2302      	movs	r3, #2
  }
}
 8002876:	4618      	mov	r0, r3
 8002878:	3730      	adds	r7, #48	@ 0x30
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	08002935 	.word	0x08002935
 8002884:	080029cf 	.word	0x080029cf
 8002888:	08002b53 	.word	0x08002b53

0800288c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	4613      	mov	r3, r2
 8002898:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b20      	cmp	r3, #32
 80028a4:	d112      	bne.n	80028cc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_UART_Receive_DMA+0x26>
 80028ac:	88fb      	ldrh	r3, [r7, #6]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00b      	b.n	80028ce <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80028bc:	88fb      	ldrh	r3, [r7, #6]
 80028be:	461a      	mov	r2, r3
 80028c0:	68b9      	ldr	r1, [r7, #8]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f990 	bl	8002be8 <UART_Start_Receive_DMA>
 80028c8:	4603      	mov	r3, r0
 80028ca:	e000      	b.n	80028ce <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80028cc:	2302      	movs	r3, #2
  }
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028d6:	b480      	push	{r7}
 80028d8:	b083      	sub	sp, #12
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80028de:	bf00      	nop
 80028e0:	370c      	adds	r7, #12
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bc80      	pop	{r7}
 80028e6:	4770      	bx	lr

080028e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bc80      	pop	{r7}
 80028f8:	4770      	bx	lr

080028fa <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002902:	bf00      	nop
 8002904:	370c      	adds	r7, #12
 8002906:	46bd      	mov	sp, r7
 8002908:	bc80      	pop	{r7}
 800290a:	4770      	bx	lr

0800290c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	bc80      	pop	{r7}
 800291c:	4770      	bx	lr

0800291e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
 8002926:	460b      	mov	r3, r1
 8002928:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	bc80      	pop	{r7}
 8002932:	4770      	bx	lr

08002934 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	@ 0x40
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d137      	bne.n	80029c0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002952:	2200      	movs	r2, #0
 8002954:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	3314      	adds	r3, #20
 800295c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	e853 3f00 	ldrex	r3, [r3]
 8002964:	623b      	str	r3, [r7, #32]
   return(result);
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800296c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800296e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3314      	adds	r3, #20
 8002974:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002976:	633a      	str	r2, [r7, #48]	@ 0x30
 8002978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800297a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800297c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e5      	bne.n	8002956 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800298a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	330c      	adds	r3, #12
 8002990:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	e853 3f00 	ldrex	r3, [r3]
 8002998:	60fb      	str	r3, [r7, #12]
   return(result);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	330c      	adds	r3, #12
 80029a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80029aa:	61fa      	str	r2, [r7, #28]
 80029ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	e841 2300 	strex	r3, r2, [r1]
 80029b6:	617b      	str	r3, [r7, #20]
   return(result);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e5      	bne.n	800298a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80029be:	e002      	b.n	80029c6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80029c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80029c2:	f7fe fa21 	bl	8000e08 <HAL_UART_TxCpltCallback>
}
 80029c6:	bf00      	nop
 80029c8:	3740      	adds	r7, #64	@ 0x40
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff ff7a 	bl	80028d6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b09c      	sub	sp, #112	@ 0x70
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029f6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d172      	bne.n	8002aec <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002a06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a08:	2200      	movs	r2, #0
 8002a0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	330c      	adds	r3, #12
 8002a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a16:	e853 3f00 	ldrex	r3, [r3]
 8002a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002a22:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	330c      	adds	r3, #12
 8002a2a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002a2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a2e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a30:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a34:	e841 2300 	strex	r3, r2, [r1]
 8002a38:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1e5      	bne.n	8002a0c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	3314      	adds	r3, #20
 8002a46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a4a:	e853 3f00 	ldrex	r3, [r3]
 8002a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a52:	f023 0301 	bic.w	r3, r3, #1
 8002a56:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	3314      	adds	r3, #20
 8002a5e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a60:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a62:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a68:	e841 2300 	strex	r3, r2, [r1]
 8002a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e5      	bne.n	8002a40 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	3314      	adds	r3, #20
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	e853 3f00 	ldrex	r3, [r3]
 8002a82:	623b      	str	r3, [r7, #32]
   return(result);
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	3314      	adds	r3, #20
 8002a92:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002a94:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a98:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a9c:	e841 2300 	strex	r3, r2, [r1]
 8002aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1e5      	bne.n	8002a74 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ab0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d119      	bne.n	8002aec <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	330c      	adds	r3, #12
 8002abe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	e853 3f00 	ldrex	r3, [r3]
 8002ac6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0310 	bic.w	r3, r3, #16
 8002ace:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ad0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	330c      	adds	r3, #12
 8002ad6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002ad8:	61fa      	str	r2, [r7, #28]
 8002ada:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002adc:	69b9      	ldr	r1, [r7, #24]
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	e841 2300 	strex	r3, r2, [r1]
 8002ae4:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e5      	bne.n	8002ab8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aee:	2200      	movs	r2, #0
 8002af0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002af2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d106      	bne.n	8002b08 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002afc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002afe:	4619      	mov	r1, r3
 8002b00:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002b02:	f7ff ff0c 	bl	800291e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b06:	e002      	b.n	8002b0e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002b08:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002b0a:	f7ff feed 	bl	80028e8 <HAL_UART_RxCpltCallback>
}
 8002b0e:	bf00      	nop
 8002b10:	3770      	adds	r7, #112	@ 0x70
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2201      	movs	r2, #1
 8002b28:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d108      	bne.n	8002b44 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff feee 	bl	800291e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002b42:	e002      	b.n	8002b4a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002b44:	68f8      	ldr	r0, [r7, #12]
 8002b46:	f7ff fed8 	bl	80028fa <HAL_UART_RxHalfCpltCallback>
}
 8002b4a:	bf00      	nop
 8002b4c:	3710      	adds	r7, #16
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b084      	sub	sp, #16
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b62:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b21      	cmp	r3, #33	@ 0x21
 8002b84:	d108      	bne.n	8002b98 <UART_DMAError+0x46>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002b92:	68b8      	ldr	r0, [r7, #8]
 8002b94:	f000 f8c2 	bl	8002d1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	bf14      	ite	ne
 8002ba6:	2301      	movne	r3, #1
 8002ba8:	2300      	moveq	r3, #0
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b22      	cmp	r3, #34	@ 0x22
 8002bb8:	d108      	bne.n	8002bcc <UART_DMAError+0x7a>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d005      	beq.n	8002bcc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002bc6:	68b8      	ldr	r0, [r7, #8]
 8002bc8:	f000 f8cf 	bl	8002d6a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd0:	f043 0210 	orr.w	r2, r3, #16
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002bd8:	68b8      	ldr	r0, [r7, #8]
 8002bda:	f7ff fe97 	bl	800290c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b098      	sub	sp, #96	@ 0x60
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2200      	movs	r2, #0
 8002c06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2222      	movs	r2, #34	@ 0x22
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c14:	4a3e      	ldr	r2, [pc, #248]	@ (8002d10 <UART_Start_Receive_DMA+0x128>)
 8002c16:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1c:	4a3d      	ldr	r2, [pc, #244]	@ (8002d14 <UART_Start_Receive_DMA+0x12c>)
 8002c1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c24:	4a3c      	ldr	r2, [pc, #240]	@ (8002d18 <UART_Start_Receive_DMA+0x130>)
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002c30:	f107 0308 	add.w	r3, r7, #8
 8002c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	3304      	adds	r3, #4
 8002c40:	4619      	mov	r1, r3
 8002c42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	f7fe fe20 	bl	800188c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d019      	beq.n	8002c9e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	330c      	adds	r3, #12
 8002c70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c80:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	330c      	adds	r3, #12
 8002c88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c8a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002c90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c92:	e841 2300 	strex	r3, r2, [r1]
 8002c96:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	3314      	adds	r3, #20
 8002ca4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca8:	e853 3f00 	ldrex	r3, [r3]
 8002cac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3314      	adds	r3, #20
 8002cbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002cbe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002cc4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002cc6:	e841 2300 	strex	r3, r2, [r1]
 8002cca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1e5      	bne.n	8002c9e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	3314      	adds	r3, #20
 8002cd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ce8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3314      	adds	r3, #20
 8002cf0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002cf2:	627a      	str	r2, [r7, #36]	@ 0x24
 8002cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf6:	6a39      	ldr	r1, [r7, #32]
 8002cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cfa:	e841 2300 	strex	r3, r2, [r1]
 8002cfe:	61fb      	str	r3, [r7, #28]
   return(result);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1e5      	bne.n	8002cd2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3760      	adds	r7, #96	@ 0x60
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	080029eb 	.word	0x080029eb
 8002d14:	08002b17 	.word	0x08002b17
 8002d18:	08002b53 	.word	0x08002b53

08002d1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b089      	sub	sp, #36	@ 0x24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	e853 3f00 	ldrex	r3, [r3]
 8002d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d3a:	61fb      	str	r3, [r7, #28]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	69fa      	ldr	r2, [r7, #28]
 8002d44:	61ba      	str	r2, [r7, #24]
 8002d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d48:	6979      	ldr	r1, [r7, #20]
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	e841 2300 	strex	r3, r2, [r1]
 8002d50:	613b      	str	r3, [r7, #16]
   return(result);
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e5      	bne.n	8002d24 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002d60:	bf00      	nop
 8002d62:	3724      	adds	r7, #36	@ 0x24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bc80      	pop	{r7}
 8002d68:	4770      	bx	lr

08002d6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b095      	sub	sp, #84	@ 0x54
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d92:	643a      	str	r2, [r7, #64]	@ 0x40
 8002d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002d98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002d9a:	e841 2300 	strex	r3, r2, [r1]
 8002d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1e5      	bne.n	8002d72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3314      	adds	r3, #20
 8002dac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	e853 3f00 	ldrex	r3, [r3]
 8002db4:	61fb      	str	r3, [r7, #28]
   return(result);
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f023 0301 	bic.w	r3, r3, #1
 8002dbc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	3314      	adds	r3, #20
 8002dc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002dc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002dcc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002dce:	e841 2300 	strex	r3, r2, [r1]
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1e5      	bne.n	8002da6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d119      	bne.n	8002e16 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	330c      	adds	r3, #12
 8002de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	e853 3f00 	ldrex	r3, [r3]
 8002df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f023 0310 	bic.w	r3, r3, #16
 8002df8:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	330c      	adds	r3, #12
 8002e00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e02:	61ba      	str	r2, [r7, #24]
 8002e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e06:	6979      	ldr	r1, [r7, #20]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	e841 2300 	strex	r3, r2, [r1]
 8002e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1e5      	bne.n	8002de2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e24:	bf00      	nop
 8002e26:	3754      	adds	r7, #84	@ 0x54
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bc80      	pop	{r7}
 8002e2c:	4770      	bx	lr
	...

08002e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002e6a:	f023 030c 	bic.w	r3, r3, #12
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2c      	ldr	r2, [pc, #176]	@ (8002f44 <UART_SetConfig+0x114>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d103      	bne.n	8002ea0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e98:	f7ff fc06 	bl	80026a8 <HAL_RCC_GetPCLK2Freq>
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	e002      	b.n	8002ea6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7ff fbee 	bl	8002680 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	009a      	lsls	r2, r3, #2
 8002eb0:	441a      	add	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	4a22      	ldr	r2, [pc, #136]	@ (8002f48 <UART_SetConfig+0x118>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	0119      	lsls	r1, r3, #4
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009a      	lsls	r2, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002edc:	4b1a      	ldr	r3, [pc, #104]	@ (8002f48 <UART_SetConfig+0x118>)
 8002ede:	fba3 0302 	umull	r0, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2064      	movs	r0, #100	@ 0x64
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	3332      	adds	r3, #50	@ 0x32
 8002ef0:	4a15      	ldr	r2, [pc, #84]	@ (8002f48 <UART_SetConfig+0x118>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002efc:	4419      	add	r1, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009a      	lsls	r2, r3, #2
 8002f08:	441a      	add	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f14:	4b0c      	ldr	r3, [pc, #48]	@ (8002f48 <UART_SetConfig+0x118>)
 8002f16:	fba3 0302 	umull	r0, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2064      	movs	r0, #100	@ 0x64
 8002f1e:	fb00 f303 	mul.w	r3, r0, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	3332      	adds	r3, #50	@ 0x32
 8002f28:	4a07      	ldr	r2, [pc, #28]	@ (8002f48 <UART_SetConfig+0x118>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	f003 020f 	and.w	r2, r3, #15
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	440a      	add	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40013800 	.word	0x40013800
 8002f48:	51eb851f 	.word	0x51eb851f

08002f4c <_vsniprintf_r>:
 8002f4c:	b530      	push	{r4, r5, lr}
 8002f4e:	4614      	mov	r4, r2
 8002f50:	2c00      	cmp	r4, #0
 8002f52:	4605      	mov	r5, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	b09b      	sub	sp, #108	@ 0x6c
 8002f58:	da05      	bge.n	8002f66 <_vsniprintf_r+0x1a>
 8002f5a:	238b      	movs	r3, #139	@ 0x8b
 8002f5c:	6003      	str	r3, [r0, #0]
 8002f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f62:	b01b      	add	sp, #108	@ 0x6c
 8002f64:	bd30      	pop	{r4, r5, pc}
 8002f66:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8002f6a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8002f6e:	bf0c      	ite	eq
 8002f70:	4623      	moveq	r3, r4
 8002f72:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002f76:	9302      	str	r3, [sp, #8]
 8002f78:	9305      	str	r3, [sp, #20]
 8002f7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002f7e:	9100      	str	r1, [sp, #0]
 8002f80:	9104      	str	r1, [sp, #16]
 8002f82:	f8ad 300e 	strh.w	r3, [sp, #14]
 8002f86:	4669      	mov	r1, sp
 8002f88:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8002f8a:	f000 f9bd 	bl	8003308 <_svfiprintf_r>
 8002f8e:	1c43      	adds	r3, r0, #1
 8002f90:	bfbc      	itt	lt
 8002f92:	238b      	movlt	r3, #139	@ 0x8b
 8002f94:	602b      	strlt	r3, [r5, #0]
 8002f96:	2c00      	cmp	r4, #0
 8002f98:	d0e3      	beq.n	8002f62 <_vsniprintf_r+0x16>
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	9b00      	ldr	r3, [sp, #0]
 8002f9e:	701a      	strb	r2, [r3, #0]
 8002fa0:	e7df      	b.n	8002f62 <_vsniprintf_r+0x16>
	...

08002fa4 <vsniprintf>:
 8002fa4:	b507      	push	{r0, r1, r2, lr}
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	460a      	mov	r2, r1
 8002fac:	4601      	mov	r1, r0
 8002fae:	4803      	ldr	r0, [pc, #12]	@ (8002fbc <vsniprintf+0x18>)
 8002fb0:	6800      	ldr	r0, [r0, #0]
 8002fb2:	f7ff ffcb 	bl	8002f4c <_vsniprintf_r>
 8002fb6:	b003      	add	sp, #12
 8002fb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fbc:	2000000c 	.word	0x2000000c

08002fc0 <memcmp>:
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	3901      	subs	r1, #1
 8002fc4:	4402      	add	r2, r0
 8002fc6:	4290      	cmp	r0, r2
 8002fc8:	d101      	bne.n	8002fce <memcmp+0xe>
 8002fca:	2000      	movs	r0, #0
 8002fcc:	e005      	b.n	8002fda <memcmp+0x1a>
 8002fce:	7803      	ldrb	r3, [r0, #0]
 8002fd0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8002fd4:	42a3      	cmp	r3, r4
 8002fd6:	d001      	beq.n	8002fdc <memcmp+0x1c>
 8002fd8:	1b18      	subs	r0, r3, r4
 8002fda:	bd10      	pop	{r4, pc}
 8002fdc:	3001      	adds	r0, #1
 8002fde:	e7f2      	b.n	8002fc6 <memcmp+0x6>

08002fe0 <memset>:
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4402      	add	r2, r0
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d100      	bne.n	8002fea <memset+0xa>
 8002fe8:	4770      	bx	lr
 8002fea:	f803 1b01 	strb.w	r1, [r3], #1
 8002fee:	e7f9      	b.n	8002fe4 <memset+0x4>

08002ff0 <__errno>:
 8002ff0:	4b01      	ldr	r3, [pc, #4]	@ (8002ff8 <__errno+0x8>)
 8002ff2:	6818      	ldr	r0, [r3, #0]
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000000c 	.word	0x2000000c

08002ffc <__libc_init_array>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	2600      	movs	r6, #0
 8003000:	4d0c      	ldr	r5, [pc, #48]	@ (8003034 <__libc_init_array+0x38>)
 8003002:	4c0d      	ldr	r4, [pc, #52]	@ (8003038 <__libc_init_array+0x3c>)
 8003004:	1b64      	subs	r4, r4, r5
 8003006:	10a4      	asrs	r4, r4, #2
 8003008:	42a6      	cmp	r6, r4
 800300a:	d109      	bne.n	8003020 <__libc_init_array+0x24>
 800300c:	f000 fc78 	bl	8003900 <_init>
 8003010:	2600      	movs	r6, #0
 8003012:	4d0a      	ldr	r5, [pc, #40]	@ (800303c <__libc_init_array+0x40>)
 8003014:	4c0a      	ldr	r4, [pc, #40]	@ (8003040 <__libc_init_array+0x44>)
 8003016:	1b64      	subs	r4, r4, r5
 8003018:	10a4      	asrs	r4, r4, #2
 800301a:	42a6      	cmp	r6, r4
 800301c:	d105      	bne.n	800302a <__libc_init_array+0x2e>
 800301e:	bd70      	pop	{r4, r5, r6, pc}
 8003020:	f855 3b04 	ldr.w	r3, [r5], #4
 8003024:	4798      	blx	r3
 8003026:	3601      	adds	r6, #1
 8003028:	e7ee      	b.n	8003008 <__libc_init_array+0xc>
 800302a:	f855 3b04 	ldr.w	r3, [r5], #4
 800302e:	4798      	blx	r3
 8003030:	3601      	adds	r6, #1
 8003032:	e7f2      	b.n	800301a <__libc_init_array+0x1e>
 8003034:	08003a40 	.word	0x08003a40
 8003038:	08003a40 	.word	0x08003a40
 800303c:	08003a40 	.word	0x08003a40
 8003040:	08003a44 	.word	0x08003a44

08003044 <__retarget_lock_acquire_recursive>:
 8003044:	4770      	bx	lr

08003046 <__retarget_lock_release_recursive>:
 8003046:	4770      	bx	lr

08003048 <memcpy>:
 8003048:	440a      	add	r2, r1
 800304a:	4291      	cmp	r1, r2
 800304c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003050:	d100      	bne.n	8003054 <memcpy+0xc>
 8003052:	4770      	bx	lr
 8003054:	b510      	push	{r4, lr}
 8003056:	f811 4b01 	ldrb.w	r4, [r1], #1
 800305a:	4291      	cmp	r1, r2
 800305c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003060:	d1f9      	bne.n	8003056 <memcpy+0xe>
 8003062:	bd10      	pop	{r4, pc}

08003064 <_free_r>:
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	4605      	mov	r5, r0
 8003068:	2900      	cmp	r1, #0
 800306a:	d040      	beq.n	80030ee <_free_r+0x8a>
 800306c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003070:	1f0c      	subs	r4, r1, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	bfb8      	it	lt
 8003076:	18e4      	addlt	r4, r4, r3
 8003078:	f000 f8de 	bl	8003238 <__malloc_lock>
 800307c:	4a1c      	ldr	r2, [pc, #112]	@ (80030f0 <_free_r+0x8c>)
 800307e:	6813      	ldr	r3, [r2, #0]
 8003080:	b933      	cbnz	r3, 8003090 <_free_r+0x2c>
 8003082:	6063      	str	r3, [r4, #4]
 8003084:	6014      	str	r4, [r2, #0]
 8003086:	4628      	mov	r0, r5
 8003088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800308c:	f000 b8da 	b.w	8003244 <__malloc_unlock>
 8003090:	42a3      	cmp	r3, r4
 8003092:	d908      	bls.n	80030a6 <_free_r+0x42>
 8003094:	6820      	ldr	r0, [r4, #0]
 8003096:	1821      	adds	r1, r4, r0
 8003098:	428b      	cmp	r3, r1
 800309a:	bf01      	itttt	eq
 800309c:	6819      	ldreq	r1, [r3, #0]
 800309e:	685b      	ldreq	r3, [r3, #4]
 80030a0:	1809      	addeq	r1, r1, r0
 80030a2:	6021      	streq	r1, [r4, #0]
 80030a4:	e7ed      	b.n	8003082 <_free_r+0x1e>
 80030a6:	461a      	mov	r2, r3
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	b10b      	cbz	r3, 80030b0 <_free_r+0x4c>
 80030ac:	42a3      	cmp	r3, r4
 80030ae:	d9fa      	bls.n	80030a6 <_free_r+0x42>
 80030b0:	6811      	ldr	r1, [r2, #0]
 80030b2:	1850      	adds	r0, r2, r1
 80030b4:	42a0      	cmp	r0, r4
 80030b6:	d10b      	bne.n	80030d0 <_free_r+0x6c>
 80030b8:	6820      	ldr	r0, [r4, #0]
 80030ba:	4401      	add	r1, r0
 80030bc:	1850      	adds	r0, r2, r1
 80030be:	4283      	cmp	r3, r0
 80030c0:	6011      	str	r1, [r2, #0]
 80030c2:	d1e0      	bne.n	8003086 <_free_r+0x22>
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4408      	add	r0, r1
 80030ca:	6010      	str	r0, [r2, #0]
 80030cc:	6053      	str	r3, [r2, #4]
 80030ce:	e7da      	b.n	8003086 <_free_r+0x22>
 80030d0:	d902      	bls.n	80030d8 <_free_r+0x74>
 80030d2:	230c      	movs	r3, #12
 80030d4:	602b      	str	r3, [r5, #0]
 80030d6:	e7d6      	b.n	8003086 <_free_r+0x22>
 80030d8:	6820      	ldr	r0, [r4, #0]
 80030da:	1821      	adds	r1, r4, r0
 80030dc:	428b      	cmp	r3, r1
 80030de:	bf01      	itttt	eq
 80030e0:	6819      	ldreq	r1, [r3, #0]
 80030e2:	685b      	ldreq	r3, [r3, #4]
 80030e4:	1809      	addeq	r1, r1, r0
 80030e6:	6021      	streq	r1, [r4, #0]
 80030e8:	6063      	str	r3, [r4, #4]
 80030ea:	6054      	str	r4, [r2, #4]
 80030ec:	e7cb      	b.n	8003086 <_free_r+0x22>
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	20000b58 	.word	0x20000b58

080030f4 <sbrk_aligned>:
 80030f4:	b570      	push	{r4, r5, r6, lr}
 80030f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003134 <sbrk_aligned+0x40>)
 80030f8:	460c      	mov	r4, r1
 80030fa:	6831      	ldr	r1, [r6, #0]
 80030fc:	4605      	mov	r5, r0
 80030fe:	b911      	cbnz	r1, 8003106 <sbrk_aligned+0x12>
 8003100:	f000 fbaa 	bl	8003858 <_sbrk_r>
 8003104:	6030      	str	r0, [r6, #0]
 8003106:	4621      	mov	r1, r4
 8003108:	4628      	mov	r0, r5
 800310a:	f000 fba5 	bl	8003858 <_sbrk_r>
 800310e:	1c43      	adds	r3, r0, #1
 8003110:	d103      	bne.n	800311a <sbrk_aligned+0x26>
 8003112:	f04f 34ff 	mov.w	r4, #4294967295
 8003116:	4620      	mov	r0, r4
 8003118:	bd70      	pop	{r4, r5, r6, pc}
 800311a:	1cc4      	adds	r4, r0, #3
 800311c:	f024 0403 	bic.w	r4, r4, #3
 8003120:	42a0      	cmp	r0, r4
 8003122:	d0f8      	beq.n	8003116 <sbrk_aligned+0x22>
 8003124:	1a21      	subs	r1, r4, r0
 8003126:	4628      	mov	r0, r5
 8003128:	f000 fb96 	bl	8003858 <_sbrk_r>
 800312c:	3001      	adds	r0, #1
 800312e:	d1f2      	bne.n	8003116 <sbrk_aligned+0x22>
 8003130:	e7ef      	b.n	8003112 <sbrk_aligned+0x1e>
 8003132:	bf00      	nop
 8003134:	20000b54 	.word	0x20000b54

08003138 <_malloc_r>:
 8003138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800313c:	1ccd      	adds	r5, r1, #3
 800313e:	f025 0503 	bic.w	r5, r5, #3
 8003142:	3508      	adds	r5, #8
 8003144:	2d0c      	cmp	r5, #12
 8003146:	bf38      	it	cc
 8003148:	250c      	movcc	r5, #12
 800314a:	2d00      	cmp	r5, #0
 800314c:	4606      	mov	r6, r0
 800314e:	db01      	blt.n	8003154 <_malloc_r+0x1c>
 8003150:	42a9      	cmp	r1, r5
 8003152:	d904      	bls.n	800315e <_malloc_r+0x26>
 8003154:	230c      	movs	r3, #12
 8003156:	6033      	str	r3, [r6, #0]
 8003158:	2000      	movs	r0, #0
 800315a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800315e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003234 <_malloc_r+0xfc>
 8003162:	f000 f869 	bl	8003238 <__malloc_lock>
 8003166:	f8d8 3000 	ldr.w	r3, [r8]
 800316a:	461c      	mov	r4, r3
 800316c:	bb44      	cbnz	r4, 80031c0 <_malloc_r+0x88>
 800316e:	4629      	mov	r1, r5
 8003170:	4630      	mov	r0, r6
 8003172:	f7ff ffbf 	bl	80030f4 <sbrk_aligned>
 8003176:	1c43      	adds	r3, r0, #1
 8003178:	4604      	mov	r4, r0
 800317a:	d158      	bne.n	800322e <_malloc_r+0xf6>
 800317c:	f8d8 4000 	ldr.w	r4, [r8]
 8003180:	4627      	mov	r7, r4
 8003182:	2f00      	cmp	r7, #0
 8003184:	d143      	bne.n	800320e <_malloc_r+0xd6>
 8003186:	2c00      	cmp	r4, #0
 8003188:	d04b      	beq.n	8003222 <_malloc_r+0xea>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	4639      	mov	r1, r7
 800318e:	4630      	mov	r0, r6
 8003190:	eb04 0903 	add.w	r9, r4, r3
 8003194:	f000 fb60 	bl	8003858 <_sbrk_r>
 8003198:	4581      	cmp	r9, r0
 800319a:	d142      	bne.n	8003222 <_malloc_r+0xea>
 800319c:	6821      	ldr	r1, [r4, #0]
 800319e:	4630      	mov	r0, r6
 80031a0:	1a6d      	subs	r5, r5, r1
 80031a2:	4629      	mov	r1, r5
 80031a4:	f7ff ffa6 	bl	80030f4 <sbrk_aligned>
 80031a8:	3001      	adds	r0, #1
 80031aa:	d03a      	beq.n	8003222 <_malloc_r+0xea>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	442b      	add	r3, r5
 80031b0:	6023      	str	r3, [r4, #0]
 80031b2:	f8d8 3000 	ldr.w	r3, [r8]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	bb62      	cbnz	r2, 8003214 <_malloc_r+0xdc>
 80031ba:	f8c8 7000 	str.w	r7, [r8]
 80031be:	e00f      	b.n	80031e0 <_malloc_r+0xa8>
 80031c0:	6822      	ldr	r2, [r4, #0]
 80031c2:	1b52      	subs	r2, r2, r5
 80031c4:	d420      	bmi.n	8003208 <_malloc_r+0xd0>
 80031c6:	2a0b      	cmp	r2, #11
 80031c8:	d917      	bls.n	80031fa <_malloc_r+0xc2>
 80031ca:	1961      	adds	r1, r4, r5
 80031cc:	42a3      	cmp	r3, r4
 80031ce:	6025      	str	r5, [r4, #0]
 80031d0:	bf18      	it	ne
 80031d2:	6059      	strne	r1, [r3, #4]
 80031d4:	6863      	ldr	r3, [r4, #4]
 80031d6:	bf08      	it	eq
 80031d8:	f8c8 1000 	streq.w	r1, [r8]
 80031dc:	5162      	str	r2, [r4, r5]
 80031de:	604b      	str	r3, [r1, #4]
 80031e0:	4630      	mov	r0, r6
 80031e2:	f000 f82f 	bl	8003244 <__malloc_unlock>
 80031e6:	f104 000b 	add.w	r0, r4, #11
 80031ea:	1d23      	adds	r3, r4, #4
 80031ec:	f020 0007 	bic.w	r0, r0, #7
 80031f0:	1ac2      	subs	r2, r0, r3
 80031f2:	bf1c      	itt	ne
 80031f4:	1a1b      	subne	r3, r3, r0
 80031f6:	50a3      	strne	r3, [r4, r2]
 80031f8:	e7af      	b.n	800315a <_malloc_r+0x22>
 80031fa:	6862      	ldr	r2, [r4, #4]
 80031fc:	42a3      	cmp	r3, r4
 80031fe:	bf0c      	ite	eq
 8003200:	f8c8 2000 	streq.w	r2, [r8]
 8003204:	605a      	strne	r2, [r3, #4]
 8003206:	e7eb      	b.n	80031e0 <_malloc_r+0xa8>
 8003208:	4623      	mov	r3, r4
 800320a:	6864      	ldr	r4, [r4, #4]
 800320c:	e7ae      	b.n	800316c <_malloc_r+0x34>
 800320e:	463c      	mov	r4, r7
 8003210:	687f      	ldr	r7, [r7, #4]
 8003212:	e7b6      	b.n	8003182 <_malloc_r+0x4a>
 8003214:	461a      	mov	r2, r3
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	42a3      	cmp	r3, r4
 800321a:	d1fb      	bne.n	8003214 <_malloc_r+0xdc>
 800321c:	2300      	movs	r3, #0
 800321e:	6053      	str	r3, [r2, #4]
 8003220:	e7de      	b.n	80031e0 <_malloc_r+0xa8>
 8003222:	230c      	movs	r3, #12
 8003224:	4630      	mov	r0, r6
 8003226:	6033      	str	r3, [r6, #0]
 8003228:	f000 f80c 	bl	8003244 <__malloc_unlock>
 800322c:	e794      	b.n	8003158 <_malloc_r+0x20>
 800322e:	6005      	str	r5, [r0, #0]
 8003230:	e7d6      	b.n	80031e0 <_malloc_r+0xa8>
 8003232:	bf00      	nop
 8003234:	20000b58 	.word	0x20000b58

08003238 <__malloc_lock>:
 8003238:	4801      	ldr	r0, [pc, #4]	@ (8003240 <__malloc_lock+0x8>)
 800323a:	f7ff bf03 	b.w	8003044 <__retarget_lock_acquire_recursive>
 800323e:	bf00      	nop
 8003240:	20000b50 	.word	0x20000b50

08003244 <__malloc_unlock>:
 8003244:	4801      	ldr	r0, [pc, #4]	@ (800324c <__malloc_unlock+0x8>)
 8003246:	f7ff befe 	b.w	8003046 <__retarget_lock_release_recursive>
 800324a:	bf00      	nop
 800324c:	20000b50 	.word	0x20000b50

08003250 <__ssputs_r>:
 8003250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003254:	461f      	mov	r7, r3
 8003256:	688e      	ldr	r6, [r1, #8]
 8003258:	4682      	mov	sl, r0
 800325a:	42be      	cmp	r6, r7
 800325c:	460c      	mov	r4, r1
 800325e:	4690      	mov	r8, r2
 8003260:	680b      	ldr	r3, [r1, #0]
 8003262:	d82d      	bhi.n	80032c0 <__ssputs_r+0x70>
 8003264:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003268:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800326c:	d026      	beq.n	80032bc <__ssputs_r+0x6c>
 800326e:	6965      	ldr	r5, [r4, #20]
 8003270:	6909      	ldr	r1, [r1, #16]
 8003272:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003276:	eba3 0901 	sub.w	r9, r3, r1
 800327a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800327e:	1c7b      	adds	r3, r7, #1
 8003280:	444b      	add	r3, r9
 8003282:	106d      	asrs	r5, r5, #1
 8003284:	429d      	cmp	r5, r3
 8003286:	bf38      	it	cc
 8003288:	461d      	movcc	r5, r3
 800328a:	0553      	lsls	r3, r2, #21
 800328c:	d527      	bpl.n	80032de <__ssputs_r+0x8e>
 800328e:	4629      	mov	r1, r5
 8003290:	f7ff ff52 	bl	8003138 <_malloc_r>
 8003294:	4606      	mov	r6, r0
 8003296:	b360      	cbz	r0, 80032f2 <__ssputs_r+0xa2>
 8003298:	464a      	mov	r2, r9
 800329a:	6921      	ldr	r1, [r4, #16]
 800329c:	f7ff fed4 	bl	8003048 <memcpy>
 80032a0:	89a3      	ldrh	r3, [r4, #12]
 80032a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80032a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032aa:	81a3      	strh	r3, [r4, #12]
 80032ac:	6126      	str	r6, [r4, #16]
 80032ae:	444e      	add	r6, r9
 80032b0:	6026      	str	r6, [r4, #0]
 80032b2:	463e      	mov	r6, r7
 80032b4:	6165      	str	r5, [r4, #20]
 80032b6:	eba5 0509 	sub.w	r5, r5, r9
 80032ba:	60a5      	str	r5, [r4, #8]
 80032bc:	42be      	cmp	r6, r7
 80032be:	d900      	bls.n	80032c2 <__ssputs_r+0x72>
 80032c0:	463e      	mov	r6, r7
 80032c2:	4632      	mov	r2, r6
 80032c4:	4641      	mov	r1, r8
 80032c6:	6820      	ldr	r0, [r4, #0]
 80032c8:	f000 faac 	bl	8003824 <memmove>
 80032cc:	2000      	movs	r0, #0
 80032ce:	68a3      	ldr	r3, [r4, #8]
 80032d0:	1b9b      	subs	r3, r3, r6
 80032d2:	60a3      	str	r3, [r4, #8]
 80032d4:	6823      	ldr	r3, [r4, #0]
 80032d6:	4433      	add	r3, r6
 80032d8:	6023      	str	r3, [r4, #0]
 80032da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032de:	462a      	mov	r2, r5
 80032e0:	f000 fad8 	bl	8003894 <_realloc_r>
 80032e4:	4606      	mov	r6, r0
 80032e6:	2800      	cmp	r0, #0
 80032e8:	d1e0      	bne.n	80032ac <__ssputs_r+0x5c>
 80032ea:	4650      	mov	r0, sl
 80032ec:	6921      	ldr	r1, [r4, #16]
 80032ee:	f7ff feb9 	bl	8003064 <_free_r>
 80032f2:	230c      	movs	r3, #12
 80032f4:	f8ca 3000 	str.w	r3, [sl]
 80032f8:	89a3      	ldrh	r3, [r4, #12]
 80032fa:	f04f 30ff 	mov.w	r0, #4294967295
 80032fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	e7e9      	b.n	80032da <__ssputs_r+0x8a>
	...

08003308 <_svfiprintf_r>:
 8003308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800330c:	4698      	mov	r8, r3
 800330e:	898b      	ldrh	r3, [r1, #12]
 8003310:	4607      	mov	r7, r0
 8003312:	061b      	lsls	r3, r3, #24
 8003314:	460d      	mov	r5, r1
 8003316:	4614      	mov	r4, r2
 8003318:	b09d      	sub	sp, #116	@ 0x74
 800331a:	d510      	bpl.n	800333e <_svfiprintf_r+0x36>
 800331c:	690b      	ldr	r3, [r1, #16]
 800331e:	b973      	cbnz	r3, 800333e <_svfiprintf_r+0x36>
 8003320:	2140      	movs	r1, #64	@ 0x40
 8003322:	f7ff ff09 	bl	8003138 <_malloc_r>
 8003326:	6028      	str	r0, [r5, #0]
 8003328:	6128      	str	r0, [r5, #16]
 800332a:	b930      	cbnz	r0, 800333a <_svfiprintf_r+0x32>
 800332c:	230c      	movs	r3, #12
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	f04f 30ff 	mov.w	r0, #4294967295
 8003334:	b01d      	add	sp, #116	@ 0x74
 8003336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800333a:	2340      	movs	r3, #64	@ 0x40
 800333c:	616b      	str	r3, [r5, #20]
 800333e:	2300      	movs	r3, #0
 8003340:	9309      	str	r3, [sp, #36]	@ 0x24
 8003342:	2320      	movs	r3, #32
 8003344:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003348:	2330      	movs	r3, #48	@ 0x30
 800334a:	f04f 0901 	mov.w	r9, #1
 800334e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003352:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80034ec <_svfiprintf_r+0x1e4>
 8003356:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800335a:	4623      	mov	r3, r4
 800335c:	469a      	mov	sl, r3
 800335e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003362:	b10a      	cbz	r2, 8003368 <_svfiprintf_r+0x60>
 8003364:	2a25      	cmp	r2, #37	@ 0x25
 8003366:	d1f9      	bne.n	800335c <_svfiprintf_r+0x54>
 8003368:	ebba 0b04 	subs.w	fp, sl, r4
 800336c:	d00b      	beq.n	8003386 <_svfiprintf_r+0x7e>
 800336e:	465b      	mov	r3, fp
 8003370:	4622      	mov	r2, r4
 8003372:	4629      	mov	r1, r5
 8003374:	4638      	mov	r0, r7
 8003376:	f7ff ff6b 	bl	8003250 <__ssputs_r>
 800337a:	3001      	adds	r0, #1
 800337c:	f000 80a7 	beq.w	80034ce <_svfiprintf_r+0x1c6>
 8003380:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003382:	445a      	add	r2, fp
 8003384:	9209      	str	r2, [sp, #36]	@ 0x24
 8003386:	f89a 3000 	ldrb.w	r3, [sl]
 800338a:	2b00      	cmp	r3, #0
 800338c:	f000 809f 	beq.w	80034ce <_svfiprintf_r+0x1c6>
 8003390:	2300      	movs	r3, #0
 8003392:	f04f 32ff 	mov.w	r2, #4294967295
 8003396:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800339a:	f10a 0a01 	add.w	sl, sl, #1
 800339e:	9304      	str	r3, [sp, #16]
 80033a0:	9307      	str	r3, [sp, #28]
 80033a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80033a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80033a8:	4654      	mov	r4, sl
 80033aa:	2205      	movs	r2, #5
 80033ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033b0:	484e      	ldr	r0, [pc, #312]	@ (80034ec <_svfiprintf_r+0x1e4>)
 80033b2:	f000 fa61 	bl	8003878 <memchr>
 80033b6:	9a04      	ldr	r2, [sp, #16]
 80033b8:	b9d8      	cbnz	r0, 80033f2 <_svfiprintf_r+0xea>
 80033ba:	06d0      	lsls	r0, r2, #27
 80033bc:	bf44      	itt	mi
 80033be:	2320      	movmi	r3, #32
 80033c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033c4:	0711      	lsls	r1, r2, #28
 80033c6:	bf44      	itt	mi
 80033c8:	232b      	movmi	r3, #43	@ 0x2b
 80033ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033ce:	f89a 3000 	ldrb.w	r3, [sl]
 80033d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80033d4:	d015      	beq.n	8003402 <_svfiprintf_r+0xfa>
 80033d6:	4654      	mov	r4, sl
 80033d8:	2000      	movs	r0, #0
 80033da:	f04f 0c0a 	mov.w	ip, #10
 80033de:	9a07      	ldr	r2, [sp, #28]
 80033e0:	4621      	mov	r1, r4
 80033e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033e6:	3b30      	subs	r3, #48	@ 0x30
 80033e8:	2b09      	cmp	r3, #9
 80033ea:	d94b      	bls.n	8003484 <_svfiprintf_r+0x17c>
 80033ec:	b1b0      	cbz	r0, 800341c <_svfiprintf_r+0x114>
 80033ee:	9207      	str	r2, [sp, #28]
 80033f0:	e014      	b.n	800341c <_svfiprintf_r+0x114>
 80033f2:	eba0 0308 	sub.w	r3, r0, r8
 80033f6:	fa09 f303 	lsl.w	r3, r9, r3
 80033fa:	4313      	orrs	r3, r2
 80033fc:	46a2      	mov	sl, r4
 80033fe:	9304      	str	r3, [sp, #16]
 8003400:	e7d2      	b.n	80033a8 <_svfiprintf_r+0xa0>
 8003402:	9b03      	ldr	r3, [sp, #12]
 8003404:	1d19      	adds	r1, r3, #4
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	9103      	str	r1, [sp, #12]
 800340a:	2b00      	cmp	r3, #0
 800340c:	bfbb      	ittet	lt
 800340e:	425b      	neglt	r3, r3
 8003410:	f042 0202 	orrlt.w	r2, r2, #2
 8003414:	9307      	strge	r3, [sp, #28]
 8003416:	9307      	strlt	r3, [sp, #28]
 8003418:	bfb8      	it	lt
 800341a:	9204      	strlt	r2, [sp, #16]
 800341c:	7823      	ldrb	r3, [r4, #0]
 800341e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003420:	d10a      	bne.n	8003438 <_svfiprintf_r+0x130>
 8003422:	7863      	ldrb	r3, [r4, #1]
 8003424:	2b2a      	cmp	r3, #42	@ 0x2a
 8003426:	d132      	bne.n	800348e <_svfiprintf_r+0x186>
 8003428:	9b03      	ldr	r3, [sp, #12]
 800342a:	3402      	adds	r4, #2
 800342c:	1d1a      	adds	r2, r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	9203      	str	r2, [sp, #12]
 8003432:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003436:	9305      	str	r3, [sp, #20]
 8003438:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80034f0 <_svfiprintf_r+0x1e8>
 800343c:	2203      	movs	r2, #3
 800343e:	4650      	mov	r0, sl
 8003440:	7821      	ldrb	r1, [r4, #0]
 8003442:	f000 fa19 	bl	8003878 <memchr>
 8003446:	b138      	cbz	r0, 8003458 <_svfiprintf_r+0x150>
 8003448:	2240      	movs	r2, #64	@ 0x40
 800344a:	9b04      	ldr	r3, [sp, #16]
 800344c:	eba0 000a 	sub.w	r0, r0, sl
 8003450:	4082      	lsls	r2, r0
 8003452:	4313      	orrs	r3, r2
 8003454:	3401      	adds	r4, #1
 8003456:	9304      	str	r3, [sp, #16]
 8003458:	f814 1b01 	ldrb.w	r1, [r4], #1
 800345c:	2206      	movs	r2, #6
 800345e:	4825      	ldr	r0, [pc, #148]	@ (80034f4 <_svfiprintf_r+0x1ec>)
 8003460:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003464:	f000 fa08 	bl	8003878 <memchr>
 8003468:	2800      	cmp	r0, #0
 800346a:	d036      	beq.n	80034da <_svfiprintf_r+0x1d2>
 800346c:	4b22      	ldr	r3, [pc, #136]	@ (80034f8 <_svfiprintf_r+0x1f0>)
 800346e:	bb1b      	cbnz	r3, 80034b8 <_svfiprintf_r+0x1b0>
 8003470:	9b03      	ldr	r3, [sp, #12]
 8003472:	3307      	adds	r3, #7
 8003474:	f023 0307 	bic.w	r3, r3, #7
 8003478:	3308      	adds	r3, #8
 800347a:	9303      	str	r3, [sp, #12]
 800347c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800347e:	4433      	add	r3, r6
 8003480:	9309      	str	r3, [sp, #36]	@ 0x24
 8003482:	e76a      	b.n	800335a <_svfiprintf_r+0x52>
 8003484:	460c      	mov	r4, r1
 8003486:	2001      	movs	r0, #1
 8003488:	fb0c 3202 	mla	r2, ip, r2, r3
 800348c:	e7a8      	b.n	80033e0 <_svfiprintf_r+0xd8>
 800348e:	2300      	movs	r3, #0
 8003490:	f04f 0c0a 	mov.w	ip, #10
 8003494:	4619      	mov	r1, r3
 8003496:	3401      	adds	r4, #1
 8003498:	9305      	str	r3, [sp, #20]
 800349a:	4620      	mov	r0, r4
 800349c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034a0:	3a30      	subs	r2, #48	@ 0x30
 80034a2:	2a09      	cmp	r2, #9
 80034a4:	d903      	bls.n	80034ae <_svfiprintf_r+0x1a6>
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0c6      	beq.n	8003438 <_svfiprintf_r+0x130>
 80034aa:	9105      	str	r1, [sp, #20]
 80034ac:	e7c4      	b.n	8003438 <_svfiprintf_r+0x130>
 80034ae:	4604      	mov	r4, r0
 80034b0:	2301      	movs	r3, #1
 80034b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80034b6:	e7f0      	b.n	800349a <_svfiprintf_r+0x192>
 80034b8:	ab03      	add	r3, sp, #12
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	462a      	mov	r2, r5
 80034be:	4638      	mov	r0, r7
 80034c0:	4b0e      	ldr	r3, [pc, #56]	@ (80034fc <_svfiprintf_r+0x1f4>)
 80034c2:	a904      	add	r1, sp, #16
 80034c4:	f3af 8000 	nop.w
 80034c8:	1c42      	adds	r2, r0, #1
 80034ca:	4606      	mov	r6, r0
 80034cc:	d1d6      	bne.n	800347c <_svfiprintf_r+0x174>
 80034ce:	89ab      	ldrh	r3, [r5, #12]
 80034d0:	065b      	lsls	r3, r3, #25
 80034d2:	f53f af2d 	bmi.w	8003330 <_svfiprintf_r+0x28>
 80034d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034d8:	e72c      	b.n	8003334 <_svfiprintf_r+0x2c>
 80034da:	ab03      	add	r3, sp, #12
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	462a      	mov	r2, r5
 80034e0:	4638      	mov	r0, r7
 80034e2:	4b06      	ldr	r3, [pc, #24]	@ (80034fc <_svfiprintf_r+0x1f4>)
 80034e4:	a904      	add	r1, sp, #16
 80034e6:	f000 f87d 	bl	80035e4 <_printf_i>
 80034ea:	e7ed      	b.n	80034c8 <_svfiprintf_r+0x1c0>
 80034ec:	08003a0a 	.word	0x08003a0a
 80034f0:	08003a10 	.word	0x08003a10
 80034f4:	08003a14 	.word	0x08003a14
 80034f8:	00000000 	.word	0x00000000
 80034fc:	08003251 	.word	0x08003251

08003500 <_printf_common>:
 8003500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	4616      	mov	r6, r2
 8003506:	4698      	mov	r8, r3
 8003508:	688a      	ldr	r2, [r1, #8]
 800350a:	690b      	ldr	r3, [r1, #16]
 800350c:	4607      	mov	r7, r0
 800350e:	4293      	cmp	r3, r2
 8003510:	bfb8      	it	lt
 8003512:	4613      	movlt	r3, r2
 8003514:	6033      	str	r3, [r6, #0]
 8003516:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800351a:	460c      	mov	r4, r1
 800351c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003520:	b10a      	cbz	r2, 8003526 <_printf_common+0x26>
 8003522:	3301      	adds	r3, #1
 8003524:	6033      	str	r3, [r6, #0]
 8003526:	6823      	ldr	r3, [r4, #0]
 8003528:	0699      	lsls	r1, r3, #26
 800352a:	bf42      	ittt	mi
 800352c:	6833      	ldrmi	r3, [r6, #0]
 800352e:	3302      	addmi	r3, #2
 8003530:	6033      	strmi	r3, [r6, #0]
 8003532:	6825      	ldr	r5, [r4, #0]
 8003534:	f015 0506 	ands.w	r5, r5, #6
 8003538:	d106      	bne.n	8003548 <_printf_common+0x48>
 800353a:	f104 0a19 	add.w	sl, r4, #25
 800353e:	68e3      	ldr	r3, [r4, #12]
 8003540:	6832      	ldr	r2, [r6, #0]
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	42ab      	cmp	r3, r5
 8003546:	dc2b      	bgt.n	80035a0 <_printf_common+0xa0>
 8003548:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800354c:	6822      	ldr	r2, [r4, #0]
 800354e:	3b00      	subs	r3, #0
 8003550:	bf18      	it	ne
 8003552:	2301      	movne	r3, #1
 8003554:	0692      	lsls	r2, r2, #26
 8003556:	d430      	bmi.n	80035ba <_printf_common+0xba>
 8003558:	4641      	mov	r1, r8
 800355a:	4638      	mov	r0, r7
 800355c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003560:	47c8      	blx	r9
 8003562:	3001      	adds	r0, #1
 8003564:	d023      	beq.n	80035ae <_printf_common+0xae>
 8003566:	6823      	ldr	r3, [r4, #0]
 8003568:	6922      	ldr	r2, [r4, #16]
 800356a:	f003 0306 	and.w	r3, r3, #6
 800356e:	2b04      	cmp	r3, #4
 8003570:	bf14      	ite	ne
 8003572:	2500      	movne	r5, #0
 8003574:	6833      	ldreq	r3, [r6, #0]
 8003576:	f04f 0600 	mov.w	r6, #0
 800357a:	bf08      	it	eq
 800357c:	68e5      	ldreq	r5, [r4, #12]
 800357e:	f104 041a 	add.w	r4, r4, #26
 8003582:	bf08      	it	eq
 8003584:	1aed      	subeq	r5, r5, r3
 8003586:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800358a:	bf08      	it	eq
 800358c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003590:	4293      	cmp	r3, r2
 8003592:	bfc4      	itt	gt
 8003594:	1a9b      	subgt	r3, r3, r2
 8003596:	18ed      	addgt	r5, r5, r3
 8003598:	42b5      	cmp	r5, r6
 800359a:	d11a      	bne.n	80035d2 <_printf_common+0xd2>
 800359c:	2000      	movs	r0, #0
 800359e:	e008      	b.n	80035b2 <_printf_common+0xb2>
 80035a0:	2301      	movs	r3, #1
 80035a2:	4652      	mov	r2, sl
 80035a4:	4641      	mov	r1, r8
 80035a6:	4638      	mov	r0, r7
 80035a8:	47c8      	blx	r9
 80035aa:	3001      	adds	r0, #1
 80035ac:	d103      	bne.n	80035b6 <_printf_common+0xb6>
 80035ae:	f04f 30ff 	mov.w	r0, #4294967295
 80035b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b6:	3501      	adds	r5, #1
 80035b8:	e7c1      	b.n	800353e <_printf_common+0x3e>
 80035ba:	2030      	movs	r0, #48	@ 0x30
 80035bc:	18e1      	adds	r1, r4, r3
 80035be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80035c2:	1c5a      	adds	r2, r3, #1
 80035c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035c8:	4422      	add	r2, r4
 80035ca:	3302      	adds	r3, #2
 80035cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035d0:	e7c2      	b.n	8003558 <_printf_common+0x58>
 80035d2:	2301      	movs	r3, #1
 80035d4:	4622      	mov	r2, r4
 80035d6:	4641      	mov	r1, r8
 80035d8:	4638      	mov	r0, r7
 80035da:	47c8      	blx	r9
 80035dc:	3001      	adds	r0, #1
 80035de:	d0e6      	beq.n	80035ae <_printf_common+0xae>
 80035e0:	3601      	adds	r6, #1
 80035e2:	e7d9      	b.n	8003598 <_printf_common+0x98>

080035e4 <_printf_i>:
 80035e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035e8:	7e0f      	ldrb	r7, [r1, #24]
 80035ea:	4691      	mov	r9, r2
 80035ec:	2f78      	cmp	r7, #120	@ 0x78
 80035ee:	4680      	mov	r8, r0
 80035f0:	460c      	mov	r4, r1
 80035f2:	469a      	mov	sl, r3
 80035f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035fa:	d807      	bhi.n	800360c <_printf_i+0x28>
 80035fc:	2f62      	cmp	r7, #98	@ 0x62
 80035fe:	d80a      	bhi.n	8003616 <_printf_i+0x32>
 8003600:	2f00      	cmp	r7, #0
 8003602:	f000 80d3 	beq.w	80037ac <_printf_i+0x1c8>
 8003606:	2f58      	cmp	r7, #88	@ 0x58
 8003608:	f000 80ba 	beq.w	8003780 <_printf_i+0x19c>
 800360c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003610:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003614:	e03a      	b.n	800368c <_printf_i+0xa8>
 8003616:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800361a:	2b15      	cmp	r3, #21
 800361c:	d8f6      	bhi.n	800360c <_printf_i+0x28>
 800361e:	a101      	add	r1, pc, #4	@ (adr r1, 8003624 <_printf_i+0x40>)
 8003620:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003624:	0800367d 	.word	0x0800367d
 8003628:	08003691 	.word	0x08003691
 800362c:	0800360d 	.word	0x0800360d
 8003630:	0800360d 	.word	0x0800360d
 8003634:	0800360d 	.word	0x0800360d
 8003638:	0800360d 	.word	0x0800360d
 800363c:	08003691 	.word	0x08003691
 8003640:	0800360d 	.word	0x0800360d
 8003644:	0800360d 	.word	0x0800360d
 8003648:	0800360d 	.word	0x0800360d
 800364c:	0800360d 	.word	0x0800360d
 8003650:	08003793 	.word	0x08003793
 8003654:	080036bb 	.word	0x080036bb
 8003658:	0800374d 	.word	0x0800374d
 800365c:	0800360d 	.word	0x0800360d
 8003660:	0800360d 	.word	0x0800360d
 8003664:	080037b5 	.word	0x080037b5
 8003668:	0800360d 	.word	0x0800360d
 800366c:	080036bb 	.word	0x080036bb
 8003670:	0800360d 	.word	0x0800360d
 8003674:	0800360d 	.word	0x0800360d
 8003678:	08003755 	.word	0x08003755
 800367c:	6833      	ldr	r3, [r6, #0]
 800367e:	1d1a      	adds	r2, r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6032      	str	r2, [r6, #0]
 8003684:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003688:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800368c:	2301      	movs	r3, #1
 800368e:	e09e      	b.n	80037ce <_printf_i+0x1ea>
 8003690:	6833      	ldr	r3, [r6, #0]
 8003692:	6820      	ldr	r0, [r4, #0]
 8003694:	1d19      	adds	r1, r3, #4
 8003696:	6031      	str	r1, [r6, #0]
 8003698:	0606      	lsls	r6, r0, #24
 800369a:	d501      	bpl.n	80036a0 <_printf_i+0xbc>
 800369c:	681d      	ldr	r5, [r3, #0]
 800369e:	e003      	b.n	80036a8 <_printf_i+0xc4>
 80036a0:	0645      	lsls	r5, r0, #25
 80036a2:	d5fb      	bpl.n	800369c <_printf_i+0xb8>
 80036a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80036a8:	2d00      	cmp	r5, #0
 80036aa:	da03      	bge.n	80036b4 <_printf_i+0xd0>
 80036ac:	232d      	movs	r3, #45	@ 0x2d
 80036ae:	426d      	negs	r5, r5
 80036b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80036b4:	230a      	movs	r3, #10
 80036b6:	4859      	ldr	r0, [pc, #356]	@ (800381c <_printf_i+0x238>)
 80036b8:	e011      	b.n	80036de <_printf_i+0xfa>
 80036ba:	6821      	ldr	r1, [r4, #0]
 80036bc:	6833      	ldr	r3, [r6, #0]
 80036be:	0608      	lsls	r0, r1, #24
 80036c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80036c4:	d402      	bmi.n	80036cc <_printf_i+0xe8>
 80036c6:	0649      	lsls	r1, r1, #25
 80036c8:	bf48      	it	mi
 80036ca:	b2ad      	uxthmi	r5, r5
 80036cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80036ce:	6033      	str	r3, [r6, #0]
 80036d0:	bf14      	ite	ne
 80036d2:	230a      	movne	r3, #10
 80036d4:	2308      	moveq	r3, #8
 80036d6:	4851      	ldr	r0, [pc, #324]	@ (800381c <_printf_i+0x238>)
 80036d8:	2100      	movs	r1, #0
 80036da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036de:	6866      	ldr	r6, [r4, #4]
 80036e0:	2e00      	cmp	r6, #0
 80036e2:	bfa8      	it	ge
 80036e4:	6821      	ldrge	r1, [r4, #0]
 80036e6:	60a6      	str	r6, [r4, #8]
 80036e8:	bfa4      	itt	ge
 80036ea:	f021 0104 	bicge.w	r1, r1, #4
 80036ee:	6021      	strge	r1, [r4, #0]
 80036f0:	b90d      	cbnz	r5, 80036f6 <_printf_i+0x112>
 80036f2:	2e00      	cmp	r6, #0
 80036f4:	d04b      	beq.n	800378e <_printf_i+0x1aa>
 80036f6:	4616      	mov	r6, r2
 80036f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80036fc:	fb03 5711 	mls	r7, r3, r1, r5
 8003700:	5dc7      	ldrb	r7, [r0, r7]
 8003702:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003706:	462f      	mov	r7, r5
 8003708:	42bb      	cmp	r3, r7
 800370a:	460d      	mov	r5, r1
 800370c:	d9f4      	bls.n	80036f8 <_printf_i+0x114>
 800370e:	2b08      	cmp	r3, #8
 8003710:	d10b      	bne.n	800372a <_printf_i+0x146>
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	07df      	lsls	r7, r3, #31
 8003716:	d508      	bpl.n	800372a <_printf_i+0x146>
 8003718:	6923      	ldr	r3, [r4, #16]
 800371a:	6861      	ldr	r1, [r4, #4]
 800371c:	4299      	cmp	r1, r3
 800371e:	bfde      	ittt	le
 8003720:	2330      	movle	r3, #48	@ 0x30
 8003722:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003726:	f106 36ff 	addle.w	r6, r6, #4294967295
 800372a:	1b92      	subs	r2, r2, r6
 800372c:	6122      	str	r2, [r4, #16]
 800372e:	464b      	mov	r3, r9
 8003730:	4621      	mov	r1, r4
 8003732:	4640      	mov	r0, r8
 8003734:	f8cd a000 	str.w	sl, [sp]
 8003738:	aa03      	add	r2, sp, #12
 800373a:	f7ff fee1 	bl	8003500 <_printf_common>
 800373e:	3001      	adds	r0, #1
 8003740:	d14a      	bne.n	80037d8 <_printf_i+0x1f4>
 8003742:	f04f 30ff 	mov.w	r0, #4294967295
 8003746:	b004      	add	sp, #16
 8003748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	f043 0320 	orr.w	r3, r3, #32
 8003752:	6023      	str	r3, [r4, #0]
 8003754:	2778      	movs	r7, #120	@ 0x78
 8003756:	4832      	ldr	r0, [pc, #200]	@ (8003820 <_printf_i+0x23c>)
 8003758:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800375c:	6823      	ldr	r3, [r4, #0]
 800375e:	6831      	ldr	r1, [r6, #0]
 8003760:	061f      	lsls	r7, r3, #24
 8003762:	f851 5b04 	ldr.w	r5, [r1], #4
 8003766:	d402      	bmi.n	800376e <_printf_i+0x18a>
 8003768:	065f      	lsls	r7, r3, #25
 800376a:	bf48      	it	mi
 800376c:	b2ad      	uxthmi	r5, r5
 800376e:	6031      	str	r1, [r6, #0]
 8003770:	07d9      	lsls	r1, r3, #31
 8003772:	bf44      	itt	mi
 8003774:	f043 0320 	orrmi.w	r3, r3, #32
 8003778:	6023      	strmi	r3, [r4, #0]
 800377a:	b11d      	cbz	r5, 8003784 <_printf_i+0x1a0>
 800377c:	2310      	movs	r3, #16
 800377e:	e7ab      	b.n	80036d8 <_printf_i+0xf4>
 8003780:	4826      	ldr	r0, [pc, #152]	@ (800381c <_printf_i+0x238>)
 8003782:	e7e9      	b.n	8003758 <_printf_i+0x174>
 8003784:	6823      	ldr	r3, [r4, #0]
 8003786:	f023 0320 	bic.w	r3, r3, #32
 800378a:	6023      	str	r3, [r4, #0]
 800378c:	e7f6      	b.n	800377c <_printf_i+0x198>
 800378e:	4616      	mov	r6, r2
 8003790:	e7bd      	b.n	800370e <_printf_i+0x12a>
 8003792:	6833      	ldr	r3, [r6, #0]
 8003794:	6825      	ldr	r5, [r4, #0]
 8003796:	1d18      	adds	r0, r3, #4
 8003798:	6961      	ldr	r1, [r4, #20]
 800379a:	6030      	str	r0, [r6, #0]
 800379c:	062e      	lsls	r6, r5, #24
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	d501      	bpl.n	80037a6 <_printf_i+0x1c2>
 80037a2:	6019      	str	r1, [r3, #0]
 80037a4:	e002      	b.n	80037ac <_printf_i+0x1c8>
 80037a6:	0668      	lsls	r0, r5, #25
 80037a8:	d5fb      	bpl.n	80037a2 <_printf_i+0x1be>
 80037aa:	8019      	strh	r1, [r3, #0]
 80037ac:	2300      	movs	r3, #0
 80037ae:	4616      	mov	r6, r2
 80037b0:	6123      	str	r3, [r4, #16]
 80037b2:	e7bc      	b.n	800372e <_printf_i+0x14a>
 80037b4:	6833      	ldr	r3, [r6, #0]
 80037b6:	2100      	movs	r1, #0
 80037b8:	1d1a      	adds	r2, r3, #4
 80037ba:	6032      	str	r2, [r6, #0]
 80037bc:	681e      	ldr	r6, [r3, #0]
 80037be:	6862      	ldr	r2, [r4, #4]
 80037c0:	4630      	mov	r0, r6
 80037c2:	f000 f859 	bl	8003878 <memchr>
 80037c6:	b108      	cbz	r0, 80037cc <_printf_i+0x1e8>
 80037c8:	1b80      	subs	r0, r0, r6
 80037ca:	6060      	str	r0, [r4, #4]
 80037cc:	6863      	ldr	r3, [r4, #4]
 80037ce:	6123      	str	r3, [r4, #16]
 80037d0:	2300      	movs	r3, #0
 80037d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037d6:	e7aa      	b.n	800372e <_printf_i+0x14a>
 80037d8:	4632      	mov	r2, r6
 80037da:	4649      	mov	r1, r9
 80037dc:	4640      	mov	r0, r8
 80037de:	6923      	ldr	r3, [r4, #16]
 80037e0:	47d0      	blx	sl
 80037e2:	3001      	adds	r0, #1
 80037e4:	d0ad      	beq.n	8003742 <_printf_i+0x15e>
 80037e6:	6823      	ldr	r3, [r4, #0]
 80037e8:	079b      	lsls	r3, r3, #30
 80037ea:	d413      	bmi.n	8003814 <_printf_i+0x230>
 80037ec:	68e0      	ldr	r0, [r4, #12]
 80037ee:	9b03      	ldr	r3, [sp, #12]
 80037f0:	4298      	cmp	r0, r3
 80037f2:	bfb8      	it	lt
 80037f4:	4618      	movlt	r0, r3
 80037f6:	e7a6      	b.n	8003746 <_printf_i+0x162>
 80037f8:	2301      	movs	r3, #1
 80037fa:	4632      	mov	r2, r6
 80037fc:	4649      	mov	r1, r9
 80037fe:	4640      	mov	r0, r8
 8003800:	47d0      	blx	sl
 8003802:	3001      	adds	r0, #1
 8003804:	d09d      	beq.n	8003742 <_printf_i+0x15e>
 8003806:	3501      	adds	r5, #1
 8003808:	68e3      	ldr	r3, [r4, #12]
 800380a:	9903      	ldr	r1, [sp, #12]
 800380c:	1a5b      	subs	r3, r3, r1
 800380e:	42ab      	cmp	r3, r5
 8003810:	dcf2      	bgt.n	80037f8 <_printf_i+0x214>
 8003812:	e7eb      	b.n	80037ec <_printf_i+0x208>
 8003814:	2500      	movs	r5, #0
 8003816:	f104 0619 	add.w	r6, r4, #25
 800381a:	e7f5      	b.n	8003808 <_printf_i+0x224>
 800381c:	08003a1b 	.word	0x08003a1b
 8003820:	08003a2c 	.word	0x08003a2c

08003824 <memmove>:
 8003824:	4288      	cmp	r0, r1
 8003826:	b510      	push	{r4, lr}
 8003828:	eb01 0402 	add.w	r4, r1, r2
 800382c:	d902      	bls.n	8003834 <memmove+0x10>
 800382e:	4284      	cmp	r4, r0
 8003830:	4623      	mov	r3, r4
 8003832:	d807      	bhi.n	8003844 <memmove+0x20>
 8003834:	1e43      	subs	r3, r0, #1
 8003836:	42a1      	cmp	r1, r4
 8003838:	d008      	beq.n	800384c <memmove+0x28>
 800383a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800383e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003842:	e7f8      	b.n	8003836 <memmove+0x12>
 8003844:	4601      	mov	r1, r0
 8003846:	4402      	add	r2, r0
 8003848:	428a      	cmp	r2, r1
 800384a:	d100      	bne.n	800384e <memmove+0x2a>
 800384c:	bd10      	pop	{r4, pc}
 800384e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003856:	e7f7      	b.n	8003848 <memmove+0x24>

08003858 <_sbrk_r>:
 8003858:	b538      	push	{r3, r4, r5, lr}
 800385a:	2300      	movs	r3, #0
 800385c:	4d05      	ldr	r5, [pc, #20]	@ (8003874 <_sbrk_r+0x1c>)
 800385e:	4604      	mov	r4, r0
 8003860:	4608      	mov	r0, r1
 8003862:	602b      	str	r3, [r5, #0]
 8003864:	f7fd f9e4 	bl	8000c30 <_sbrk>
 8003868:	1c43      	adds	r3, r0, #1
 800386a:	d102      	bne.n	8003872 <_sbrk_r+0x1a>
 800386c:	682b      	ldr	r3, [r5, #0]
 800386e:	b103      	cbz	r3, 8003872 <_sbrk_r+0x1a>
 8003870:	6023      	str	r3, [r4, #0]
 8003872:	bd38      	pop	{r3, r4, r5, pc}
 8003874:	20000b4c 	.word	0x20000b4c

08003878 <memchr>:
 8003878:	4603      	mov	r3, r0
 800387a:	b510      	push	{r4, lr}
 800387c:	b2c9      	uxtb	r1, r1
 800387e:	4402      	add	r2, r0
 8003880:	4293      	cmp	r3, r2
 8003882:	4618      	mov	r0, r3
 8003884:	d101      	bne.n	800388a <memchr+0x12>
 8003886:	2000      	movs	r0, #0
 8003888:	e003      	b.n	8003892 <memchr+0x1a>
 800388a:	7804      	ldrb	r4, [r0, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	428c      	cmp	r4, r1
 8003890:	d1f6      	bne.n	8003880 <memchr+0x8>
 8003892:	bd10      	pop	{r4, pc}

08003894 <_realloc_r>:
 8003894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003898:	4680      	mov	r8, r0
 800389a:	4615      	mov	r5, r2
 800389c:	460c      	mov	r4, r1
 800389e:	b921      	cbnz	r1, 80038aa <_realloc_r+0x16>
 80038a0:	4611      	mov	r1, r2
 80038a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038a6:	f7ff bc47 	b.w	8003138 <_malloc_r>
 80038aa:	b92a      	cbnz	r2, 80038b8 <_realloc_r+0x24>
 80038ac:	f7ff fbda 	bl	8003064 <_free_r>
 80038b0:	2400      	movs	r4, #0
 80038b2:	4620      	mov	r0, r4
 80038b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b8:	f000 f81a 	bl	80038f0 <_malloc_usable_size_r>
 80038bc:	4285      	cmp	r5, r0
 80038be:	4606      	mov	r6, r0
 80038c0:	d802      	bhi.n	80038c8 <_realloc_r+0x34>
 80038c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80038c6:	d8f4      	bhi.n	80038b2 <_realloc_r+0x1e>
 80038c8:	4629      	mov	r1, r5
 80038ca:	4640      	mov	r0, r8
 80038cc:	f7ff fc34 	bl	8003138 <_malloc_r>
 80038d0:	4607      	mov	r7, r0
 80038d2:	2800      	cmp	r0, #0
 80038d4:	d0ec      	beq.n	80038b0 <_realloc_r+0x1c>
 80038d6:	42b5      	cmp	r5, r6
 80038d8:	462a      	mov	r2, r5
 80038da:	4621      	mov	r1, r4
 80038dc:	bf28      	it	cs
 80038de:	4632      	movcs	r2, r6
 80038e0:	f7ff fbb2 	bl	8003048 <memcpy>
 80038e4:	4621      	mov	r1, r4
 80038e6:	4640      	mov	r0, r8
 80038e8:	f7ff fbbc 	bl	8003064 <_free_r>
 80038ec:	463c      	mov	r4, r7
 80038ee:	e7e0      	b.n	80038b2 <_realloc_r+0x1e>

080038f0 <_malloc_usable_size_r>:
 80038f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038f4:	1f18      	subs	r0, r3, #4
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	bfbc      	itt	lt
 80038fa:	580b      	ldrlt	r3, [r1, r0]
 80038fc:	18c0      	addlt	r0, r0, r3
 80038fe:	4770      	bx	lr

08003900 <_init>:
 8003900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003902:	bf00      	nop
 8003904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003906:	bc08      	pop	{r3}
 8003908:	469e      	mov	lr, r3
 800390a:	4770      	bx	lr

0800390c <_fini>:
 800390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800390e:	bf00      	nop
 8003910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003912:	bc08      	pop	{r3}
 8003914:	469e      	mov	lr, r3
 8003916:	4770      	bx	lr
